
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012bc  0800b588  0800b588  0001b588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c844  0800c844  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c844  0800c844  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c844  0800c844  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c844  0800c844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c848  0800c848  0001c848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800c84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  2000034c  0800cb98  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000160c  0800cb98  0002160c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae58  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000350a  00000000  00000000  0003b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0003e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  0003f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233c6  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff71  00000000  00000000  0006334e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2d51  00000000  00000000  000732bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136010  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  0013608c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000034c 	.word	0x2000034c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b570 	.word	0x0800b570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000350 	.word	0x20000350
 80001dc:	0800b570 	.word	0x0800b570

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <s_gen_flux_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t buffer_verif[64]={'\0'};

s_gen_flux s_gen_flux_init()
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b092      	sub	sp, #72	; 0x48
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    s_gen_flux s = {1920, 1080};
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	2240      	movs	r2, #64	; 0x40
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f00a f863 	bl	800a36c <memset>
 80002a6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80002b0:	60fb      	str	r3, [r7, #12]
    return s;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	461d      	mov	r5, r3
 80002b6:	f107 0408 	add.w	r4, r7, #8
 80002ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	3748      	adds	r7, #72	; 0x48
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080002d8 <s_gen_bus_init>:

s_gen_bus s_gen_bus_init()
{
 80002d8:	b4b0      	push	{r4, r5, r7}
 80002da:	b08f      	sub	sp, #60	; 0x3c
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    s_gen_bus s = {2,0,10, 10101010, 3, 2, 1, 4, 5,0,1};
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <s_gen_bus_init+0x44>)
 80002e2:	f107 040c 	add.w	r4, r7, #12
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return s;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	461d      	mov	r5, r3
 80002fc:	f107 040c 	add.w	r4, r7, #12
 8000300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000308:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800030c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	373c      	adds	r7, #60	; 0x3c
 8000314:	46bd      	mov	sp, r7
 8000316:	bcb0      	pop	{r4, r5, r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	0800b588 	.word	0x0800b588

08000320 <s_rec_bus_init>:

s_rec_bus s_rec_bus_init()
{
 8000320:	b4b0      	push	{r4, r5, r7}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
    s_rec_bus s = {25, 1, 11000101};
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
 8000338:	615a      	str	r2, [r3, #20]
 800033a:	2319      	movs	r3, #25
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	2301      	movs	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <s_rec_bus_init+0x44>)
 8000344:	613b      	str	r3, [r7, #16]
    return s;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	461d      	mov	r5, r3
 800034a:	f107 0408 	add.w	r4, r7, #8
 800034e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000356:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bcb0      	pop	{r4, r5, r7}
 8000362:	4770      	bx	lr
 8000364:	00a7d925 	.word	0x00a7d925

08000368 <s_rec_flux_init>:

s_rec_flux s_rec_flux_init()
{
 8000368:	b5b0      	push	{r4, r5, r7, lr}
 800036a:	b08c      	sub	sp, #48	; 0x30
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
    s_rec_flux s = {1920, 1080, 30, 30, 60};
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	2228      	movs	r2, #40	; 0x28
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f009 fff7 	bl	800a36c <memset>
 800037e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	231e      	movs	r3, #30
 800038c:	613b      	str	r3, [r7, #16]
 800038e:	231e      	movs	r3, #30
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	233c      	movs	r3, #60	; 0x3c
 8000394:	61bb      	str	r3, [r7, #24]
    return s;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	461d      	mov	r5, r3
 800039a:	f107 0408 	add.w	r4, r7, #8
 800039e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003aa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	3730      	adds	r7, #48	; 0x30
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0bc      	sub	sp, #240	; 0xf0
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003be:	f000 fa6f 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f853 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f8ef 	bl	80005a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003ca:	f009 fac1 	bl	8009950 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80003ce:	f000 f8ad 	bl	800052c <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  s_rec_bus rb = s_rec_bus_init();
 80003d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ffa2 	bl	8000320 <s_rec_bus_init>
	  s_rec_flux rf = s_rec_flux_init();
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ffc2 	bl	8000368 <s_rec_flux_init>
	  get_struct(&rf,&rb);
 80003e4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4611      	mov	r1, r2
 80003ec:	4618      	mov	r0, r3
 80003ee:	f007 fe9f 	bl	8008130 <get_struct>
	  if(buffer_verif[0]!='\0')
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <main+0xb0>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0eb      	beq.n	80003d2 <main+0x1a>
	  	  {

	  		    s_gen_flux gf = s_gen_flux_init();
 80003fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff46 	bl	8000290 <s_gen_flux_init>
	  		    s_gen_flux_config( &gf);
 8000404:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000408:	4618      	mov	r0, r3
 800040a:	f008 f913 	bl	8008634 <s_gen_flux_config>
	  		    s_gen_bus gb = s_gen_bus_init();
 800040e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff60 	bl	80002d8 <s_gen_bus_init>
	  		    s_gen_bus_config( &gb);
 8000418:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800041c:	4618      	mov	r0, r3
 800041e:	f008 fa97 	bl	8008950 <s_gen_bus_config>
	  		    s_rec_bus rb = s_rec_bus_init();
 8000422:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff7a 	bl	8000320 <s_rec_bus_init>
	  		    s_rec_bus_config( &rb);
 800042c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000430:	4618      	mov	r0, r3
 8000432:	f008 fbe1 	bl	8008bf8 <s_rec_bus_config>
	  		    s_rec_flux rf = s_rec_flux_init();
 8000436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff94 	bl	8000368 <s_rec_flux_init>
	  		    s_rec_flux_config( &rf);
 8000440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000444:	4618      	mov	r0, r3
 8000446:	f008 fbfb 	bl	8008c40 <s_rec_flux_config>
	  		    clear_buffer(buffer_verif);
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <main+0xb0>)
 800044c:	f009 fa68 	bl	8009920 <clear_buffer>

	  		    Envoie_Bus_com(&gb);
 8000450:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000454:	4618      	mov	r0, r3
 8000456:	f007 ff9b 	bl	8008390 <Envoie_Bus_com>
	  		 	Envoie_DVI(&gf);
 800045a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800045e:	4618      	mov	r0, r3
 8000460:	f007 fff6 	bl	8008450 <Envoie_DVI>
    {
 8000464:	e7b5      	b.n	80003d2 <main+0x1a>
 8000466:	bf00      	nop
 8000468:	20000368 	.word	0x20000368

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0a6      	sub	sp, #152	; 0x98
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000476:	2228      	movs	r2, #40	; 0x28
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f009 ff76 	bl	800a36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2258      	movs	r2, #88	; 0x58
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f009 ff68 	bl	800a36c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800049c:	2301      	movs	r3, #1
 800049e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a6:	2301      	movs	r3, #1
 80004a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 f812 	bl	80024f4 <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f8cb 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2302      	movs	r3, #2
 80004e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004f4:	2101      	movs	r1, #1
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 ff12 	bl	8003320 <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000502:	f000 f8b5 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800050a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800050c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000510:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4618      	mov	r0, r3
 8000516:	f003 f8e9 	bl	80036ec <HAL_RCCEx_PeriphCLKConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000520:	f000 f8a6 	bl	8000670 <Error_Handler>
  }
}
 8000524:	bf00      	nop
 8000526:	3798      	adds	r7, #152	; 0x98
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <MX_SPI1_Init+0x78>)
 8000534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800053c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000546:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800054a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_SPI1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_SPI1_Init+0x74>)
 800055a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800055e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000562:	2238      	movs	r2, #56	; 0x38
 8000564:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_SPI1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_SPI1_Init+0x74>)
 800057a:	2207      	movs	r2, #7
 800057c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_SPI1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_SPI1_Init+0x74>)
 800058c:	f003 facc 	bl	8003b28 <HAL_SPI_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000596:	f000 f86b 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200005d8 	.word	0x200005d8
 80005a4:	40013000 	.word	0x40013000

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a28      	ldr	r2, [pc, #160]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_GPIO_Init+0xbc>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f000 fc6b 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000612:	2310      	movs	r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f000 fad2 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_GPIO_Init+0xc0>)
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4619      	mov	r1, r3
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <MX_GPIO_Init+0xc4>)
 8000646:	f000 fac5 	bl	8000bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f000 fa89 	bl	8000b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000654:	2028      	movs	r0, #40	; 0x28
 8000656:	f000 faa2 	bl	8000b9e <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	10210000 	.word	0x10210000
 800066c:	48000c00 	.word	0x48000c00

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000676:	e7fe      	b.n	8000676 <Error_Handler+0x6>

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x44>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a17      	ldr	r2, [pc, #92]	; (800073c <HAL_SPI_MspInit+0x7c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d128      	bne.n	8000734 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_SPI_MspInit+0x80>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_SPI_MspInit+0x80>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000712:	23e0      	movs	r3, #224	; 0xe0
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000722:	2305      	movs	r3, #5
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f000 fa50 	bl	8000bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013000 	.word	0x40013000
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f8cc 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800079e:	f000 fcd7 	bl	8001150 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000131c 	.word	0x2000131c

080007ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80007b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007b4:	f000 fbb0 	bl	8000f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <_sbrk+0x5c>)
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <_sbrk+0x60>)
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <_sbrk+0x64>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <_sbrk+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <_sbrk+0x64>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d207      	bcs.n	80007fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007ec:	f009 fd6a 	bl	800a2c4 <__errno>
 80007f0:	4602      	mov	r2, r0
 80007f2:	230c      	movs	r3, #12
 80007f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	e009      	b.n	8000810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_sbrk+0x64>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <_sbrk+0x64>)
 800080c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20010000 	.word	0x20010000
 800081c:	00000400 	.word	0x00000400
 8000820:	200003a8 	.word	0x200003a8
 8000824:	20001610 	.word	0x20001610

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <SystemInit+0x20>)
 800082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <SystemInit+0x20>)
 8000834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800084c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000884 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490e      	ldr	r1, [pc, #56]	; (800088c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0b      	ldr	r4, [pc, #44]	; (8000898 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000876:	f7ff ffd7 	bl	8000828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087a:	f009 fd29 	bl	800a2d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087e:	f7ff fd9b 	bl	80003b8 <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000884:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8000890:	0800c84c 	.word	0x0800c84c
  ldr r2, =_sbss
 8000894:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8000898:	2000160c 	.word	0x2000160c

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f94d 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff fedc 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f965 	bl	8000bba <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f92d 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x20>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x24>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_IncTick+0x24>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008
 8000950:	2000063c 	.word	0x2000063c

08000954 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;  
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_GetTick+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	2000063c 	.word	0x2000063c

0800096c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff ffee 	bl	8000954 <HAL_GetTick>
 8000978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_Delay+0x40>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000992:	bf00      	nop
 8000994:	f7ff ffde 	bl	8000954 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000008 	.word	0x20000008

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff29 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff3e 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff8e 	bl	8000aa4 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff31 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	e160      	b.n	8000ea6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8152 	beq.w	8000ea0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d00b      	beq.n	8000c1c <HAL_GPIO_Init+0x48>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d007      	beq.n	8000c1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c10:	2b11      	cmp	r3, #17
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b12      	cmp	r3, #18
 8000c1a:	d130      	bne.n	8000c7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	f003 0201 	and.w	r2, r3, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0xea>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d123      	bne.n	8000d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	6939      	ldr	r1, [r7, #16]
 8000d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0203 	and.w	r2, r3, #3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80ac 	beq.w	8000ea0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d48:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <HAL_GPIO_Init+0x2f0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a5d      	ldr	r2, [pc, #372]	; (8000ec4 <HAL_GPIO_Init+0x2f0>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <HAL_GPIO_Init+0x2f0>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d60:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <HAL_GPIO_Init+0x2f4>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d8a:	d025      	beq.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a4f      	ldr	r2, [pc, #316]	; (8000ecc <HAL_GPIO_Init+0x2f8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d01f      	beq.n	8000dd4 <HAL_GPIO_Init+0x200>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <HAL_GPIO_Init+0x2fc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d019      	beq.n	8000dd0 <HAL_GPIO_Init+0x1fc>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <HAL_GPIO_Init+0x300>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d013      	beq.n	8000dcc <HAL_GPIO_Init+0x1f8>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_Init+0x1f4>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <HAL_GPIO_Init+0x308>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x1f0>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a4a      	ldr	r2, [pc, #296]	; (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_GPIO_Init+0x1ec>
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	e00c      	b.n	8000dda <HAL_GPIO_Init+0x206>
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	e00a      	b.n	8000dda <HAL_GPIO_Init+0x206>
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	e008      	b.n	8000dda <HAL_GPIO_Init+0x206>
 8000dc8:	2304      	movs	r3, #4
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x206>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e004      	b.n	8000dda <HAL_GPIO_Init+0x206>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x206>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <HAL_GPIO_Init+0x206>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	f002 0203 	and.w	r2, r2, #3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4093      	lsls	r3, r2
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dea:	4937      	ldr	r1, [pc, #220]	; (8000ec8 <HAL_GPIO_Init+0x2f4>)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df8:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1c:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e46:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e70:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f47f ae97 	bne.w	8000be4 <HAL_GPIO_Init+0x10>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	48000400 	.word	0x48000400
 8000ed0:	48000800 	.word	0x48000800
 8000ed4:	48000c00 	.word	0x48000c00
 8000ed8:	48001000 	.word	0x48001000
 8000edc:	48001400 	.word	0x48001400
 8000ee0:	48001800 	.word	0x48001800
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f007 fb60 	bl	80085fc <HAL_GPIO_EXTI_Callback>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	b08b      	sub	sp, #44	; 0x2c
 8000f4c:	af06      	add	r7, sp, #24
 8000f4e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0d0      	b.n	80010fc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f008 fef6 	bl	8009d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2203      	movs	r2, #3
 8000f78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 fcf8 	bl	8004976 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e04c      	b.n	8001026 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	440b      	add	r3, r1
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3336      	adds	r3, #54	; 0x36
 8000fca:	4602      	mov	r2, r0
 8000fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	3303      	adds	r3, #3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3338      	adds	r3, #56	; 0x38
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	333c      	adds	r3, #60	; 0x3c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	3340      	adds	r3, #64	; 0x40
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	3301      	adds	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3ad      	bcc.n	8000f8c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e044      	b.n	80010c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3b5      	bcc.n	8001036 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	687e      	ldr	r6, [r7, #4]
 80010d2:	466d      	mov	r5, sp
 80010d4:	f106 0410 	add.w	r4, r6, #16
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	602b      	str	r3, [r5, #0]
 80010e0:	1d33      	adds	r3, r6, #4
 80010e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f003 fc61 	bl	80049ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001104 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_PCD_Start+0x16>
 8001116:	2302      	movs	r3, #2
 8001118:	e016      	b.n	8001148 <HAL_PCD_Start+0x44>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fc0e 	bl	8004948 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800112c:	2101      	movs	r1, #1
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f009 f890 	bl	800a254 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f005 fbe7 	bl	800690c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f005 fbe0 	bl	8006922 <USB_ReadInterrupts>
 8001162:	4603      	mov	r3, r0
 8001164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800116c:	d102      	bne.n	8001174 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 faf6 	bl	8001760 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fbd2 	bl	8006922 <USB_ReadInterrupts>
 800117e:	4603      	mov	r3, r0
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001188:	d112      	bne.n	80011b0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001192:	b29a      	uxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800119c:	b292      	uxth	r2, r2
 800119e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f008 fe57 	bl	8009e56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011a8:	2100      	movs	r1, #0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f8c7 	bl	800133e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fbb4 	bl	8006922 <USB_ReadInterrupts>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011c4:	d10b      	bne.n	80011de <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011d8:	b292      	uxth	r2, r2
 80011da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fb9d 	bl	8006922 <USB_ReadInterrupts>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011f2:	d10b      	bne.n	800120c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001206:	b292      	uxth	r2, r2
 8001208:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f005 fb86 	bl	8006922 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001220:	d126      	bne.n	8001270 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0204 	bic.w	r2, r2, #4
 8001234:	b292      	uxth	r2, r2
 8001236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0208 	bic.w	r2, r2, #8
 800124c:	b292      	uxth	r2, r2
 800124e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f008 fe38 	bl	8009ec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800126a:	b292      	uxth	r2, r2
 800126c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f005 fb54 	bl	8006922 <USB_ReadInterrupts>
 800127a:	4603      	mov	r3, r0
 800127c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001284:	d126      	bne.n	80012d4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800128e:	b29a      	uxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0208 	orr.w	r2, r2, #8
 8001298:	b292      	uxth	r2, r2
 800129a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012b0:	b292      	uxth	r2, r2
 80012b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0204 	orr.w	r2, r2, #4
 80012c8:	b292      	uxth	r2, r2
 80012ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f008 fde0 	bl	8009e94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 fb22 	bl	8006922 <USB_ReadInterrupts>
 80012de:	4603      	mov	r3, r0
 80012e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e8:	d10e      	bne.n	8001308 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012fc:	b292      	uxth	r2, r2
 80012fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f008 fd99 	bl	8009e3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fb08 	bl	8006922 <USB_ReadInterrupts>
 8001312:	4603      	mov	r3, r0
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800131c:	d10b      	bne.n	8001336 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001326:	b29a      	uxth	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001330:	b292      	uxth	r2, r2
 8001332:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_PCD_SetAddress+0x1a>
 8001354:	2302      	movs	r3, #2
 8001356:	e013      	b.n	8001380 <HAL_PCD_SetAddress+0x42>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f005 fab7 	bl	80068e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4603      	mov	r3, r0
 8001398:	70fb      	strb	r3, [r7, #3]
 800139a:	460b      	mov	r3, r1
 800139c:	803b      	strh	r3, [r7, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da0e      	bge.n	80013cc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2201      	movs	r2, #1
 80013c8:	705a      	strb	r2, [r3, #1]
 80013ca:	e00e      	b.n	80013ea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f003 0207 	and.w	r2, r3, #7
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013f6:	883a      	ldrh	r2, [r7, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	78ba      	ldrb	r2, [r7, #2]
 8001400:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001414:	78bb      	ldrb	r3, [r7, #2]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d102      	bne.n	8001420 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_PCD_EP_Open+0xa6>
 800142a:	2302      	movs	r3, #2
 800142c:	e00e      	b.n	800144c <HAL_PCD_EP_Open+0xc4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	f003 fad7 	bl	80049f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800144a:	7afb      	ldrb	r3, [r7, #11]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	da0e      	bge.n	8001486 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	705a      	strb	r2, [r3, #1]
 8001484:	e00e      	b.n	80014a4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	f003 0207 	and.w	r2, r3, #7
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_PCD_EP_Close+0x6a>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e00e      	b.n	80014dc <HAL_PCD_EP_Close+0x88>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68f9      	ldr	r1, [r7, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fdfd 	bl	80050cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	460b      	mov	r3, r1
 80014f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	f003 0207 	and.w	r2, r3, #7
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2200      	movs	r2, #0
 8001522:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	b2da      	uxtb	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6979      	ldr	r1, [r7, #20]
 8001540:	4618      	mov	r0, r3
 8001542:	f003 ffb0 	bl	80054a6 <USB_EPStartXfer>
 8001546:	e005      	b.n	8001554 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6979      	ldr	r1, [r7, #20]
 800154e:	4618      	mov	r0, r3
 8001550:	f003 ffa9 	bl	80054a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	f003 0207 	and.w	r2, r3, #7
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001580:	681b      	ldr	r3, [r3, #0]
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	460b      	mov	r3, r1
 800159c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2201      	movs	r2, #1
 80015d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d106      	bne.n	80015fe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6979      	ldr	r1, [r7, #20]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 ff55 	bl	80054a6 <USB_EPStartXfer>
 80015fc:	e005      	b.n	800160a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6979      	ldr	r1, [r7, #20]
 8001604:	4618      	mov	r0, r3
 8001606:	f003 ff4e 	bl	80054a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	f003 0207 	and.w	r2, r3, #7
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	d901      	bls.n	8001632 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e03e      	b.n	80016b0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	da0e      	bge.n	8001658 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	705a      	strb	r2, [r3, #1]
 8001656:	e00c      	b.n	8001672 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	b2da      	uxtb	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_PCD_EP_SetStall+0x7e>
 800168e:	2302      	movs	r3, #2
 8001690:	e00e      	b.n	80016b0 <HAL_PCD_EP_SetStall+0x9c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 f820 	bl	80066e6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 020f 	and.w	r2, r3, #15
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d901      	bls.n	80016d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e040      	b.n	8001758 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da0e      	bge.n	80016fc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	705a      	strb	r2, [r3, #1]
 80016fa:	e00e      	b.n	800171a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	f003 0207 	and.w	r2, r3, #7
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	b2da      	uxtb	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_PCD_EP_ClrStall+0x82>
 8001736:	2302      	movs	r3, #2
 8001738:	e00e      	b.n	8001758 <HAL_PCD_EP_ClrStall+0xa0>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f005 f81d 	bl	8006788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08e      	sub	sp, #56	; 0x38
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001768:	e2d1      	b.n	8001d0e <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001772:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001774:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001780:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 8152 	bne.w	8001a2e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800178a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d150      	bne.n	8001836 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a4:	81fb      	strh	r3, [r7, #14]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3328      	adds	r3, #40	; 0x28
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	441a      	add	r2, r3
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017f4:	2100      	movs	r1, #0
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f008 fb05 	bl	8009e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 8282 	beq.w	8001d0e <PCD_EP_ISR_Handler+0x5ae>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 827d 	bne.w	8001d0e <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001820:	b2da      	uxtb	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b292      	uxth	r2, r2
 8001828:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001834:	e26b      	b.n	8001d0e <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184c:	2b00      	cmp	r3, #0
 800184e:	d032      	beq.n	80018b6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4413      	add	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	4413      	add	r3, r2
 800186a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800188a:	b29b      	uxth	r3, r3
 800188c:	f005 f89a 	bl	80069c4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29a      	uxth	r2, r3
 8001898:	f640 738f 	movw	r3, #3983	; 0xf8f
 800189c:	4013      	ands	r3, r2
 800189e:	823b      	strh	r3, [r7, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	8a3a      	ldrh	r2, [r7, #16]
 80018a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018aa:	b292      	uxth	r2, r2
 80018ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f008 fa7c 	bl	8009dac <HAL_PCD_SetupStageCallback>
 80018b4:	e22b      	b.n	8001d0e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018b6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f280 8227 	bge.w	8001d0e <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018cc:	4013      	ands	r3, r2
 80018ce:	83bb      	strh	r3, [r7, #28]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	8bba      	ldrh	r2, [r7, #28]
 80018d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018da:	b292      	uxth	r2, r2
 80018dc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <PCD_EP_ISR_Handler+0x1e2>
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d015      	beq.n	8001942 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	6959      	ldr	r1, [r3, #20]
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001926:	b29b      	uxth	r3, r3
 8001928:	f005 f84c 	bl	80069c4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	441a      	add	r2, r3
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800193a:	2100      	movs	r1, #0
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f008 fa47 	bl	8009dd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001950:	b29b      	uxth	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4413      	add	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d112      	bne.n	8001990 <PCD_EP_ISR_Handler+0x230>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001974:	b29a      	uxth	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	801a      	strh	r2, [r3, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001988:	b29a      	uxth	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	e02f      	b.n	80019f0 <PCD_EP_ISR_Handler+0x290>
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b3e      	cmp	r3, #62	; 0x3e
 8001996:	d813      	bhi.n	80019c0 <PCD_EP_ISR_Handler+0x260>
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <PCD_EP_ISR_Handler+0x252>
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ae:	3301      	adds	r3, #1
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	e017      	b.n	80019f0 <PCD_EP_ISR_Handler+0x290>
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <PCD_EP_ISR_Handler+0x27a>
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	3b01      	subs	r3, #1
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	b29b      	uxth	r3, r3
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a00:	827b      	strh	r3, [r7, #18]
 8001a02:	8a7b      	ldrh	r3, [r7, #18]
 8001a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a08:	827b      	strh	r3, [r7, #18]
 8001a0a:	8a7b      	ldrh	r3, [r7, #18]
 8001a0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a10:	827b      	strh	r3, [r7, #18]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	8a7b      	ldrh	r3, [r7, #18]
 8001a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	8013      	strh	r3, [r2, #0]
 8001a2c:	e16f      	b.n	8001d0e <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a40:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f280 80e4 	bge.w	8001c12 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a60:	4013      	ands	r3, r2
 8001a62:	853b      	strh	r3, [r7, #40]	; 0x28
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a7c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	7b1b      	ldrb	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d120      	bne.n	8001adc <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001abe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ac0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8083 	beq.w	8001bce <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	6959      	ldr	r1, [r3, #20]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	88da      	ldrh	r2, [r3, #6]
 8001ad4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ad6:	f004 ff75 	bl	80069c4 <USB_ReadPMA>
 8001ada:	e078      	b.n	8001bce <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	78db      	ldrb	r3, [r3, #3]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d108      	bne.n	8001af6 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ae4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f91d 	bl	8001d2a <HAL_PCD_EP_DB_Receive>
 8001af0:	4603      	mov	r3, r0
 8001af2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001af4:	e06b      	b.n	8001bce <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b10:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	441a      	add	r2, r3
 8001b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01f      	beq.n	8001b90 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b74:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d028      	beq.n	8001bce <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	6959      	ldr	r1, [r3, #20]
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	891a      	ldrh	r2, [r3, #8]
 8001b88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b8a:	f004 ff1b 	bl	80069c4 <USB_ReadPMA>
 8001b8e:	e01e      	b.n	8001bce <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001bb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	6959      	ldr	r1, [r3, #20]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	895a      	ldrh	r2, [r3, #10]
 8001bc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bca:	f004 fefb 	bl	80069c4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bd4:	441a      	add	r2, r3
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001be0:	441a      	add	r2, r3
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <PCD_EP_ISR_Handler+0x498>
 8001bee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d206      	bcs.n	8001c06 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f008 f8e6 	bl	8009dd0 <HAL_PCD_DataOutStageCallback>
 8001c04:	e005      	b.n	8001c12 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fc4a 	bl	80054a6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d078      	beq.n	8001d0e <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4a:	843b      	strh	r3, [r7, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	441a      	add	r2, r3
 8001c5a:	8c3b      	ldrh	r3, [r7, #32]
 8001c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	78db      	ldrb	r3, [r3, #3]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d108      	bne.n	8001c82 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d144      	bne.n	8001d02 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13f      	bne.n	8001d02 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	8bfb      	ldrh	r3, [r7, #30]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d906      	bls.n	8001cc0 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	8bfb      	ldrh	r3, [r7, #30]
 8001cb8:	1ad2      	subs	r2, r2, r3
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	619a      	str	r2, [r3, #24]
 8001cbe:	e002      	b.n	8001cc6 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f008 f896 	bl	8009e06 <HAL_PCD_DataInStageCallback>
 8001cda:	e018      	b.n	8001d0e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	8bfb      	ldrh	r3, [r7, #30]
 8001ce2:	441a      	add	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	8bfb      	ldrh	r3, [r7, #30]
 8001cee:	441a      	add	r2, r3
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fbd3 	bl	80054a6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001d00:	e005      	b.n	8001d0e <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d04:	461a      	mov	r2, r3
 8001d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f917 	bl	8001f3c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f6ff ad25 	blt.w	800176a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3738      	adds	r7, #56	; 0x38
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b088      	sub	sp, #32
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d07c      	beq.n	8001e3c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d306      	bcc.n	8001d80 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	8b7b      	ldrh	r3, [r7, #26]
 8001d78:	1ad2      	subs	r2, r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	e002      	b.n	8001d86 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d123      	bne.n	8001dd6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da8:	833b      	strh	r3, [r7, #24]
 8001daa:	8b3b      	ldrh	r3, [r7, #24]
 8001dac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001db0:	833b      	strh	r3, [r7, #24]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	441a      	add	r2, r3
 8001dc0:	8b3b      	ldrh	r3, [r7, #24]
 8001dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01f      	beq.n	8001e20 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfa:	82fb      	strh	r3, [r7, #22]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	8afb      	ldrh	r3, [r7, #22]
 8001e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e20:	8b7b      	ldrh	r3, [r7, #26]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8085 	beq.w	8001f32 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6959      	ldr	r1, [r3, #20]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	891a      	ldrh	r2, [r3, #8]
 8001e34:	8b7b      	ldrh	r3, [r7, #26]
 8001e36:	f004 fdc5 	bl	80069c4 <USB_ReadPMA>
 8001e3a:	e07a      	b.n	8001f32 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	8b7b      	ldrh	r3, [r7, #26]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d306      	bcc.n	8001e7a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	8b7b      	ldrh	r3, [r7, #26]
 8001e72:	1ad2      	subs	r2, r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	619a      	str	r2, [r3, #24]
 8001e78:	e002      	b.n	8001e80 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d123      	bne.n	8001ed0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	83fb      	strh	r3, [r7, #30]
 8001ea4:	8bfb      	ldrh	r3, [r7, #30]
 8001ea6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eaa:	83fb      	strh	r3, [r7, #30]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	441a      	add	r2, r3
 8001eba:	8bfb      	ldrh	r3, [r7, #30]
 8001ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d11f      	bne.n	8001f1a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef4:	83bb      	strh	r3, [r7, #28]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	441a      	add	r2, r3
 8001f04:	8bbb      	ldrh	r3, [r7, #28]
 8001f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f1a:	8b7b      	ldrh	r3, [r7, #26]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6959      	ldr	r1, [r3, #20]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	895a      	ldrh	r2, [r3, #10]
 8001f2c:	8b7b      	ldrh	r3, [r7, #26]
 8001f2e:	f004 fd49 	bl	80069c4 <USB_ReadPMA>
    }
  }

  return count;
 8001f32:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b092      	sub	sp, #72	; 0x48
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8130 	beq.w	80021b6 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d906      	bls.n	8001f94 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f8c:	1ad2      	subs	r2, r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	e002      	b.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d12c      	bne.n	8001ffc <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f007 ff2c 	bl	8009e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 822d 	beq.w	8002414 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd4:	827b      	strh	r3, [r7, #18]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	441a      	add	r2, r3
 8001fe4:	8a7b      	ldrh	r3, [r7, #18]
 8001fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	8013      	strh	r3, [r2, #0]
 8001ffa:	e20b      	b.n	8002414 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01f      	beq.n	8002046 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800201c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002020:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	441a      	add	r2, r3
 8002030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800203a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002042:	b29b      	uxth	r3, r3
 8002044:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800204c:	2b01      	cmp	r3, #1
 800204e:	f040 81e1 	bne.w	8002414 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002058:	441a      	add	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002064:	441a      	add	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	6a1a      	ldr	r2, [r3, #32]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	429a      	cmp	r2, r3
 8002074:	d309      	bcc.n	800208a <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002082:	1ad2      	subs	r2, r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	621a      	str	r2, [r3, #32]
 8002088:	e014      	b.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002094:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800209e:	e009      	b.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d155      	bne.n	8002168 <HAL_PCD_EP_DB_Transmit+0x22c>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4413      	add	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	00da      	lsls	r2, r3, #3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4413      	add	r3, r2
 80020de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d112      	bne.n	8002110 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002108:	b29a      	uxth	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	e047      	b.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x264>
 8002110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002112:	2b3e      	cmp	r3, #62	; 0x3e
 8002114:	d811      	bhi.n	800213a <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	085b      	lsrs	r3, r3, #1
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	3301      	adds	r3, #1
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	b29b      	uxth	r3, r3
 8002130:	029b      	lsls	r3, r3, #10
 8002132:	b29a      	uxth	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	e032      	b.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x264>
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <HAL_PCD_EP_DB_Transmit+0x214>
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	3b01      	subs	r3, #1
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	b29b      	uxth	r3, r3
 8002154:	029b      	lsls	r3, r3, #10
 8002156:	b29b      	uxth	r3, r3
 8002158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002160:	b29a      	uxth	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	e01b      	b.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x264>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	785b      	ldrb	r3, [r3, #1]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d117      	bne.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x264>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	4413      	add	r3, r2
 8002186:	623b      	str	r3, [r7, #32]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00da      	lsls	r2, r3, #3
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	4413      	add	r3, r2
 8002192:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	b29a      	uxth	r2, r3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	6959      	ldr	r1, [r3, #20]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	891a      	ldrh	r2, [r3, #8]
 80021ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f004 fbc7 	bl	8006942 <USB_WritePMA>
 80021b4:	e12e      	b.n	8002414 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021be:	b29b      	uxth	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021da:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d306      	bcc.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021ec:	1ad2      	subs	r2, r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	619a      	str	r2, [r3, #24]
 80021f2:	e002      	b.n	80021fa <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d12c      	bne.n	800225c <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f007 fdfc 	bl	8009e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 80fd 	bne.w	8002414 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002234:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	441a      	add	r2, r3
 8002244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800224a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800224e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002256:	b29b      	uxth	r3, r3
 8002258:	8013      	strh	r3, [r2, #0]
 800225a:	e0db      	b.n	8002414 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11f      	bne.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800227c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002280:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	441a      	add	r2, r3
 8002290:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800229a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800229e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 80b1 	bne.w	8002414 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022b8:	441a      	add	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022c4:	441a      	add	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d309      	bcc.n	80022ea <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	621a      	str	r2, [r3, #32]
 80022e8:	e014      	b.n	8002314 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80022f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022f4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022fe:	e009      	b.n	8002314 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d155      	bne.n	80023ce <HAL_PCD_EP_DB_Transmit+0x492>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	647b      	str	r3, [r7, #68]	; 0x44
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	4413      	add	r3, r2
 8002338:	647b      	str	r3, [r7, #68]	; 0x44
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	00da      	lsls	r2, r3, #3
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	4413      	add	r3, r2
 8002344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002348:	643b      	str	r3, [r7, #64]	; 0x40
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	2b00      	cmp	r3, #0
 800234e:	d112      	bne.n	8002376 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800235a:	b29a      	uxth	r2, r3
 800235c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235e:	801a      	strh	r2, [r3, #0]
 8002360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236e:	b29a      	uxth	r2, r3
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	e044      	b.n	8002400 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	2b3e      	cmp	r3, #62	; 0x3e
 800237a:	d811      	bhi.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x464>
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_PCD_EP_DB_Transmit+0x456>
 800238c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238e:	3301      	adds	r3, #1
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002394:	b29b      	uxth	r3, r3
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	b29a      	uxth	r2, r3
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	e02f      	b.n	8002400 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x47a>
 80023b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b2:	3b01      	subs	r3, #1
 80023b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	b29b      	uxth	r3, r3
 80023be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	e018      	b.n	8002400 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d114      	bne.n	8002400 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	4413      	add	r3, r2
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	00da      	lsls	r2, r3, #3
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	4413      	add	r3, r2
 80023f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6959      	ldr	r1, [r3, #20]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	895a      	ldrh	r2, [r3, #10]
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	b29b      	uxth	r3, r3
 8002410:	f004 fa97 	bl	8006942 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800242e:	823b      	strh	r3, [r7, #16]
 8002430:	8a3b      	ldrh	r3, [r7, #16]
 8002432:	f083 0310 	eor.w	r3, r3, #16
 8002436:	823b      	strh	r3, [r7, #16]
 8002438:	8a3b      	ldrh	r3, [r7, #16]
 800243a:	f083 0320 	eor.w	r3, r3, #32
 800243e:	823b      	strh	r3, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	8a3b      	ldrh	r3, [r7, #16]
 8002450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002460:	b29b      	uxth	r3, r3
 8002462:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3748      	adds	r7, #72	; 0x48
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800246e:	b480      	push	{r7}
 8002470:	b087      	sub	sp, #28
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	817b      	strh	r3, [r7, #10]
 800247c:	4613      	mov	r3, r2
 800247e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002480:	897b      	ldrh	r3, [r7, #10]
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248c:	897b      	ldrh	r3, [r7, #10]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e009      	b.n	80024b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024a4:	897a      	ldrh	r2, [r7, #10]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80024b8:	893b      	ldrh	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2200      	movs	r2, #0
 80024c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	80da      	strh	r2, [r3, #6]
 80024cc:	e00b      	b.n	80024e6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2201      	movs	r2, #1
 80024d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0c1b      	lsrs	r3, r3, #16
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	f000 bf01 	b.w	8003310 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8160 	beq.w	80027de <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800251e:	4bae      	ldr	r3, [pc, #696]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d00c      	beq.n	8002544 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800252a:	4bab      	ldr	r3, [pc, #684]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d159      	bne.n	80025ea <HAL_RCC_OscConfig+0xf6>
 8002536:	4ba8      	ldr	r3, [pc, #672]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d152      	bne.n	80025ea <HAL_RCC_OscConfig+0xf6>
 8002544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002548:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002558:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_RCC_OscConfig+0x82>
 8002570:	4b99      	ldr	r3, [pc, #612]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0xae>
 8002576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800258a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002592:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800259e:	4b8e      	ldr	r3, [pc, #568]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80025aa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80025b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025ba:	fab2 f282 	clz	r2, r2
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f002 021f 	and.w	r2, r2, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f202 	lsl.w	r2, r1, r2
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8102 	beq.w	80027dc <HAL_RCC_OscConfig+0x2e8>
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 80fc 	bne.w	80027dc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f000 be93 	b.w	8003310 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x110>
 80025f6:	4b78      	ldr	r3, [pc, #480]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a77      	ldr	r2, [pc, #476]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e030      	b.n	8002666 <HAL_RCC_OscConfig+0x172>
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x134>
 800260e:	4b72      	ldr	r3, [pc, #456]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a71      	ldr	r2, [pc, #452]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01e      	b.n	8002666 <HAL_RCC_OscConfig+0x172>
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x15a>
 8002634:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a67      	ldr	r2, [pc, #412]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 800263a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a64      	ldr	r2, [pc, #400]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0x172>
 800264e:	4b62      	ldr	r3, [pc, #392]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a61      	ldr	r2, [pc, #388]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5e      	ldr	r2, [pc, #376]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d059      	beq.n	8002724 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe f970 	bl	8000954 <HAL_GetTick>
 8002674:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267a:	f7fe f96b 	bl	8000954 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d902      	bls.n	8002690 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	f000 be40 	b.w	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002694:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80026a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_OscConfig+0x1ce>
 80026bc:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x1fa>
 80026c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80026d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80026f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80026fa:	fa92 f2a2 	rbit	r2, r2
 80026fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002702:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f042 0220 	orr.w	r2, r2, #32
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ab      	beq.n	800267a <HAL_RCC_OscConfig+0x186>
 8002722:	e05c      	b.n	80027de <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe f916 	bl	8000954 <HAL_GetTick>
 8002728:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272e:	f7fe f911 	bl	8000954 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d902      	bls.n	8002744 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	f000 bde6 	b.w	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002748:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002758:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d102      	bne.n	8002776 <HAL_RCC_OscConfig+0x282>
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x2ae>
 8002776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800277a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002792:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_RCC_OscConfig+0x2e4>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80027aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80027b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ab      	bne.n	800272e <HAL_RCC_OscConfig+0x23a>
 80027d6:	e002      	b.n	80027de <HAL_RCC_OscConfig+0x2ea>
 80027d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8170 	beq.w	8002ace <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027ee:	4bd0      	ldr	r3, [pc, #832]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027fa:	4bcd      	ldr	r3, [pc, #820]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d16d      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3ee>
 8002806:	4bca      	ldr	r3, [pc, #808]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800280e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002812:	d166      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3ee>
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002826:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_RCC_OscConfig+0x350>
 800283e:	4bbc      	ldr	r3, [pc, #752]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	e013      	b.n	800286c <HAL_RCC_OscConfig+0x378>
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002856:	2302      	movs	r3, #2
 8002858:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800285c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002868:	4bb1      	ldr	r3, [pc, #708]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2202      	movs	r2, #2
 800286e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002872:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002876:	fa92 f2a2 	rbit	r2, r2
 800287a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800287e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0220 	orr.w	r2, r2, #32
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_RCC_OscConfig+0x3ba>
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f000 bd31 	b.w	8003310 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4ba0      	ldr	r3, [pc, #640]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	21f8      	movs	r1, #248	; 0xf8
 80028be:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80028c6:	fa91 f1a1 	rbit	r1, r1
 80028ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80028ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80028d2:	fab1 f181 	clz	r1, r1
 80028d6:	b2c9      	uxtb	r1, r1
 80028d8:	408b      	lsls	r3, r1
 80028da:	4995      	ldr	r1, [pc, #596]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e0:	e0f5      	b.n	8002ace <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8085 	beq.w	80029f8 <HAL_RCC_OscConfig+0x504>
 80028ee:	2301      	movs	r3, #1
 80028f0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002900:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800290e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	461a      	mov	r2, r3
 8002916:	2301      	movs	r3, #1
 8002918:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe f81b 	bl	8000954 <HAL_GetTick>
 800291e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe f816 	bl	8000954 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d902      	bls.n	800293a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	f000 bceb 	b.w	8003310 <HAL_RCC_OscConfig+0xe1c>
 800293a:	2302      	movs	r3, #2
 800293c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800294c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_RCC_OscConfig+0x476>
 8002964:	4b72      	ldr	r3, [pc, #456]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	e013      	b.n	8002992 <HAL_RCC_OscConfig+0x49e>
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800297c:	2302      	movs	r3, #2
 800297e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002982:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800298e:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2202      	movs	r2, #2
 8002994:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002998:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800299c:	fa92 f2a2 	rbit	r2, r2
 80029a0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80029a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029a8:	fab2 f282 	clz	r2, r2
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f042 0220 	orr.w	r2, r2, #32
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f002 021f 	and.w	r2, r2, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0af      	beq.n	8002924 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b5a      	ldr	r3, [pc, #360]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	21f8      	movs	r1, #248	; 0xf8
 80029d4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80029dc:	fa91 f1a1 	rbit	r1, r1
 80029e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80029e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029e8:	fab1 f181 	clz	r1, r1
 80029ec:	b2c9      	uxtb	r1, r1
 80029ee:	408b      	lsls	r3, r1
 80029f0:	494f      	ldr	r1, [pc, #316]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
 80029f6:	e06a      	b.n	8002ace <HAL_RCC_OscConfig+0x5da>
 80029f8:	2301      	movs	r3, #1
 80029fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fd ff96 	bl	8000954 <HAL_GetTick>
 8002a28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fd ff91 	bl	8000954 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d902      	bls.n	8002a44 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	f000 bc66 	b.w	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002a44:	2302      	movs	r3, #2
 8002a46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002a56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_OscConfig+0x580>
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e013      	b.n	8002a9c <HAL_RCC_OscConfig+0x5a8>
 8002a74:	2302      	movs	r3, #2
 8002a76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <HAL_RCC_OscConfig+0x63c>)
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002aa2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002aa6:	fa92 f2a2 	rbit	r2, r2
 8002aaa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002aae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1af      	bne.n	8002a2e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80da 	beq.w	8002c92 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d069      	beq.n	8002bbc <HAL_RCC_OscConfig+0x6c8>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002afa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x640>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2301      	movs	r3, #1
 8002b10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fd ff1f 	bl	8000954 <HAL_GetTick>
 8002b16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	e00d      	b.n	8002b38 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7fd ff1a 	bl	8000954 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d905      	bls.n	8002b38 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e3ef      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002b30:	40021000 	.word	0x40021000
 8002b34:	10908120 	.word	0x10908120
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b50:	2202      	movs	r2, #2
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b68:	2202      	movs	r2, #2
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	fa93 f2a3 	rbit	r2, r3
 8002b76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7c:	4ba4      	ldr	r3, [pc, #656]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b84:	2102      	movs	r1, #2
 8002b86:	6019      	str	r1, [r3, #0]
 8002b88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f1a3 	rbit	r1, r3
 8002b92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b96:	6019      	str	r1, [r3, #0]
  return result;
 8002b98:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0b0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x628>
 8002bba:	e06a      	b.n	8002c92 <HAL_RCC_OscConfig+0x79e>
 8002bbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bd2:	601a      	str	r2, [r3, #0]
  return result;
 8002bd4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bd8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCC_OscConfig+0x920>)
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	2300      	movs	r3, #0
 8002bec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fd feb1 	bl	8000954 <HAL_GetTick>
 8002bf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf6:	e009      	b.n	8002c0c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fd feac 	bl	8000954 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e381      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002c0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c28:	2202      	movs	r2, #2
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c40:	2202      	movs	r2, #2
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	6019      	str	r1, [r3, #0]
 8002c60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f1a3 	rbit	r1, r3
 8002c6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c6e:	6019      	str	r1, [r3, #0]
  return result;
 8002c70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1b2      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8157 	beq.w	8002f50 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb4:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	61d3      	str	r3, [r2, #28]
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_OscConfig+0x924>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11a      	bne.n	8002d1c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce6:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x924>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4b      	ldr	r2, [pc, #300]	; (8002e18 <HAL_RCC_OscConfig+0x924>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7fd fe2f 	bl	8000954 <HAL_GetTick>
 8002cf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	e009      	b.n	8002d10 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fd fe2a 	bl	8000954 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	; 0x64
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e2ff      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x924>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ef      	beq.n	8002cfc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x840>
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a39      	ldr	r2, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	e02f      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a0>
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x864>
 8002d3e:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a33      	ldr	r2, [pc, #204]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	e01d      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a0>
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x888>
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d68:	f043 0304 	orr.w	r3, r3, #4
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6213      	str	r3, [r2, #32]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a0>
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002d8e:	f023 0304 	bic.w	r3, r3, #4
 8002d92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06a      	beq.n	8002e74 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9e:	f7fd fdd9 	bl	8000954 <HAL_GetTick>
 8002da2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fd fdd4 	bl	8000954 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e2a7      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002dc0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f2a3 	rbit	r2, r3
 8002dd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ddc:	2202      	movs	r2, #2
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fa93 f2a3 	rbit	r2, r3
 8002dea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002dee:	601a      	str	r2, [r3, #0]
  return result;
 8002df0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002df4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x928>
 8002e0a:	4b01      	ldr	r3, [pc, #4]	; (8002e10 <HAL_RCC_OscConfig+0x91c>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	e013      	b.n	8002e38 <HAL_RCC_OscConfig+0x944>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	10908120 	.word	0x10908120
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	4bc0      	ldr	r3, [pc, #768]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	6011      	str	r1, [r2, #0]
 8002e40:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	fa92 f1a2 	rbit	r1, r2
 8002e4a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e4e:	6011      	str	r1, [r2, #0]
  return result;
 8002e50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d09a      	beq.n	8002da8 <HAL_RCC_OscConfig+0x8b4>
 8002e72:	e063      	b.n	8002f3c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e74:	f7fd fd6e 	bl	8000954 <HAL_GetTick>
 8002e78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fd fd69 	bl	8000954 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e23c      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002e96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	fa93 f2a3 	rbit	r2, r3
 8002ec0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ec4:	601a      	str	r2, [r3, #0]
  return result;
 8002ec6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002eca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x9f2>
 8002ee0:	4b95      	ldr	r3, [pc, #596]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	e00d      	b.n	8002f02 <HAL_RCC_OscConfig+0xa0e>
 8002ee6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002eea:	2202      	movs	r2, #2
 8002eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	4b8e      	ldr	r3, [pc, #568]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f06:	2102      	movs	r1, #2
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	fa92 f1a2 	rbit	r1, r2
 8002f14:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f18:	6011      	str	r1, [r2, #0]
  return result;
 8002f1a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	fab2 f282 	clz	r2, r2
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f002 021f 	and.w	r2, r2, #31
 8002f30:	2101      	movs	r1, #1
 8002f32:	fa01 f202 	lsl.w	r2, r1, r2
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1a0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f3c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f44:	4b7c      	ldr	r3, [pc, #496]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a7b      	ldr	r2, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 81d9 	beq.w	800330e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5c:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	f000 81a6 	beq.w	80032b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	f040 811e 	bne.w	80031b2 <HAL_RCC_OscConfig+0xcbe>
 8002f76:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	fa93 f2a3 	rbit	r2, r3
 8002f8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f8e:	601a      	str	r2, [r3, #0]
  return result;
 8002f90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fd fcd2 	bl	8000954 <HAL_GetTick>
 8002fb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	e009      	b.n	8002fca <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fd fccd 	bl	8000954 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1a2      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
 8002fca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fe2:	601a      	str	r2, [r3, #0]
  return result;
 8002fe4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fe8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_OscConfig+0xb10>
 8002ffe:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	e01b      	b.n	800303c <HAL_RCC_OscConfig+0xb48>
 8003004:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f2a3 	rbit	r2, r3
 8003032:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003040:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	fa92 f1a2 	rbit	r1, r2
 8003050:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003054:	6011      	str	r1, [r2, #0]
  return result;
 8003056:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	fab2 f282 	clz	r2, r2
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f042 0220 	orr.w	r2, r2, #32
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f002 021f 	and.w	r2, r2, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d19e      	bne.n	8002fb6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003078:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f023 020f 	bic.w	r2, r3, #15
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	492c      	ldr	r1, [pc, #176]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8003088:	4313      	orrs	r3, r2
 800308a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a19      	ldr	r1, [r3, #32]
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	4925      	ldr	r1, [pc, #148]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030c0:	601a      	str	r2, [r3, #0]
  return result;
 80030c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030c6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	461a      	mov	r2, r3
 80030da:	2301      	movs	r3, #1
 80030dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fd fc39 	bl	8000954 <HAL_GetTick>
 80030e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e6:	e009      	b.n	80030fc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd fc34 	bl	8000954 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e109      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
 80030fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003114:	601a      	str	r2, [r3, #0]
  return result;
 8003116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800311a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0xc48>
 8003130:	4b01      	ldr	r3, [pc, #4]	; (8003138 <HAL_RCC_OscConfig+0xc44>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	e01e      	b.n	8003174 <HAL_RCC_OscConfig+0xc80>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800315a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0xe28>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003178:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800317c:	6011      	str	r1, [r2, #0]
 800317e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	fa92 f1a2 	rbit	r1, r2
 8003188:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800318c:	6011      	str	r1, [r2, #0]
  return result;
 800318e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	fab2 f282 	clz	r2, r2
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f042 0220 	orr.w	r2, r2, #32
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	f002 021f 	and.w	r2, r2, #31
 80031a4:	2101      	movs	r1, #1
 80031a6:	fa01 f202 	lsl.w	r2, r1, r2
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d09b      	beq.n	80030e8 <HAL_RCC_OscConfig+0xbf4>
 80031b0:	e0ad      	b.n	800330e <HAL_RCC_OscConfig+0xe1a>
 80031b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031ca:	601a      	str	r2, [r3, #0]
  return result;
 80031cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	461a      	mov	r2, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fd fbb4 	bl	8000954 <HAL_GetTick>
 80031ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e009      	b.n	8003206 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd fbaf 	bl	8000954 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e084      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
 8003206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800320a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800320e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800321e:	601a      	str	r2, [r3, #0]
  return result;
 8003220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003224:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_RCC_OscConfig+0xd4c>
 800323a:	4b38      	ldr	r3, [pc, #224]	; (800331c <HAL_RCC_OscConfig+0xe28>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	e01b      	b.n	8003278 <HAL_RCC_OscConfig+0xd84>
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fa93 f2a3 	rbit	r2, r3
 8003254:	f107 0320 	add.w	r3, r7, #32
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fa93 f2a3 	rbit	r2, r3
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCC_OscConfig+0xe28>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f107 0214 	add.w	r2, r7, #20
 800327c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003280:	6011      	str	r1, [r2, #0]
 8003282:	f107 0214 	add.w	r2, r7, #20
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	fa92 f1a2 	rbit	r1, r2
 800328c:	f107 0210 	add.w	r2, r7, #16
 8003290:	6011      	str	r1, [r2, #0]
  return result;
 8003292:	f107 0210 	add.w	r2, r7, #16
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d19e      	bne.n	80031f2 <HAL_RCC_OscConfig+0xcfe>
 80032b4:	e02b      	b.n	800330e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e025      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_RCC_OscConfig+0xe28>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_OscConfig+0xe28>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032d8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d111      	bne.n	800330a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d108      	bne.n	800330a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80032f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b09e      	sub	sp, #120	; 0x78
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e162      	b.n	80035fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b90      	ldr	r3, [pc, #576]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d910      	bls.n	8003368 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b8d      	ldr	r3, [pc, #564]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	498b      	ldr	r1, [pc, #556]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b89      	ldr	r3, [pc, #548]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e14a      	b.n	80035fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b82      	ldr	r3, [pc, #520]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	497f      	ldr	r1, [pc, #508]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80dc 	beq.w	800354c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d13c      	bne.n	8003416 <HAL_RCC_ClockConfig+0xf6>
 800339c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d102      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xa6>
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	e00f      	b.n	80033e6 <HAL_RCC_ClockConfig+0xc6>
 80033c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	667b      	str	r3, [r7, #100]	; 0x64
 80033d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d8:	663b      	str	r3, [r7, #96]	; 0x60
 80033da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e2:	4b67      	ldr	r3, [pc, #412]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80033ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ee:	fa92 f2a2 	rbit	r2, r2
 80033f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033f6:	fab2 f282 	clz	r2, r2
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	f042 0220 	orr.w	r2, r2, #32
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	f002 021f 	and.w	r2, r2, #31
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f202 	lsl.w	r2, r1, r2
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d17b      	bne.n	800350a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0f3      	b.n	80035fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d13c      	bne.n	8003498 <HAL_RCC_ClockConfig+0x178>
 800341e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003422:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800342c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_RCC_ClockConfig+0x128>
 8003442:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e00f      	b.n	8003468 <HAL_RCC_ClockConfig+0x148>
 8003448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	647b      	str	r3, [r7, #68]	; 0x44
 8003456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345a:	643b      	str	r3, [r7, #64]	; 0x40
 800345c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800346c:	63ba      	str	r2, [r7, #56]	; 0x38
 800346e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003470:	fa92 f2a2 	rbit	r2, r2
 8003474:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003478:	fab2 f282 	clz	r2, r2
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	f042 0220 	orr.w	r2, r2, #32
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f002 021f 	and.w	r2, r2, #31
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f202 	lsl.w	r2, r1, r2
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d13a      	bne.n	800350a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b2      	b.n	80035fe <HAL_RCC_ClockConfig+0x2de>
 8003498:	2302      	movs	r3, #2
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x1a0>
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	e00d      	b.n	80034dc <HAL_RCC_ClockConfig+0x1bc>
 80034c0:	2302      	movs	r3, #2
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	2302      	movs	r3, #2
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2202      	movs	r2, #2
 80034de:	61ba      	str	r2, [r7, #24]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	fa92 f2a2 	rbit	r2, r2
 80034e6:	617a      	str	r2, [r7, #20]
  return result;
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	fab2 f282 	clz	r2, r2
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f042 0220 	orr.w	r2, r2, #32
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	f002 021f 	and.w	r2, r2, #31
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e079      	b.n	80035fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350a:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f023 0203 	bic.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	491a      	ldr	r1, [pc, #104]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800351c:	f7fd fa1a 	bl	8000954 <HAL_GetTick>
 8003520:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	e00a      	b.n	800353a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003524:	f7fd fa16 	bl	8000954 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e061      	b.n	80035fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_RCC_ClockConfig+0x260>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 020c 	and.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	429a      	cmp	r2, r3
 800354a:	d1eb      	bne.n	8003524 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d214      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	4906      	ldr	r1, [pc, #24]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <HAL_RCC_ClockConfig+0x25c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e040      	b.n	80035fe <HAL_RCC_ClockConfig+0x2de>
 800357c:	40022000 	.word	0x40022000
 8003580:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_ClockConfig+0x2e8>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	491a      	ldr	r1, [pc, #104]	; (8003608 <HAL_RCC_ClockConfig+0x2e8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_RCC_ClockConfig+0x2e8>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4912      	ldr	r1, [pc, #72]	; (8003608 <HAL_RCC_ClockConfig+0x2e8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035c2:	f000 f829 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035c6:	4601      	mov	r1, r0
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_RCC_ClockConfig+0x2e8>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d0:	22f0      	movs	r2, #240	; 0xf0
 80035d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	fa92 f2a2 	rbit	r2, r2
 80035da:	60fa      	str	r2, [r7, #12]
  return result;
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	40d3      	lsrs	r3, r2
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x2ec>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	fa21 f303 	lsr.w	r3, r1, r3
 80035ee:	4a08      	ldr	r2, [pc, #32]	; (8003610 <HAL_RCC_ClockConfig+0x2f0>)
 80035f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_ClockConfig+0x2f4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd f968 	bl	80008cc <HAL_InitTick>
  
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3778      	adds	r7, #120	; 0x78
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	0800c658 	.word	0x0800c658
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b08b      	sub	sp, #44	; 0x2c
 800361c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b04      	cmp	r3, #4
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x30>
 8003642:	2b08      	cmp	r3, #8
 8003644:	d003      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x36>
 8003646:	e03f      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800364a:	623b      	str	r3, [r7, #32]
      break;
 800364c:	e03f      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003654:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003658:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	607a      	str	r2, [r7, #4]
  return result;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	40d3      	lsrs	r3, r2
 800366c:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	220f      	movs	r2, #15
 800367c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	fa92 f2a2 	rbit	r2, r2
 8003684:	60fa      	str	r2, [r7, #12]
  return result;
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	40d3      	lsrs	r3, r2
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036a0:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
 80036b0:	e007      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b2:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	623b      	str	r3, [r7, #32]
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036ca:	623b      	str	r3, [r7, #32]
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6a3b      	ldr	r3, [r7, #32]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	372c      	adds	r7, #44	; 0x2c
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	0800c668 	.word	0x0800c668
 80036e8:	0800c678 	.word	0x0800c678

080036ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b092      	sub	sp, #72	; 0x48
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80d4 	beq.w	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003710:	4b4e      	ldr	r3, [pc, #312]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10e      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	4a4a      	ldr	r2, [pc, #296]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003726:	61d3      	str	r3, [r2, #28]
 8003728:	4b48      	ldr	r3, [pc, #288]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b45      	ldr	r3, [pc, #276]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d118      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	4b42      	ldr	r3, [pc, #264]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a41      	ldr	r2, [pc, #260]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7fd f8ff 	bl	8000954 <HAL_GetTick>
 8003756:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e008      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375a:	f7fd f8fb 	bl	8000954 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b64      	cmp	r3, #100	; 0x64
 8003766:	d901      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e1d6      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003778:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8084 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003794:	429a      	cmp	r2, r3
 8003796:	d07c      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	461a      	mov	r2, r3
 80037c2:	2301      	movs	r3, #1
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	461a      	mov	r2, r3
 80037e6:	2300      	movs	r3, #0
 80037e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d04b      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fd f8ab 	bl	8000954 <HAL_GetTick>
 80037fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fd f8a7 	bl	8000954 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e180      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003818:	2302      	movs	r3, #2
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	2302      	movs	r3, #2
 8003826:	623b      	str	r3, [r7, #32]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	61fb      	str	r3, [r7, #28]
  return result;
 8003830:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d108      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003846:	4b01      	ldr	r3, [pc, #4]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	e00d      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
 8003854:	10908100 	.word	0x10908100
 8003858:	2302      	movs	r3, #2
 800385a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	4ba0      	ldr	r3, [pc, #640]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2202      	movs	r2, #2
 800386a:	613a      	str	r2, [r7, #16]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	fa92 f2a2 	rbit	r2, r2
 8003872:	60fa      	str	r2, [r7, #12]
  return result;
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	fab2 f282 	clz	r2, r2
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	f002 021f 	and.w	r2, r2, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0b7      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003892:	4b95      	ldr	r3, [pc, #596]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4992      	ldr	r1, [pc, #584]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ac:	4b8e      	ldr	r3, [pc, #568]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4a8d      	ldr	r2, [pc, #564]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c4:	4b88      	ldr	r3, [pc, #544]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f023 0203 	bic.w	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4985      	ldr	r1, [pc, #532]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	497e      	ldr	r1, [pc, #504]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003900:	4b79      	ldr	r3, [pc, #484]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4976      	ldr	r1, [pc, #472]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391e:	4b72      	ldr	r3, [pc, #456]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f023 0210 	bic.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	496f      	ldr	r1, [pc, #444]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800393c:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	4967      	ldr	r1, [pc, #412]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f023 0220 	bic.w	r2, r3, #32
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4960      	ldr	r1, [pc, #384]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003978:	4b5b      	ldr	r3, [pc, #364]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	4958      	ldr	r1, [pc, #352]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003996:	4b54      	ldr	r3, [pc, #336]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4951      	ldr	r1, [pc, #324]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039b4:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	4949      	ldr	r1, [pc, #292]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039d2:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4942      	ldr	r1, [pc, #264]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039f0:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	493a      	ldr	r1, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	4933      	ldr	r1, [pc, #204]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	492b      	ldr	r1, [pc, #172]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a4a:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4924      	ldr	r1, [pc, #144]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	491c      	ldr	r1, [pc, #112]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003a86:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	4915      	ldr	r1, [pc, #84]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	4906      	ldr	r1, [pc, #24]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ae0:	4b01      	ldr	r3, [pc, #4]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	e002      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	490b      	ldr	r1, [pc, #44]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	4904      	ldr	r1, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3748      	adds	r7, #72	; 0x48
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000

08003b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e09d      	b.n	8003c76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4a:	d009      	beq.n	8003b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
 8003b52:	e005      	b.n	8003b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fc fda0 	bl	80006c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba0:	d902      	bls.n	8003ba8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e002      	b.n	8003bae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bb6:	d007      	beq.n	8003bc8 <HAL_SPI_Init+0xa0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	ea42 0103 	orr.w	r1, r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f003 0204 	and.w	r2, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c44:	ea42 0103 	orr.w	r1, r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b088      	sub	sp, #32
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_SPI_Transmit+0x22>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e158      	b.n	8003f52 <HAL_SPI_Transmit+0x2d4>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca8:	f7fc fe54 	bl	8000954 <HAL_GetTick>
 8003cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc2:	e13d      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0x52>
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd4:	e134      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d20:	d10f      	bne.n	8003d42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d007      	beq.n	8003d60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d68:	d94b      	bls.n	8003e02 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0xfa>
 8003d72:	8afb      	ldrh	r3, [r7, #22]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d13e      	bne.n	8003df6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	1c9a      	adds	r2, r3, #2
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d9c:	e02b      	b.n	8003df6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d112      	bne.n	8003dd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd0:	e011      	b.n	8003df6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fc fdbf 	bl	8000954 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_Transmit+0x16c>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Transmit+0x172>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003df4:	e0a4      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ce      	bne.n	8003d9e <HAL_SPI_Transmit+0x120>
 8003e00:	e07c      	b.n	8003efc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_SPI_Transmit+0x192>
 8003e0a:	8afb      	ldrh	r3, [r7, #22]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d170      	bne.n	8003ef2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d912      	bls.n	8003e40 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b02      	subs	r3, #2
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3e:	e058      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e66:	e044      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d12b      	bne.n	8003ece <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d912      	bls.n	8003ea6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b02      	subs	r3, #2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea4:	e025      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ecc:	e011      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ece:	f7fc fd41 	bl	8000954 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d803      	bhi.n	8003ee6 <HAL_SPI_Transmit+0x268>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_Transmit+0x26e>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef0:	e026      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1b5      	bne.n	8003e68 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fcdb 	bl	80048bc <SPI_EndRxTxTransaction>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e000      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003f3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af02      	add	r7, sp, #8
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d112      	bne.n	8003f9e <HAL_SPI_Receive+0x44>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10e      	bne.n	8003f9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2204      	movs	r2, #4
 8003f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f910 	bl	80041ba <HAL_SPI_TransmitReceive>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	e109      	b.n	80041b2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_Receive+0x52>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e102      	b.n	80041b2 <HAL_SPI_Receive+0x258>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb4:	f7fc fcce 	bl	8000954 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fca:	e0e9      	b.n	80041a0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Receive+0x7e>
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fdc:	e0e0      	b.n	80041a0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004028:	d908      	bls.n	800403c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	e007      	b.n	800404c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004054:	d10f      	bne.n	8004076 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d007      	beq.n	8004094 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409c:	d867      	bhi.n	800416e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800409e:	e030      	b.n	8004102 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d117      	bne.n	80040de <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f103 020c 	add.w	r2, r3, #12
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040dc:	e011      	b.n	8004102 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040de:	f7fc fc39 	bl	8000954 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d803      	bhi.n	80040f6 <HAL_SPI_Receive+0x19c>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d102      	bne.n	80040fc <HAL_SPI_Receive+0x1a2>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004100:	e04e      	b.n	80041a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1c8      	bne.n	80040a0 <HAL_SPI_Receive+0x146>
 800410e:	e034      	b.n	800417a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d115      	bne.n	800414a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	b292      	uxth	r2, r2
 800412a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004148:	e011      	b.n	800416e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414a:	f7fc fc03 	bl	8000954 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d803      	bhi.n	8004162 <HAL_SPI_Receive+0x208>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d102      	bne.n	8004168 <HAL_SPI_Receive+0x20e>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800416c:	e018      	b.n	80041a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ca      	bne.n	8004110 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fb44 	bl	800480c <SPI_EndRxTransaction>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
 800419c:	e000      	b.n	80041a0 <HAL_SPI_Receive+0x246>
  }

error :
 800419e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041c8:	2301      	movs	r3, #1
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x26>
 80041dc:	2302      	movs	r3, #2
 80041de:	e1fb      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x41e>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e8:	f7fc fbb4 	bl	8000954 <HAL_GetTick>
 80041ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004204:	7efb      	ldrb	r3, [r7, #27]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d00e      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x6e>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004210:	d106      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x66>
 800421a:	7efb      	ldrb	r3, [r7, #27]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d003      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004220:	2302      	movs	r3, #2
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004226:	e1cd      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_SPI_TransmitReceive+0x80>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_SPI_TransmitReceive+0x80>
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004240:	e1c0      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b04      	cmp	r3, #4
 800424c:	d003      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2205      	movs	r2, #5
 8004252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	887a      	ldrh	r2, [r7, #2]
 8004266:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	887a      	ldrh	r2, [r7, #2]
 800426e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	887a      	ldrh	r2, [r7, #2]
 8004282:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004298:	d802      	bhi.n	80042a0 <HAL_SPI_TransmitReceive+0xe6>
 800429a:	8a3b      	ldrh	r3, [r7, #16]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d908      	bls.n	80042b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	e007      	b.n	80042c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d007      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e8:	d97c      	bls.n	80043e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x13e>
 80042f2:	8a7b      	ldrh	r3, [r7, #18]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d169      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431c:	e056      	b.n	80043cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d11b      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x1aa>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x1aa>
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	2b01      	cmp	r3, #1
 800433a:	d113      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d11c      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x1f2>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	b292      	uxth	r2, r2
 800438a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a8:	2301      	movs	r3, #1
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043ac:	f7fc fad2 	bl	8000954 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d807      	bhi.n	80043cc <HAL_SPI_TransmitReceive+0x212>
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d003      	beq.n	80043cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043ca:	e0fb      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1a3      	bne.n	800431e <HAL_SPI_TransmitReceive+0x164>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d19d      	bne.n	800431e <HAL_SPI_TransmitReceive+0x164>
 80043e2:	e0df      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x23a>
 80043ec:	8a7b      	ldrh	r3, [r7, #18]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	f040 80cb 	bne.w	800458a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d912      	bls.n	8004424 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b02      	subs	r3, #2
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004422:	e0b2      	b.n	800458a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800444a:	e09e      	b.n	800458a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d134      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x30a>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02f      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x30a>
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2b01      	cmp	r3, #1
 8004468:	d12c      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d912      	bls.n	800449a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b02      	subs	r3, #2
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004498:	e012      	b.n	80044c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d148      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x3aa>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d042      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d923      	bls.n	8004532 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	b292      	uxth	r2, r2
 80044f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b02      	subs	r3, #2
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d81f      	bhi.n	8004560 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e016      	b.n	8004560 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f103 020c 	add.w	r2, r3, #12
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	7812      	ldrb	r2, [r2, #0]
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004560:	2301      	movs	r3, #1
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004564:	f7fc f9f6 	bl	8000954 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004570:	429a      	cmp	r2, r3
 8004572:	d803      	bhi.n	800457c <HAL_SPI_TransmitReceive+0x3c2>
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d102      	bne.n	8004582 <HAL_SPI_TransmitReceive+0x3c8>
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004588:	e01c      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af5b 	bne.w	800444c <HAL_SPI_TransmitReceive+0x292>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f47f af54 	bne.w	800444c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f987 	bl	80048bc <SPI_EndRxTxTransaction>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
 80045c0:	e000      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	; 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f0:	f7fc f9b0 	bl	8000954 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004600:	f7fc f9a8 	bl	8000954 <HAL_GetTick>
 8004604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004616:	e054      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d050      	beq.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004620:	f7fc f998 	bl	8000954 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	429a      	cmp	r2, r3
 800462e:	d902      	bls.n	8004636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d13d      	bne.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464e:	d111      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	d004      	beq.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d107      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467c:	d10f      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800469c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e017      	b.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3b01      	subs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d19b      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000000 	.word	0x20000000

080046f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046fe:	f7fc f929 	bl	8000954 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	4413      	add	r3, r2
 800470c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800470e:	f7fc f921 	bl	8000954 <HAL_GetTick>
 8004712:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004714:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	00da      	lsls	r2, r3, #3
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	0d1b      	lsrs	r3, r3, #20
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800472c:	e05f      	b.n	80047ee <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004734:	d106      	bne.n	8004744 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d050      	beq.n	80047ee <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800474c:	f7fc f902 	bl	8000954 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	d902      	bls.n	8004762 <SPI_WaitFifoStateUntilTimeout+0x72>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13d      	bne.n	80047de <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477a:	d111      	bne.n	80047a0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004784:	d004      	beq.n	8004790 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d107      	bne.n	80047a0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d10f      	bne.n	80047ca <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e010      	b.n	8004800 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d197      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000000 	.word	0x20000000

0800480c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004820:	d111      	bne.n	8004846 <SPI_EndRxTransaction+0x3a>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482a:	d004      	beq.n	8004836 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004834:	d107      	bne.n	8004846 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fec5 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e023      	b.n	80048b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004874:	d11d      	bne.n	80048b2 <SPI_EndRxTransaction+0xa6>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487e:	d004      	beq.n	800488a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d113      	bne.n	80048b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff ff2a 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e000      	b.n	80048b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff ff0b 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e027      	b.n	8004940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fe70 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e014      	b.n	8004940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2200      	movs	r2, #0
 800491e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fee4 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e000      	b.n	8004940 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004958:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800495c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800497e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004982:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	b29b      	uxth	r3, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	4013      	ands	r3, r2
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049ac:	b084      	sub	sp, #16
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	f107 0014 	add.w	r0, r7, #20
 80049ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	b004      	add	sp, #16
 80049ec:	4770      	bx	lr
	...

080049f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b09b      	sub	sp, #108	; 0x6c
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	78db      	ldrb	r3, [r3, #3]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d81f      	bhi.n	8004a62 <USB_ActivateEndpoint+0x72>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <USB_ActivateEndpoint+0x38>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a6b 	.word	0x08004a6b
 8004a34:	08004a47 	.word	0x08004a47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a44:	e012      	b.n	8004a6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a52:	e00b      	b.n	8004a6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a60:	e004      	b.n	8004a6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004a68:	e000      	b.n	8004a6c <USB_ActivateEndpoint+0x7c>
      break;
 8004a6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	b21b      	sxth	r3, r3
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	b21a      	sxth	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b21b      	sxth	r3, r3
 8004ab2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	441a      	add	r2, r3
 8004ac0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	7b1b      	ldrb	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 8149 	bne.w	8004d74 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8084 	beq.w	8004bf4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4413      	add	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	00da      	lsls	r2, r3, #3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	88db      	ldrh	r3, [r3, #6]
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	81fb      	strh	r3, [r7, #14]
 8004b2e:	89fb      	ldrh	r3, [r7, #14]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <USB_ActivateEndpoint+0x180>
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	81bb      	strh	r3, [r7, #12]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	89bb      	ldrh	r3, [r7, #12]
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d020      	beq.n	8004bba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	813b      	strh	r3, [r7, #8]
 8004b90:	893b      	ldrh	r3, [r7, #8]
 8004b92:	f083 0320 	eor.w	r3, r3, #32
 8004b96:	813b      	strh	r3, [r7, #8]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	893b      	ldrh	r3, [r7, #8]
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]
 8004bb8:	e27f      	b.n	80050ba <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd0:	817b      	strh	r3, [r7, #10]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	897b      	ldrh	r3, [r7, #10]
 8004bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8013      	strh	r3, [r2, #0]
 8004bf2:	e262      	b.n	80050ba <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	4413      	add	r3, r2
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	00da      	lsls	r2, r3, #3
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	4413      	add	r3, r2
 8004c12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	88db      	ldrh	r3, [r3, #6]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	4413      	add	r3, r2
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	00da      	lsls	r2, r3, #3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	4413      	add	r3, r2
 8004c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d112      	bne.n	8004c7a <USB_ActivateEndpoint+0x28a>
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	801a      	strh	r2, [r3, #0]
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	e02f      	b.n	8004cda <USB_ActivateEndpoint+0x2ea>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c80:	d813      	bhi.n	8004caa <USB_ActivateEndpoint+0x2ba>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <USB_ActivateEndpoint+0x2ac>
 8004c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c98:	3301      	adds	r3, #1
 8004c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	e017      	b.n	8004cda <USB_ActivateEndpoint+0x2ea>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <USB_ActivateEndpoint+0x2d4>
 8004cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	029b      	lsls	r3, r3, #10
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	83fb      	strh	r3, [r7, #30]
 8004ce8:	8bfb      	ldrh	r3, [r7, #30]
 8004cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01b      	beq.n	8004d2a <USB_ActivateEndpoint+0x33a>
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	83bb      	strh	r3, [r7, #28]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	8bbb      	ldrh	r3, [r7, #28]
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	837b      	strh	r3, [r7, #26]
 8004d42:	8b7b      	ldrh	r3, [r7, #26]
 8004d44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d48:	837b      	strh	r3, [r7, #26]
 8004d4a:	8b7b      	ldrh	r3, [r7, #26]
 8004d4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d50:	837b      	strh	r3, [r7, #26]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8b7b      	ldrh	r3, [r7, #26]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
 8004d72:	e1a2      	b.n	80050ba <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dc0:	4413      	add	r3, r2
 8004dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	00da      	lsls	r2, r3, #3
 8004dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	891b      	ldrh	r3, [r3, #8]
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	653b      	str	r3, [r7, #80]	; 0x50
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df4:	4413      	add	r3, r2
 8004df6:	653b      	str	r3, [r7, #80]	; 0x50
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	00da      	lsls	r2, r3, #3
 8004dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e00:	4413      	add	r3, r2
 8004e02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	895b      	ldrh	r3, [r3, #10]
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 8091 	bne.w	8004f44 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004e30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01b      	beq.n	8004e72 <USB_ActivateEndpoint+0x482>
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004e80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01b      	beq.n	8004ec2 <USB_ActivateEndpoint+0x4d2>
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004eda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004edc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ee0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ee2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ee4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ee8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f20:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]
 8004f42:	e0ba      	b.n	80050ba <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01d      	beq.n	8004f9c <USB_ActivateEndpoint+0x5ac>
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01d      	beq.n	8004ff4 <USB_ActivateEndpoint+0x604>
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	78db      	ldrb	r3, [r3, #3]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d024      	beq.n	8005046 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005012:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005016:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800501a:	f083 0320 	eor.w	r3, r3, #32
 800501e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
 8005044:	e01d      	b.n	8005082 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005098:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80050ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80050be:	4618      	mov	r0, r3
 80050c0:	376c      	adds	r7, #108	; 0x6c
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop

080050cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b08d      	sub	sp, #52	; 0x34
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	7b1b      	ldrb	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 808e 	bne.w	80051fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d044      	beq.n	8005172 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	81bb      	strh	r3, [r7, #12]
 80050f6:	89bb      	ldrh	r3, [r7, #12]
 80050f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01b      	beq.n	8005138 <USB_DeactivateEndpoint+0x6c>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	817b      	strh	r3, [r7, #10]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	897b      	ldrh	r3, [r7, #10]
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514e:	813b      	strh	r3, [r7, #8]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	893b      	ldrh	r3, [r7, #8]
 800515c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516c:	b29b      	uxth	r3, r3
 800516e:	8013      	strh	r3, [r2, #0]
 8005170:	e192      	b.n	8005498 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	827b      	strh	r3, [r7, #18]
 8005180:	8a7b      	ldrh	r3, [r7, #18]
 8005182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01b      	beq.n	80051c2 <USB_DeactivateEndpoint+0xf6>
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	823b      	strh	r3, [r7, #16]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	8a3b      	ldrh	r3, [r7, #16]
 80051ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	81fb      	strh	r3, [r7, #14]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
 80051fa:	e14d      	b.n	8005498 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f040 80a5 	bne.w	8005350 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	843b      	strh	r3, [r7, #32]
 8005214:	8c3b      	ldrh	r3, [r7, #32]
 8005216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <USB_DeactivateEndpoint+0x18a>
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005234:	83fb      	strh	r3, [r7, #30]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	8bfb      	ldrh	r3, [r7, #30]
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	83bb      	strh	r3, [r7, #28]
 8005264:	8bbb      	ldrh	r3, [r7, #28]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <USB_DeactivateEndpoint+0x1da>
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	837b      	strh	r3, [r7, #26]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	441a      	add	r2, r3
 8005290:	8b7b      	ldrh	r3, [r7, #26]
 8005292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800529a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	833b      	strh	r3, [r7, #24]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	8b3b      	ldrh	r3, [r7, #24]
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	82fb      	strh	r3, [r7, #22]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	8afb      	ldrh	r3, [r7, #22]
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	82bb      	strh	r3, [r7, #20]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	8abb      	ldrh	r3, [r7, #20]
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]
 800534e:	e0a3      	b.n	8005498 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800535e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <USB_DeactivateEndpoint+0x2d4>
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80053ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <USB_DeactivateEndpoint+0x324>
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800544c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545c:	b29b      	uxth	r3, r3
 800545e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	847b      	strh	r3, [r7, #34]	; 0x22
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3734      	adds	r7, #52	; 0x34
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b0c4      	sub	sp, #272	; 0x110
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	1d3b      	adds	r3, r7, #4
 80054ae:	6018      	str	r0, [r3, #0]
 80054b0:	463b      	mov	r3, r7
 80054b2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054b4:	463b      	mov	r3, r7
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	f040 8557 	bne.w	8005f6e <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80054c0:	463b      	mov	r3, r7
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	463b      	mov	r3, r7
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d905      	bls.n	80054dc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054da:	e004      	b.n	80054e6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80054dc:	463b      	mov	r3, r7
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	7b1b      	ldrb	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d12c      	bne.n	800554a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6959      	ldr	r1, [r3, #20]
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	88da      	ldrh	r2, [r3, #6]
 80054fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005500:	b29b      	uxth	r3, r3
 8005502:	1d38      	adds	r0, r7, #4
 8005504:	6800      	ldr	r0, [r0, #0]
 8005506:	f001 fa1c 	bl	8006942 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4413      	add	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	463b      	mov	r3, r7
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	00da      	lsls	r2, r3, #3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	4413      	add	r3, r2
 800552e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005532:	f107 0310 	add.w	r3, r7, #16
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553c:	b29a      	uxth	r2, r3
 800553e:	f107 0310 	add.w	r3, r7, #16
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	f000 bcdd 	b.w	8005f04 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	2b02      	cmp	r3, #2
 8005552:	f040 8347 	bne.w	8005be4 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	f240 82eb 	bls.w	8005b3e <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	463b      	mov	r3, r7
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005586:	1d3b      	adds	r3, r7, #4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	441a      	add	r2, r3
 8005594:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80055a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6a1a      	ldr	r2, [r3, #32]
 80055b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b6:	1ad2      	subs	r2, r2, r3
 80055b8:	463b      	mov	r3, r7
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8159 	beq.w	800588c <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d164      	bne.n	80056b4 <USB_EPStartXfer+0x20e>
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	4413      	add	r3, r2
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005602:	463b      	mov	r3, r7
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	00da      	lsls	r2, r3, #3
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	4413      	add	r3, r2
 800560e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d112      	bne.n	8005642 <USB_EPStartXfer+0x19c>
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005626:	b29a      	uxth	r2, r3
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29a      	uxth	r2, r3
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e054      	b.n	80056ec <USB_EPStartXfer+0x246>
 8005642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005646:	2b3e      	cmp	r3, #62	; 0x3e
 8005648:	d817      	bhi.n	800567a <USB_EPStartXfer+0x1d4>
 800564a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <USB_EPStartXfer+0x1c4>
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	3301      	adds	r3, #1
 8005666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566e:	b29b      	uxth	r3, r3
 8005670:	029b      	lsls	r3, r3, #10
 8005672:	b29a      	uxth	r2, r3
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	e038      	b.n	80056ec <USB_EPStartXfer+0x246>
 800567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <USB_EPStartXfer+0x1f4>
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005694:	3b01      	subs	r3, #1
 8005696:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800569a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800569e:	b29b      	uxth	r3, r3
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	e01b      	b.n	80056ec <USB_EPStartXfer+0x246>
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d116      	bne.n	80056ec <USB_EPStartXfer+0x246>
 80056be:	1d3b      	adds	r3, r7, #4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	4413      	add	r3, r2
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	00da      	lsls	r2, r3, #3
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	4413      	add	r3, r2
 80056dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
 80056e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	895b      	ldrh	r3, [r3, #10]
 80056f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6959      	ldr	r1, [r3, #20]
 80056fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005700:	b29b      	uxth	r3, r3
 8005702:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005706:	1d38      	adds	r0, r7, #4
 8005708:	6800      	ldr	r0, [r0, #0]
 800570a:	f001 f91a 	bl	8006942 <USB_WritePMA>
            ep->xfer_buff += len;
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005718:	441a      	add	r2, r3
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	463b      	mov	r3, r7
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	429a      	cmp	r2, r3
 800572e:	d909      	bls.n	8005744 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	463b      	mov	r3, r7
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	621a      	str	r2, [r3, #32]
 8005742:	e008      	b.n	8005756 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d164      	bne.n	800582a <USB_EPStartXfer+0x384>
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	00da      	lsls	r2, r3, #3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d112      	bne.n	80057b8 <USB_EPStartXfer+0x312>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800579c:	b29a      	uxth	r2, r3
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e057      	b.n	8005868 <USB_EPStartXfer+0x3c2>
 80057b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057bc:	2b3e      	cmp	r3, #62	; 0x3e
 80057be:	d817      	bhi.n	80057f0 <USB_EPStartXfer+0x34a>
 80057c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <USB_EPStartXfer+0x33a>
 80057d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057da:	3301      	adds	r3, #1
 80057dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	029b      	lsls	r3, r3, #10
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e03b      	b.n	8005868 <USB_EPStartXfer+0x3c2>
 80057f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f4:	095b      	lsrs	r3, r3, #5
 80057f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2b00      	cmp	r3, #0
 8005804:	d104      	bne.n	8005810 <USB_EPStartXfer+0x36a>
 8005806:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800580a:	3b01      	subs	r3, #1
 800580c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005810:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005814:	b29b      	uxth	r3, r3
 8005816:	029b      	lsls	r3, r3, #10
 8005818:	b29b      	uxth	r3, r3
 800581a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005822:	b29a      	uxth	r2, r3
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e01e      	b.n	8005868 <USB_EPStartXfer+0x3c2>
 800582a:	463b      	mov	r3, r7
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d119      	bne.n	8005868 <USB_EPStartXfer+0x3c2>
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005842:	b29b      	uxth	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	4413      	add	r3, r2
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
 800584c:	463b      	mov	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	00da      	lsls	r2, r3, #3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	4413      	add	r3, r2
 8005858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005862:	b29a      	uxth	r2, r3
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005868:	463b      	mov	r3, r7
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	891b      	ldrh	r3, [r3, #8]
 800586e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005872:	463b      	mov	r3, r7
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6959      	ldr	r1, [r3, #20]
 8005878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587c:	b29b      	uxth	r3, r3
 800587e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005882:	1d38      	adds	r0, r7, #4
 8005884:	6800      	ldr	r0, [r0, #0]
 8005886:	f001 f85c 	bl	8006942 <USB_WritePMA>
 800588a:	e33b      	b.n	8005f04 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d164      	bne.n	8005960 <USB_EPStartXfer+0x4ba>
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	4413      	add	r3, r2
 80058ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ae:	463b      	mov	r3, r7
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	00da      	lsls	r2, r3, #3
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	4413      	add	r3, r2
 80058ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d112      	bne.n	80058ee <USB_EPStartXfer+0x448>
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	e057      	b.n	800599e <USB_EPStartXfer+0x4f8>
 80058ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f2:	2b3e      	cmp	r3, #62	; 0x3e
 80058f4:	d817      	bhi.n	8005926 <USB_EPStartXfer+0x480>
 80058f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <USB_EPStartXfer+0x470>
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005910:	3301      	adds	r3, #1
 8005912:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800591a:	b29b      	uxth	r3, r3
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	b29a      	uxth	r2, r3
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e03b      	b.n	800599e <USB_EPStartXfer+0x4f8>
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <USB_EPStartXfer+0x4a0>
 800593c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005940:	3b01      	subs	r3, #1
 8005942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594a:	b29b      	uxth	r3, r3
 800594c:	029b      	lsls	r3, r3, #10
 800594e:	b29b      	uxth	r3, r3
 8005950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005958:	b29a      	uxth	r2, r3
 800595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e01e      	b.n	800599e <USB_EPStartXfer+0x4f8>
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d119      	bne.n	800599e <USB_EPStartXfer+0x4f8>
 800596a:	1d3b      	adds	r3, r7, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	657b      	str	r3, [r7, #84]	; 0x54
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597e:	4413      	add	r3, r2
 8005980:	657b      	str	r3, [r7, #84]	; 0x54
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	00da      	lsls	r2, r3, #3
 800598a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800598c:	4413      	add	r3, r2
 800598e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005992:	653b      	str	r3, [r7, #80]	; 0x50
 8005994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005998:	b29a      	uxth	r2, r3
 800599a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	891b      	ldrh	r3, [r3, #8]
 80059a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6959      	ldr	r1, [r3, #20]
 80059ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059b8:	1d38      	adds	r0, r7, #4
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	f000 ffc1 	bl	8006942 <USB_WritePMA>
            ep->xfer_buff += len;
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ca:	441a      	add	r2, r3
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1a      	ldr	r2, [r3, #32]
 80059d8:	463b      	mov	r3, r7
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d909      	bls.n	80059f6 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80059e2:	463b      	mov	r3, r7
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	621a      	str	r2, [r3, #32]
 80059f4:	e008      	b.n	8005a08 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2200      	movs	r2, #0
 8005a06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	463b      	mov	r3, r7
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d164      	bne.n	8005ae2 <USB_EPStartXfer+0x63c>
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2c:	4413      	add	r3, r2
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a30:	463b      	mov	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	00da      	lsls	r2, r3, #3
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d112      	bne.n	8005a70 <USB_EPStartXfer+0x5ca>
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e054      	b.n	8005b1a <USB_EPStartXfer+0x674>
 8005a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a74:	2b3e      	cmp	r3, #62	; 0x3e
 8005a76:	d817      	bhi.n	8005aa8 <USB_EPStartXfer+0x602>
 8005a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d004      	beq.n	8005a98 <USB_EPStartXfer+0x5f2>
 8005a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a92:	3301      	adds	r3, #1
 8005a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	029b      	lsls	r3, r3, #10
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e038      	b.n	8005b1a <USB_EPStartXfer+0x674>
 8005aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <USB_EPStartXfer+0x622>
 8005abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ac8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	e01b      	b.n	8005b1a <USB_EPStartXfer+0x674>
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d116      	bne.n	8005b1a <USB_EPStartXfer+0x674>
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afa:	4413      	add	r3, r2
 8005afc:	647b      	str	r3, [r7, #68]	; 0x44
 8005afe:	463b      	mov	r3, r7
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	00da      	lsls	r2, r3, #3
 8005b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	895b      	ldrh	r3, [r3, #10]
 8005b20:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6959      	ldr	r1, [r3, #20]
 8005b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b34:	1d38      	adds	r0, r7, #4
 8005b36:	6800      	ldr	r0, [r0, #0]
 8005b38:	f000 ff03 	bl	8006942 <USB_WritePMA>
 8005b3c:	e1e2      	b.n	8005f04 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	663b      	str	r3, [r7, #96]	; 0x60
 8005b92:	1d3b      	adds	r3, r7, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba0:	4413      	add	r3, r2
 8005ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	00da      	lsls	r2, r3, #3
 8005bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	891b      	ldrh	r3, [r3, #8]
 8005bc6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bca:	463b      	mov	r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6959      	ldr	r1, [r3, #20]
 8005bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005bda:	1d38      	adds	r0, r7, #4
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f000 feb0 	bl	8006942 <USB_WritePMA>
 8005be2:	e18f      	b.n	8005f04 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005be4:	1d3b      	adds	r3, r7, #4
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 808f 	beq.w	8005d1e <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d164      	bne.n	8005cda <USB_EPStartXfer+0x834>
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	673b      	str	r3, [r7, #112]	; 0x70
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c24:	4413      	add	r3, r2
 8005c26:	673b      	str	r3, [r7, #112]	; 0x70
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	00da      	lsls	r2, r3, #3
 8005c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c32:	4413      	add	r3, r2
 8005c34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d112      	bne.n	8005c68 <USB_EPStartXfer+0x7c2>
 8005c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e054      	b.n	8005d12 <USB_EPStartXfer+0x86c>
 8005c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6e:	d817      	bhi.n	8005ca0 <USB_EPStartXfer+0x7fa>
 8005c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <USB_EPStartXfer+0x7ea>
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	029b      	lsls	r3, r3, #10
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e038      	b.n	8005d12 <USB_EPStartXfer+0x86c>
 8005ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <USB_EPStartXfer+0x81a>
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	029b      	lsls	r3, r3, #10
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e01b      	b.n	8005d12 <USB_EPStartXfer+0x86c>
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d116      	bne.n	8005d12 <USB_EPStartXfer+0x86c>
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf2:	4413      	add	r3, r2
 8005cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	00da      	lsls	r2, r3, #3
 8005cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d00:	4413      	add	r3, r2
 8005d02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d06:	677b      	str	r3, [r7, #116]	; 0x74
 8005d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	895b      	ldrh	r3, [r3, #10]
 8005d18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005d1c:	e097      	b.n	8005e4e <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d1e:	463b      	mov	r3, r7
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d168      	bne.n	8005dfa <USB_EPStartXfer+0x954>
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d40:	4413      	add	r3, r2
 8005d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	00da      	lsls	r2, r3, #3
 8005d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d52:	4413      	add	r3, r2
 8005d54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d112      	bne.n	8005d88 <USB_EPStartXfer+0x8e2>
 8005d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	e05d      	b.n	8005e44 <USB_EPStartXfer+0x99e>
 8005d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d8e:	d817      	bhi.n	8005dc0 <USB_EPStartXfer+0x91a>
 8005d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <USB_EPStartXfer+0x90a>
 8005da6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005daa:	3301      	adds	r3, #1
 8005dac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005db0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e041      	b.n	8005e44 <USB_EPStartXfer+0x99e>
 8005dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <USB_EPStartXfer+0x93a>
 8005dd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005de0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	029b      	lsls	r3, r3, #10
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	e024      	b.n	8005e44 <USB_EPStartXfer+0x99e>
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d11f      	bne.n	8005e44 <USB_EPStartXfer+0x99e>
 8005e04:	1d3b      	adds	r3, r7, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e0c:	1d3b      	adds	r3, r7, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e22:	463b      	mov	r3, r7
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	00da      	lsls	r2, r3, #3
 8005e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e2e:	4413      	add	r3, r2
 8005e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	891b      	ldrh	r3, [r3, #8]
 8005e4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e4e:	463b      	mov	r3, r7
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6959      	ldr	r1, [r3, #20]
 8005e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e5e:	1d38      	adds	r0, r7, #4
 8005e60:	6800      	ldr	r0, [r0, #0]
 8005e62:	f000 fd6e 	bl	8006942 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d122      	bne.n	8005eb6 <USB_EPStartXfer+0xa10>
 8005e70:	1d3b      	adds	r3, r7, #4
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	463b      	mov	r3, r7
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	8013      	strh	r3, [r2, #0]
 8005eb4:	e026      	b.n	8005f04 <USB_EPStartXfer+0xa5e>
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d121      	bne.n	8005f04 <USB_EPStartXfer+0xa5e>
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005ede:	1d3b      	adds	r3, r7, #4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f04:	1d3b      	adds	r3, r7, #4
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f107 020e 	add.w	r2, r7, #14
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f22:	8013      	strh	r3, [r2, #0]
 8005f24:	f107 030e 	add.w	r3, r7, #14
 8005f28:	f107 020e 	add.w	r2, r7, #14
 8005f2c:	8812      	ldrh	r2, [r2, #0]
 8005f2e:	f082 0210 	eor.w	r2, r2, #16
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	f107 030e 	add.w	r3, r7, #14
 8005f38:	f107 020e 	add.w	r2, r7, #14
 8005f3c:	8812      	ldrh	r2, [r2, #0]
 8005f3e:	f082 0220 	eor.w	r2, r2, #32
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	463b      	mov	r3, r7
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	441a      	add	r2, r3
 8005f52:	f107 030e 	add.w	r3, r7, #14
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]
 8005f6c:	e3b5      	b.n	80066da <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	7b1b      	ldrb	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8090 	bne.w	800609a <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	463b      	mov	r3, r7
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d90e      	bls.n	8005fa8 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	619a      	str	r2, [r3, #24]
 8005fa6:	e008      	b.n	8005fba <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fba:	1d3b      	adds	r3, r7, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	00da      	lsls	r2, r3, #3
 8005fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d116      	bne.n	8006024 <USB_EPStartXfer+0xb7e>
 8005ff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006002:	b29a      	uxth	r2, r3
 8006004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	e32c      	b.n	800667e <USB_EPStartXfer+0x11d8>
 8006024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006028:	2b3e      	cmp	r3, #62	; 0x3e
 800602a:	d818      	bhi.n	800605e <USB_EPStartXfer+0xbb8>
 800602c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d004      	beq.n	800604c <USB_EPStartXfer+0xba6>
 8006042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006046:	3301      	adds	r3, #1
 8006048:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800604c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006050:	b29b      	uxth	r3, r3
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	b29a      	uxth	r2, r3
 8006056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e30f      	b.n	800667e <USB_EPStartXfer+0x11d8>
 800605e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <USB_EPStartXfer+0xbd8>
 8006074:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006078:	3b01      	subs	r3, #1
 800607a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800607e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006082:	b29b      	uxth	r3, r3
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006090:	b29a      	uxth	r2, r3
 8006092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e2f1      	b.n	800667e <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	f040 818f 	bne.w	80063c4 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d175      	bne.n	800619c <USB_EPStartXfer+0xcf6>
 80060b0:	1d3b      	adds	r3, r7, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060b8:	1d3b      	adds	r3, r7, #4
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060c8:	4413      	add	r3, r2
 80060ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060ce:	463b      	mov	r3, r7
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	00da      	lsls	r2, r3, #3
 80060d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060da:	4413      	add	r3, r2
 80060dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e4:	463b      	mov	r3, r7
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d116      	bne.n	800611c <USB_EPStartXfer+0xc76>
 80060ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006112:	b29a      	uxth	r2, r3
 8006114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e065      	b.n	80061e8 <USB_EPStartXfer+0xd42>
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b3e      	cmp	r3, #62	; 0x3e
 8006124:	d81a      	bhi.n	800615c <USB_EPStartXfer+0xcb6>
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <USB_EPStartXfer+0xca4>
 8006140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006144:	3301      	adds	r3, #1
 8006146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800614a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800614e:	b29b      	uxth	r3, r3
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	b29a      	uxth	r2, r3
 8006154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	e045      	b.n	80061e8 <USB_EPStartXfer+0xd42>
 800615c:	463b      	mov	r3, r7
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006168:	463b      	mov	r3, r7
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <USB_EPStartXfer+0xcda>
 8006176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800617a:	3b01      	subs	r3, #1
 800617c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e025      	b.n	80061e8 <USB_EPStartXfer+0xd42>
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d120      	bne.n	80061e8 <USB_EPStartXfer+0xd42>
 80061a6:	1d3b      	adds	r3, r7, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061be:	4413      	add	r3, r2
 80061c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	00da      	lsls	r2, r3, #3
 80061cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061da:	463b      	mov	r3, r7
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d175      	bne.n	80062e6 <USB_EPStartXfer+0xe40>
 80061fa:	1d3b      	adds	r3, r7, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006202:	1d3b      	adds	r3, r7, #4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006212:	4413      	add	r3, r2
 8006214:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	00da      	lsls	r2, r3, #3
 8006220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006224:	4413      	add	r3, r2
 8006226:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800622a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d116      	bne.n	8006266 <USB_EPStartXfer+0xdc0>
 8006238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625c:	b29a      	uxth	r2, r3
 800625e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e061      	b.n	800632a <USB_EPStartXfer+0xe84>
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b3e      	cmp	r3, #62	; 0x3e
 800626e:	d81a      	bhi.n	80062a6 <USB_EPStartXfer+0xe00>
 8006270:	463b      	mov	r3, r7
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <USB_EPStartXfer+0xdee>
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628e:	3301      	adds	r3, #1
 8006290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006298:	b29b      	uxth	r3, r3
 800629a:	029b      	lsls	r3, r3, #10
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e041      	b.n	800632a <USB_EPStartXfer+0xe84>
 80062a6:	463b      	mov	r3, r7
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <USB_EPStartXfer+0xe24>
 80062c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c4:	3b01      	subs	r3, #1
 80062c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	029b      	lsls	r3, r3, #10
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062dc:	b29a      	uxth	r2, r3
 80062de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	e021      	b.n	800632a <USB_EPStartXfer+0xe84>
 80062e6:	463b      	mov	r3, r7
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d11c      	bne.n	800632a <USB_EPStartXfer+0xe84>
 80062f0:	1d3b      	adds	r3, r7, #4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006300:	4413      	add	r3, r2
 8006302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	00da      	lsls	r2, r3, #3
 800630e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006312:	4413      	add	r3, r2
 8006314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006318:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006328:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 81a4 	beq.w	800667e <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006336:	1d3b      	adds	r3, r7, #4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800634a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800634e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <USB_EPStartXfer+0xebc>
 8006356:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10d      	bne.n	800637e <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006362:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 8187 	bne.w	800667e <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006370:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 8180 	bne.w	800667e <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	463b      	mov	r3, r7
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80063ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063be:	b29b      	uxth	r3, r3
 80063c0:	8013      	strh	r3, [r2, #0]
 80063c2:	e15c      	b.n	800667e <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	78db      	ldrb	r3, [r3, #3]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	f040 8155 	bne.w	800667a <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d90e      	bls.n	80063fe <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	619a      	str	r2, [r3, #24]
 80063fc:	e008      	b.n	8006410 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2200      	movs	r2, #0
 800640e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006410:	463b      	mov	r3, r7
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d16f      	bne.n	80064fa <USB_EPStartXfer+0x1054>
 800641a:	1d3b      	adds	r3, r7, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006422:	1d3b      	adds	r3, r7, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006432:	4413      	add	r3, r2
 8006434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	00da      	lsls	r2, r3, #3
 8006440:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006444:	4413      	add	r3, r2
 8006446:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800644a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d116      	bne.n	8006484 <USB_EPStartXfer+0xfde>
 8006456:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647a:	b29a      	uxth	r2, r3
 800647c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	e05f      	b.n	8006544 <USB_EPStartXfer+0x109e>
 8006484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006488:	2b3e      	cmp	r3, #62	; 0x3e
 800648a:	d818      	bhi.n	80064be <USB_EPStartXfer+0x1018>
 800648c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <USB_EPStartXfer+0x1006>
 80064a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a6:	3301      	adds	r3, #1
 80064a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	e042      	b.n	8006544 <USB_EPStartXfer+0x109e>
 80064be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <USB_EPStartXfer+0x1038>
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d8:	3b01      	subs	r3, #1
 80064da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	029b      	lsls	r3, r3, #10
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e024      	b.n	8006544 <USB_EPStartXfer+0x109e>
 80064fa:	463b      	mov	r3, r7
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d11f      	bne.n	8006544 <USB_EPStartXfer+0x109e>
 8006504:	1d3b      	adds	r3, r7, #4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651c:	4413      	add	r3, r2
 800651e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00da      	lsls	r2, r3, #3
 800652a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800652e:	4413      	add	r3, r2
 8006530:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006534:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653c:	b29a      	uxth	r2, r3
 800653e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800654c:	463b      	mov	r3, r7
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d16f      	bne.n	8006636 <USB_EPStartXfer+0x1190>
 8006556:	1d3b      	adds	r3, r7, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800656e:	4413      	add	r3, r2
 8006570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006574:	463b      	mov	r3, r7
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	00da      	lsls	r2, r3, #3
 800657c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006580:	4413      	add	r3, r2
 8006582:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800658a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d116      	bne.n	80065c0 <USB_EPStartXfer+0x111a>
 8006592:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e05e      	b.n	800667e <USB_EPStartXfer+0x11d8>
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c4:	2b3e      	cmp	r3, #62	; 0x3e
 80065c6:	d818      	bhi.n	80065fa <USB_EPStartXfer+0x1154>
 80065c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <USB_EPStartXfer+0x1142>
 80065de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e2:	3301      	adds	r3, #1
 80065e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	029b      	lsls	r3, r3, #10
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e041      	b.n	800667e <USB_EPStartXfer+0x11d8>
 80065fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <USB_EPStartXfer+0x1174>
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006614:	3b01      	subs	r3, #1
 8006616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800661a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661e:	b29b      	uxth	r3, r3
 8006620:	029b      	lsls	r3, r3, #10
 8006622:	b29b      	uxth	r3, r3
 8006624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662c:	b29a      	uxth	r2, r3
 800662e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	e023      	b.n	800667e <USB_EPStartXfer+0x11d8>
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d11e      	bne.n	800667e <USB_EPStartXfer+0x11d8>
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006650:	4413      	add	r3, r2
 8006652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006656:	463b      	mov	r3, r7
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	00da      	lsls	r2, r3, #3
 800665e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006662:	4413      	add	r3, r2
 8006664:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800666c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006670:	b29a      	uxth	r2, r3
 8006672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e001      	b.n	800667e <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e02e      	b.n	80066dc <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006698:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800669c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80066a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066a4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80066a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80066ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066b0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80066b4:	1d3b      	adds	r3, r7, #4
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80066c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d020      	beq.n	800673a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670e:	81bb      	strh	r3, [r7, #12]
 8006710:	89bb      	ldrh	r3, [r7, #12]
 8006712:	f083 0310 	eor.w	r3, r3, #16
 8006716:	81bb      	strh	r3, [r7, #12]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	89bb      	ldrh	r3, [r7, #12]
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]
 8006738:	e01f      	b.n	800677a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800674c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006750:	81fb      	strh	r3, [r7, #14]
 8006752:	89fb      	ldrh	r3, [r7, #14]
 8006754:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006758:	81fb      	strh	r3, [r7, #14]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	7b1b      	ldrb	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 809d 	bne.w	80068d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d04c      	beq.n	800683e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	823b      	strh	r3, [r7, #16]
 80067b2:	8a3b      	ldrh	r3, [r7, #16]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01b      	beq.n	80067f4 <USB_EPClearStall+0x6c>
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	81fb      	strh	r3, [r7, #14]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	89fb      	ldrh	r3, [r7, #14]
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	78db      	ldrb	r3, [r3, #3]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d06c      	beq.n	80068d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006812:	81bb      	strh	r3, [r7, #12]
 8006814:	89bb      	ldrh	r3, [r7, #12]
 8006816:	f083 0320 	eor.w	r3, r3, #32
 800681a:	81bb      	strh	r3, [r7, #12]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	89bb      	ldrh	r3, [r7, #12]
 8006828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006838:	b29b      	uxth	r3, r3
 800683a:	8013      	strh	r3, [r2, #0]
 800683c:	e04b      	b.n	80068d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	82fb      	strh	r3, [r7, #22]
 800684c:	8afb      	ldrh	r3, [r7, #22]
 800684e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <USB_EPClearStall+0x106>
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686c:	82bb      	strh	r3, [r7, #20]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	441a      	add	r2, r3
 8006878:	8abb      	ldrh	r3, [r7, #20]
 800687a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688a:	b29b      	uxth	r3, r3
 800688c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a4:	827b      	strh	r3, [r7, #18]
 80068a6:	8a7b      	ldrh	r3, [r7, #18]
 80068a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ac:	827b      	strh	r3, [r7, #18]
 80068ae:	8a7b      	ldrh	r3, [r7, #18]
 80068b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068b4:	827b      	strh	r3, [r7, #18]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	441a      	add	r2, r3
 80068c0:	8a7b      	ldrh	r3, [r7, #18]
 80068c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2280      	movs	r2, #128	; 0x80
 80068fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006930:	b29b      	uxth	r3, r3
 8006932:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006942:	b480      	push	{r7}
 8006944:	b08d      	sub	sp, #52	; 0x34
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	4611      	mov	r1, r2
 800694e:	461a      	mov	r2, r3
 8006950:	460b      	mov	r3, r1
 8006952:	80fb      	strh	r3, [r7, #6]
 8006954:	4613      	mov	r3, r2
 8006956:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006958:	88bb      	ldrh	r3, [r7, #4]
 800695a:	3301      	adds	r3, #1
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006978:	e01b      	b.n	80069b2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	3301      	adds	r3, #1
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	b29b      	uxth	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	b29a      	uxth	r2, r3
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	3302      	adds	r3, #2
 80069a4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	3301      	adds	r3, #1
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	3b01      	subs	r3, #1
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e0      	bne.n	800697a <USB_WritePMA+0x38>
  }
}
 80069b8:	bf00      	nop
 80069ba:	3734      	adds	r7, #52	; 0x34
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b08b      	sub	sp, #44	; 0x2c
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4611      	mov	r1, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	460b      	mov	r3, r1
 80069d4:	80fb      	strh	r3, [r7, #6]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80069da:	88bb      	ldrh	r3, [r7, #4]
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
 80069fa:	e018      	b.n	8006a2e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	3302      	adds	r3, #2
 8006a08:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	3301      	adds	r3, #1
 8006a16:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3301      	adds	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e3      	bne.n	80069fc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006a34:	88bb      	ldrh	r3, [r7, #4]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	701a      	strb	r2, [r3, #0]
  }
}
 8006a50:	bf00      	nop
 8006a52:	372c      	adds	r7, #44	; 0x2c
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d115      	bne.n	8006aa0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a78:	2202      	movs	r2, #2
 8006a7a:	2181      	movs	r1, #129	; 0x81
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f003 faa8 	bl	8009fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	2101      	movs	r1, #1
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f003 fa9e 	bl	8009fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006a9e:	e012      	b.n	8006ac6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	2181      	movs	r1, #129	; 0x81
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f003 fa93 	bl	8009fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ab2:	2340      	movs	r3, #64	; 0x40
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f003 fa8a 	bl	8009fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	2203      	movs	r2, #3
 8006aca:	2182      	movs	r1, #130	; 0x82
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f003 fa80 	bl	8009fd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006adc:	f003 fba2 	bl	800a224 <USBD_static_malloc>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006af2:	2301      	movs	r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]
 8006af6:	e026      	b.n	8006b46 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7c1b      	ldrb	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f003 fb41 	bl	800a1b6 <USBD_LL_PrepareReceive>
 8006b34:	e007      	b.n	8006b46 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b3c:	2340      	movs	r3, #64	; 0x40
 8006b3e:	2101      	movs	r1, #1
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f003 fb38 	bl	800a1b6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b60:	2181      	movs	r1, #129	; 0x81
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f003 fa5b 	bl	800a01e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b6e:	2101      	movs	r1, #1
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f003 fa54 	bl	800a01e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b7e:	2182      	movs	r1, #130	; 0x82
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f003 fa4c 	bl	800a01e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f003 fb4a 	bl	800a240 <USBD_static_free>
    pdev->pClassData = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b086      	sub	sp, #24
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d039      	beq.n	8006c5c <USBD_CDC_Setup+0x9e>
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d17c      	bne.n	8006ce6 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	88db      	ldrh	r3, [r3, #6]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d029      	beq.n	8006c48 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	da11      	bge.n	8006c22 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	88d2      	ldrh	r2, [r2, #6]
 8006c10:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c12:	6939      	ldr	r1, [r7, #16]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	88db      	ldrh	r3, [r3, #6]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fa04 	bl	8008028 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c20:	e068      	b.n	8006cf4 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	785a      	ldrb	r2, [r3, #1]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	88db      	ldrh	r3, [r3, #6]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c38:	6939      	ldr	r1, [r7, #16]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	88db      	ldrh	r3, [r3, #6]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 fa1f 	bl	8008084 <USBD_CtlPrepareRx>
      break;
 8006c46:	e055      	b.n	8006cf4 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	7850      	ldrb	r0, [r2, #1]
 8006c54:	2200      	movs	r2, #0
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	4798      	blx	r3
      break;
 8006c5a:	e04b      	b.n	8006cf4 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b0a      	cmp	r3, #10
 8006c62:	d017      	beq.n	8006c94 <USBD_CDC_Setup+0xd6>
 8006c64:	2b0b      	cmp	r3, #11
 8006c66:	d029      	beq.n	8006cbc <USBD_CDC_Setup+0xfe>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d133      	bne.n	8006cd4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d107      	bne.n	8006c86 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f9d2 	bl	8008028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c84:	e02e      	b.n	8006ce4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 f962 	bl	8007f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	75fb      	strb	r3, [r7, #23]
          break;
 8006c92:	e027      	b.n	8006ce4 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d107      	bne.n	8006cae <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c9e:	f107 030f 	add.w	r3, r7, #15
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 f9be 	bl	8008028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cac:	e01a      	b.n	8006ce4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 f94e 	bl	8007f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cba:	e013      	b.n	8006ce4 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d00d      	beq.n	8006ce2 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 f942 	bl	8007f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cd2:	e006      	b.n	8006ce2 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 f93b 	bl	8007f52 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	75fb      	strb	r3, [r7, #23]
          break;
 8006ce0:	e000      	b.n	8006ce4 <USBD_CDC_Setup+0x126>
          break;
 8006ce2:	bf00      	nop
      }
      break;
 8006ce4:	e006      	b.n	8006cf4 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f932 	bl	8007f52 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf2:	bf00      	nop
  }

  return ret;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d10:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d18:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d03a      	beq.n	8006d9a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	331c      	adds	r3, #28
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d029      	beq.n	8006d8e <USBD_CDC_DataIn+0x90>
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	331c      	adds	r3, #28
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	78f9      	ldrb	r1, [r7, #3]
 8006d4e:	68b8      	ldr	r0, [r7, #8]
 8006d50:	460b      	mov	r3, r1
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4403      	add	r3, r0
 8006d5a:	3338      	adds	r3, #56	; 0x38
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d62:	fb03 f301 	mul.w	r3, r3, r1
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d110      	bne.n	8006d8e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006d6c:	78fa      	ldrb	r2, [r7, #3]
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	331c      	adds	r3, #28
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d80:	78f9      	ldrb	r1, [r7, #3]
 8006d82:	2300      	movs	r3, #0
 8006d84:	2200      	movs	r2, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f003 f9f2 	bl	800a170 <USBD_LL_Transmit>
 8006d8c:	e003      	b.n	8006d96 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f003 fa1d 	bl	800a1fc <USBD_LL_GetRxDataSize>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00d      	beq.n	8006df0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006de8:	4611      	mov	r1, r2
 8006dea:	4798      	blx	r3

    return USBD_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e08:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d015      	beq.n	8006e40 <USBD_CDC_EP0_RxReady+0x46>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e1a:	2bff      	cmp	r3, #255	; 0xff
 8006e1c:	d010      	beq.n	8006e40 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006e2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e34:	b292      	uxth	r2, r2
 8006e36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	22ff      	movs	r2, #255	; 0xff
 8006e3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2243      	movs	r2, #67	; 0x43
 8006e58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006e5a:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20000094 	.word	0x20000094

08006e6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2243      	movs	r2, #67	; 0x43
 8006e78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006e7a:	4b03      	ldr	r3, [pc, #12]	; (8006e88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	20000050 	.word	0x20000050

08006e8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2243      	movs	r2, #67	; 0x43
 8006e98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e9a:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	200000d8 	.word	0x200000d8

08006eac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	220a      	movs	r2, #10
 8006eb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006eba:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	2000000c 	.word	0x2000000c

08006ecc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b087      	sub	sp, #28
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01c      	beq.n	8006faa <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d115      	bne.n	8006fa6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2181      	movs	r1, #129	; 0x81
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f003 f8e7 	bl	800a170 <USBD_LL_Transmit>

      return USBD_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e002      	b.n	8006fac <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006faa:	2302      	movs	r3, #2
  }
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d017      	beq.n	8006ffe <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7c1b      	ldrb	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f003 f8e7 	bl	800a1b6 <USBD_LL_PrepareReceive>
 8006fe8:	e007      	b.n	8006ffa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ff0:	2340      	movs	r3, #64	; 0x40
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f003 f8de 	bl	800a1b6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	e000      	b.n	8007000 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006ffe:	2302      	movs	r3, #2
  }
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	e01a      	b.n	8007056 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	79fa      	ldrb	r2, [r7, #7]
 800704c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f002 ff48 	bl	8009ee4 <USBD_LL_Init>

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	e001      	b.n	8007084 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007080:	2302      	movs	r3, #2
 8007082:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f002 ff7e 	bl	8009f9c <USBD_LL_Start>

  return USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070cc:	2302      	movs	r3, #2
 80070ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	4611      	mov	r1, r2
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fece 	bl	8007ed8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2b01      	cmp	r3, #1
 800715e:	d00c      	beq.n	800717a <USBD_LL_SetupStage+0x56>
 8007160:	2b01      	cmp	r3, #1
 8007162:	d302      	bcc.n	800716a <USBD_LL_SetupStage+0x46>
 8007164:	2b02      	cmp	r3, #2
 8007166:	d010      	beq.n	800718a <USBD_LL_SetupStage+0x66>
 8007168:	e017      	b.n	800719a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9ce 	bl	8007514 <USBD_StdDevReq>
      break;
 8007178:	e01a      	b.n	80071b0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa30 	bl	80075e8 <USBD_StdItfReq>
      break;
 8007188:	e012      	b.n	80071b0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa6e 	bl	8007674 <USBD_StdEPReq>
      break;
 8007198:	e00a      	b.n	80071b0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 ff57 	bl	800a05c <USBD_LL_StallEP>
      break;
 80071ae:	bf00      	nop
  }

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	460b      	mov	r3, r1
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d14b      	bne.n	8007266 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d134      	bne.n	800724a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d919      	bls.n	8007220 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	1ad2      	subs	r2, r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007202:	429a      	cmp	r2, r3
 8007204:	d203      	bcs.n	800720e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800720a:	b29b      	uxth	r3, r3
 800720c:	e002      	b.n	8007214 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 ff51 	bl	80080c0 <USBD_CtlContinueRx>
 800721e:	e038      	b.n	8007292 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007232:	2b03      	cmp	r3, #3
 8007234:	d105      	bne.n	8007242 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 ff4e 	bl	80080e4 <USBD_CtlSendStatus>
 8007248:	e023      	b.n	8007292 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007250:	2b05      	cmp	r3, #5
 8007252:	d11e      	bne.n	8007292 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800725c:	2100      	movs	r1, #0
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f002 fefc 	bl	800a05c <USBD_LL_StallEP>
 8007264:	e015      	b.n	8007292 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007278:	2b03      	cmp	r3, #3
 800727a:	d108      	bne.n	800728e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	7afa      	ldrb	r2, [r7, #11]
 8007286:	4611      	mov	r1, r2
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	4798      	blx	r3
 800728c:	e001      	b.n	8007292 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800728e:	2302      	movs	r3, #2
 8007290:	e000      	b.n	8007294 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	460b      	mov	r3, r1
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d17f      	bne.n	80073b0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3314      	adds	r3, #20
 80072b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d15c      	bne.n	800737a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d915      	bls.n	80072f8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	1ad2      	subs	r2, r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 febb 	bl	8008060 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ea:	2300      	movs	r3, #0
 80072ec:	2200      	movs	r2, #0
 80072ee:	2100      	movs	r1, #0
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f002 ff60 	bl	800a1b6 <USBD_LL_PrepareReceive>
 80072f6:	e04e      	b.n	8007396 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	6912      	ldr	r2, [r2, #16]
 8007300:	fbb3 f1f2 	udiv	r1, r3, r2
 8007304:	fb02 f201 	mul.w	r2, r2, r1
 8007308:	1a9b      	subs	r3, r3, r2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11c      	bne.n	8007348 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007316:	429a      	cmp	r2, r3
 8007318:	d316      	bcc.n	8007348 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007324:	429a      	cmp	r2, r3
 8007326:	d20f      	bcs.n	8007348 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fe97 	bl	8008060 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800733a:	2300      	movs	r3, #0
 800733c:	2200      	movs	r2, #0
 800733e:	2100      	movs	r1, #0
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f002 ff38 	bl	800a1b6 <USBD_LL_PrepareReceive>
 8007346:	e026      	b.n	8007396 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800735a:	2b03      	cmp	r3, #3
 800735c:	d105      	bne.n	800736a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800736a:	2180      	movs	r1, #128	; 0x80
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f002 fe75 	bl	800a05c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fec9 	bl	800810a <USBD_CtlReceiveStatus>
 8007378:	e00d      	b.n	8007396 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007380:	2b04      	cmp	r3, #4
 8007382:	d004      	beq.n	800738e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800738e:	2180      	movs	r1, #128	; 0x80
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f002 fe63 	bl	800a05c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800739c:	2b01      	cmp	r3, #1
 800739e:	d11d      	bne.n	80073dc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff fe82 	bl	80070aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073ae:	e015      	b.n	80073dc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00d      	beq.n	80073d8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d108      	bne.n	80073d8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	7afa      	ldrb	r2, [r7, #11]
 80073d0:	4611      	mov	r1, r2
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	4798      	blx	r3
 80073d6:	e001      	b.n	80073dc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073d8:	2302      	movs	r3, #2
 80073da:	e000      	b.n	80073de <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073ee:	2340      	movs	r3, #64	; 0x40
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f002 fdec 	bl	8009fd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2240      	movs	r2, #64	; 0x40
 8007406:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800740a:	2340      	movs	r3, #64	; 0x40
 800740c:	2200      	movs	r2, #0
 800740e:	2180      	movs	r1, #128	; 0x80
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f002 fdde 	bl	8009fd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2240      	movs	r2, #64	; 0x40
 8007420:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d009      	beq.n	800745e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6852      	ldr	r2, [r2, #4]
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	4611      	mov	r1, r2
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
  }

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2204      	movs	r2, #4
 80074a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d105      	bne.n	80074d0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d10b      	bne.n	8007508 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800752a:	2b20      	cmp	r3, #32
 800752c:	d004      	beq.n	8007538 <USBD_StdDevReq+0x24>
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d002      	beq.n	8007538 <USBD_StdDevReq+0x24>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <USBD_StdDevReq+0x34>
 8007536:	e04c      	b.n	80075d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
      break;
 8007546:	e049      	b.n	80075dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b09      	cmp	r3, #9
 800754e:	d83a      	bhi.n	80075c6 <USBD_StdDevReq+0xb2>
 8007550:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <USBD_StdDevReq+0x44>)
 8007552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007556:	bf00      	nop
 8007558:	080075a9 	.word	0x080075a9
 800755c:	080075bd 	.word	0x080075bd
 8007560:	080075c7 	.word	0x080075c7
 8007564:	080075b3 	.word	0x080075b3
 8007568:	080075c7 	.word	0x080075c7
 800756c:	0800758b 	.word	0x0800758b
 8007570:	08007581 	.word	0x08007581
 8007574:	080075c7 	.word	0x080075c7
 8007578:	0800759f 	.word	0x0800759f
 800757c:	08007595 	.word	0x08007595
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f9d4 	bl	8007930 <USBD_GetDescriptor>
          break;
 8007588:	e022      	b.n	80075d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb37 	bl	8007c00 <USBD_SetAddress>
          break;
 8007592:	e01d      	b.n	80075d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fb74 	bl	8007c84 <USBD_SetConfig>
          break;
 800759c:	e018      	b.n	80075d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fbfd 	bl	8007da0 <USBD_GetConfig>
          break;
 80075a6:	e013      	b.n	80075d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fc2c 	bl	8007e08 <USBD_GetStatus>
          break;
 80075b0:	e00e      	b.n	80075d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fc5a 	bl	8007e6e <USBD_SetFeature>
          break;
 80075ba:	e009      	b.n	80075d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fc69 	bl	8007e96 <USBD_ClrFeature>
          break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fcc2 	bl	8007f52 <USBD_CtlError>
          break;
 80075ce:	bf00      	nop
      }
      break;
 80075d0:	e004      	b.n	80075dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fcbc 	bl	8007f52 <USBD_CtlError>
      break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop

080075e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d003      	beq.n	800760a <USBD_StdItfReq+0x22>
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d001      	beq.n	800760a <USBD_StdItfReq+0x22>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d12a      	bne.n	8007660 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007610:	3b01      	subs	r3, #1
 8007612:	2b02      	cmp	r3, #2
 8007614:	d81d      	bhi.n	8007652 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	889b      	ldrh	r3, [r3, #4]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d813      	bhi.n	8007648 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	88db      	ldrh	r3, [r3, #6]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d110      	bne.n	800765c <USBD_StdItfReq+0x74>
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10d      	bne.n	800765c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fd4f 	bl	80080e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007646:	e009      	b.n	800765c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fc81 	bl	8007f52 <USBD_CtlError>
          break;
 8007650:	e004      	b.n	800765c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc7c 	bl	8007f52 <USBD_CtlError>
          break;
 800765a:	e000      	b.n	800765e <USBD_StdItfReq+0x76>
          break;
 800765c:	bf00      	nop
      }
      break;
 800765e:	e004      	b.n	800766a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fc75 	bl	8007f52 <USBD_CtlError>
      break;
 8007668:	bf00      	nop
  }

  return USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	889b      	ldrh	r3, [r3, #4]
 8007686:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007690:	2b20      	cmp	r3, #32
 8007692:	d004      	beq.n	800769e <USBD_StdEPReq+0x2a>
 8007694:	2b40      	cmp	r3, #64	; 0x40
 8007696:	d002      	beq.n	800769e <USBD_StdEPReq+0x2a>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <USBD_StdEPReq+0x3a>
 800769c:	e13d      	b.n	800791a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
      break;
 80076ac:	e13a      	b.n	8007924 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d10a      	bne.n	80076d0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]

        return ret;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	e12a      	b.n	8007926 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d03e      	beq.n	8007756 <USBD_StdEPReq+0xe2>
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d002      	beq.n	80076e2 <USBD_StdEPReq+0x6e>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d070      	beq.n	80077c2 <USBD_StdEPReq+0x14e>
 80076e0:	e115      	b.n	800790e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d002      	beq.n	80076f2 <USBD_StdEPReq+0x7e>
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d015      	beq.n	800771c <USBD_StdEPReq+0xa8>
 80076f0:	e02b      	b.n	800774a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00c      	beq.n	8007712 <USBD_StdEPReq+0x9e>
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	2b80      	cmp	r3, #128	; 0x80
 80076fc:	d009      	beq.n	8007712 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f002 fcaa 	bl	800a05c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007708:	2180      	movs	r1, #128	; 0x80
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f002 fca6 	bl	800a05c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007710:	e020      	b.n	8007754 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fc1c 	bl	8007f52 <USBD_CtlError>
              break;
 800771a:	e01b      	b.n	8007754 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	885b      	ldrh	r3, [r3, #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10e      	bne.n	8007742 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <USBD_StdEPReq+0xce>
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b80      	cmp	r3, #128	; 0x80
 800772e:	d008      	beq.n	8007742 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	88db      	ldrh	r3, [r3, #6]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f002 fc8d 	bl	800a05c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fcce 	bl	80080e4 <USBD_CtlSendStatus>

              break;
 8007748:	e004      	b.n	8007754 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc00 	bl	8007f52 <USBD_CtlError>
              break;
 8007752:	bf00      	nop
          }
          break;
 8007754:	e0e0      	b.n	8007918 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775c:	2b02      	cmp	r3, #2
 800775e:	d002      	beq.n	8007766 <USBD_StdEPReq+0xf2>
 8007760:	2b03      	cmp	r3, #3
 8007762:	d015      	beq.n	8007790 <USBD_StdEPReq+0x11c>
 8007764:	e026      	b.n	80077b4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00c      	beq.n	8007786 <USBD_StdEPReq+0x112>
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b80      	cmp	r3, #128	; 0x80
 8007770:	d009      	beq.n	8007786 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f002 fc70 	bl	800a05c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f002 fc6c 	bl	800a05c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007784:	e01c      	b.n	80077c0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fbe2 	bl	8007f52 <USBD_CtlError>
              break;
 800778e:	e017      	b.n	80077c0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	885b      	ldrh	r3, [r3, #2]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d112      	bne.n	80077be <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f002 fc77 	bl	800a09a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fc99 	bl	80080e4 <USBD_CtlSendStatus>
              }
              break;
 80077b2:	e004      	b.n	80077be <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fbcb 	bl	8007f52 <USBD_CtlError>
              break;
 80077bc:	e000      	b.n	80077c0 <USBD_StdEPReq+0x14c>
              break;
 80077be:	bf00      	nop
          }
          break;
 80077c0:	e0aa      	b.n	8007918 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d002      	beq.n	80077d2 <USBD_StdEPReq+0x15e>
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d032      	beq.n	8007836 <USBD_StdEPReq+0x1c2>
 80077d0:	e097      	b.n	8007902 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <USBD_StdEPReq+0x174>
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d004      	beq.n	80077e8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fbb6 	bl	8007f52 <USBD_CtlError>
                break;
 80077e6:	e091      	b.n	800790c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da0b      	bge.n	8007808 <USBD_StdEPReq+0x194>
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	3310      	adds	r3, #16
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	3304      	adds	r3, #4
 8007806:	e00b      	b.n	8007820 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	3304      	adds	r3, #4
 8007820:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2202      	movs	r2, #2
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fbfa 	bl	8008028 <USBD_CtlSendData>
              break;
 8007834:	e06a      	b.n	800790c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800783a:	2b00      	cmp	r3, #0
 800783c:	da11      	bge.n	8007862 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	f003 020f 	and.w	r2, r3, #15
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4613      	mov	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	3318      	adds	r3, #24
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d117      	bne.n	8007888 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fb79 	bl	8007f52 <USBD_CtlError>
                  break;
 8007860:	e054      	b.n	800790c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fb66 	bl	8007f52 <USBD_CtlError>
                  break;
 8007886:	e041      	b.n	800790c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800788c:	2b00      	cmp	r3, #0
 800788e:	da0b      	bge.n	80078a8 <USBD_StdEPReq+0x234>
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	3310      	adds	r3, #16
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	3304      	adds	r3, #4
 80078a6:	e00b      	b.n	80078c0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	3304      	adds	r3, #4
 80078c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <USBD_StdEPReq+0x25a>
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b80      	cmp	r3, #128	; 0x80
 80078cc:	d103      	bne.n	80078d6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e00e      	b.n	80078f4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f002 fbfc 	bl	800a0d8 <USBD_LL_IsStallEP>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2201      	movs	r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e002      	b.n	80078f4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2202      	movs	r2, #2
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb94 	bl	8008028 <USBD_CtlSendData>
              break;
 8007900:	e004      	b.n	800790c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb24 	bl	8007f52 <USBD_CtlError>
              break;
 800790a:	bf00      	nop
          }
          break;
 800790c:	e004      	b.n	8007918 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fb1e 	bl	8007f52 <USBD_CtlError>
          break;
 8007916:	bf00      	nop
      }
      break;
 8007918:	e004      	b.n	8007924 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fb18 	bl	8007f52 <USBD_CtlError>
      break;
 8007922:	bf00      	nop
  }

  return ret;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	885b      	ldrh	r3, [r3, #2]
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	2b06      	cmp	r3, #6
 8007952:	f200 8128 	bhi.w	8007ba6 <USBD_GetDescriptor+0x276>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <USBD_GetDescriptor+0x2c>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007979 	.word	0x08007979
 8007960:	08007991 	.word	0x08007991
 8007964:	080079d1 	.word	0x080079d1
 8007968:	08007ba7 	.word	0x08007ba7
 800796c:	08007ba7 	.word	0x08007ba7
 8007970:	08007b47 	.word	0x08007b47
 8007974:	08007b73 	.word	0x08007b73
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
      break;
 800798e:	e112      	b.n	8007bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	7c1b      	ldrb	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10d      	bne.n	80079b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	f107 0208 	add.w	r2, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	2202      	movs	r2, #2
 80079b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079b2:	e100      	b.n	8007bb6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	f107 0208 	add.w	r2, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	2202      	movs	r2, #2
 80079cc:	701a      	strb	r2, [r3, #0]
      break;
 80079ce:	e0f2      	b.n	8007bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	f200 80ac 	bhi.w	8007b34 <USBD_GetDescriptor+0x204>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <USBD_GetDescriptor+0xb4>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	080079fd 	.word	0x080079fd
 80079e8:	08007a31 	.word	0x08007a31
 80079ec:	08007a65 	.word	0x08007a65
 80079f0:	08007a99 	.word	0x08007a99
 80079f4:	08007acd 	.word	0x08007acd
 80079f8:	08007b01 	.word	0x08007b01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7c12      	ldrb	r2, [r2, #16]
 8007a14:	f107 0108 	add.w	r1, r7, #8
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a1e:	e091      	b.n	8007b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa95 	bl	8007f52 <USBD_CtlError>
            err++;
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a2e:	e089      	b.n	8007b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	7c12      	ldrb	r2, [r2, #16]
 8007a48:	f107 0108 	add.w	r1, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a52:	e077      	b.n	8007b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa7b 	bl	8007f52 <USBD_CtlError>
            err++;
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	72fb      	strb	r3, [r7, #11]
          break;
 8007a62:	e06f      	b.n	8007b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	7c12      	ldrb	r2, [r2, #16]
 8007a7c:	f107 0108 	add.w	r1, r7, #8
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a86:	e05d      	b.n	8007b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa61 	bl	8007f52 <USBD_CtlError>
            err++;
 8007a90:	7afb      	ldrb	r3, [r7, #11]
 8007a92:	3301      	adds	r3, #1
 8007a94:	72fb      	strb	r3, [r7, #11]
          break;
 8007a96:	e055      	b.n	8007b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	7c12      	ldrb	r2, [r2, #16]
 8007ab0:	f107 0108 	add.w	r1, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aba:	e043      	b.n	8007b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa47 	bl	8007f52 <USBD_CtlError>
            err++;
 8007ac4:	7afb      	ldrb	r3, [r7, #11]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aca:	e03b      	b.n	8007b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7c12      	ldrb	r2, [r2, #16]
 8007ae4:	f107 0108 	add.w	r1, r7, #8
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aee:	e029      	b.n	8007b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fa2d 	bl	8007f52 <USBD_CtlError>
            err++;
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	3301      	adds	r3, #1
 8007afc:	72fb      	strb	r3, [r7, #11]
          break;
 8007afe:	e021      	b.n	8007b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7c12      	ldrb	r2, [r2, #16]
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b22:	e00f      	b.n	8007b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa13 	bl	8007f52 <USBD_CtlError>
            err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
          break;
 8007b32:	e007      	b.n	8007b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa0b 	bl	8007f52 <USBD_CtlError>
          err++;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007b42:	e038      	b.n	8007bb6 <USBD_GetDescriptor+0x286>
 8007b44:	e037      	b.n	8007bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7c1b      	ldrb	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d109      	bne.n	8007b62 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	f107 0208 	add.w	r2, r7, #8
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4798      	blx	r3
 8007b5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b60:	e029      	b.n	8007bb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9f4 	bl	8007f52 <USBD_CtlError>
        err++;
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b70:	e021      	b.n	8007bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7c1b      	ldrb	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10d      	bne.n	8007b96 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b82:	f107 0208 	add.w	r2, r7, #8
 8007b86:	4610      	mov	r0, r2
 8007b88:	4798      	blx	r3
 8007b8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	2207      	movs	r2, #7
 8007b92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b94:	e00f      	b.n	8007bb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f9da 	bl	8007f52 <USBD_CtlError>
        err++;
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba4:	e007      	b.n	8007bb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f9d2 	bl	8007f52 <USBD_CtlError>
      err++;
 8007bae:	7afb      	ldrb	r3, [r7, #11]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	72fb      	strb	r3, [r7, #11]
      break;
 8007bb4:	bf00      	nop
  }

  if (err != 0U)
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d11c      	bne.n	8007bf6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007bbc:	893b      	ldrh	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d011      	beq.n	8007be6 <USBD_GetDescriptor+0x2b6>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	88db      	ldrh	r3, [r3, #6]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	88da      	ldrh	r2, [r3, #6]
 8007bce:	893b      	ldrh	r3, [r7, #8]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	bf28      	it	cs
 8007bd4:	4613      	movcs	r3, r2
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bda:	893b      	ldrh	r3, [r7, #8]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa21 	bl	8008028 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	88db      	ldrh	r3, [r3, #6]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa78 	bl	80080e4 <USBD_CtlSendStatus>
 8007bf4:	e000      	b.n	8007bf8 <USBD_GetDescriptor+0x2c8>
    return;
 8007bf6:	bf00      	nop
    }
  }
}
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop

08007c00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	889b      	ldrh	r3, [r3, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d130      	bne.n	8007c74 <USBD_SetAddress+0x74>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	88db      	ldrh	r3, [r3, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d12c      	bne.n	8007c74 <USBD_SetAddress+0x74>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c20:	d828      	bhi.n	8007c74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	885b      	ldrh	r3, [r3, #2]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d104      	bne.n	8007c42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f989 	bl	8007f52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c40:	e01c      	b.n	8007c7c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7bfa      	ldrb	r2, [r7, #15]
 8007c46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 fa6f 	bl	800a132 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa45 	bl	80080e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c68:	e008      	b.n	8007c7c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c72:	e003      	b.n	8007c7c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f96b 	bl	8007f52 <USBD_CtlError>
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	4b41      	ldr	r3, [pc, #260]	; (8007d9c <USBD_SetConfig+0x118>)
 8007c96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c98:	4b40      	ldr	r3, [pc, #256]	; (8007d9c <USBD_SetConfig+0x118>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d904      	bls.n	8007caa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f955 	bl	8007f52 <USBD_CtlError>
 8007ca8:	e075      	b.n	8007d96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d002      	beq.n	8007cba <USBD_SetConfig+0x36>
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d023      	beq.n	8007d00 <USBD_SetConfig+0x7c>
 8007cb8:	e062      	b.n	8007d80 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007cba:	4b38      	ldr	r3, [pc, #224]	; (8007d9c <USBD_SetConfig+0x118>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01a      	beq.n	8007cf8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007cc2:	4b36      	ldr	r3, [pc, #216]	; (8007d9c <USBD_SetConfig+0x118>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cd4:	4b31      	ldr	r3, [pc, #196]	; (8007d9c <USBD_SetConfig+0x118>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff f9f0 	bl	80070c0 <USBD_SetClassConfig>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d104      	bne.n	8007cf0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f932 	bl	8007f52 <USBD_CtlError>
            return;
 8007cee:	e052      	b.n	8007d96 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f9f7 	bl	80080e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cf6:	e04e      	b.n	8007d96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f9f3 	bl	80080e4 <USBD_CtlSendStatus>
        break;
 8007cfe:	e04a      	b.n	8007d96 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d00:	4b26      	ldr	r3, [pc, #152]	; (8007d9c <USBD_SetConfig+0x118>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d112      	bne.n	8007d2e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d10:	4b22      	ldr	r3, [pc, #136]	; (8007d9c <USBD_SetConfig+0x118>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d1a:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <USBD_SetConfig+0x118>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff f9ec 	bl	80070fe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f9dc 	bl	80080e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d2c:	e033      	b.n	8007d96 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007d2e:	4b1b      	ldr	r3, [pc, #108]	; (8007d9c <USBD_SetConfig+0x118>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d01d      	beq.n	8007d78 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff f9da 	bl	80070fe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007d4a:	4b14      	ldr	r3, [pc, #80]	; (8007d9c <USBD_SetConfig+0x118>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d54:	4b11      	ldr	r3, [pc, #68]	; (8007d9c <USBD_SetConfig+0x118>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff f9b0 	bl	80070c0 <USBD_SetClassConfig>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d104      	bne.n	8007d70 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f8f2 	bl	8007f52 <USBD_CtlError>
            return;
 8007d6e:	e012      	b.n	8007d96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f9b7 	bl	80080e4 <USBD_CtlSendStatus>
        break;
 8007d76:	e00e      	b.n	8007d96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f9b3 	bl	80080e4 <USBD_CtlSendStatus>
        break;
 8007d7e:	e00a      	b.n	8007d96 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8e5 	bl	8007f52 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d88:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <USBD_SetConfig+0x118>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff f9b5 	bl	80070fe <USBD_ClrClassConfig>
        break;
 8007d94:	bf00      	nop
    }
  }
}
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	200003ac 	.word	0x200003ac

08007da0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	88db      	ldrh	r3, [r3, #6]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d004      	beq.n	8007dbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f8cc 	bl	8007f52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dba:	e021      	b.n	8007e00 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	db17      	blt.n	8007df6 <USBD_GetConfig+0x56>
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	dd02      	ble.n	8007dd0 <USBD_GetConfig+0x30>
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d00b      	beq.n	8007de6 <USBD_GetConfig+0x46>
 8007dce:	e012      	b.n	8007df6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	2201      	movs	r2, #1
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f922 	bl	8008028 <USBD_CtlSendData>
        break;
 8007de4:	e00c      	b.n	8007e00 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3304      	adds	r3, #4
 8007dea:	2201      	movs	r2, #1
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f91a 	bl	8008028 <USBD_CtlSendData>
        break;
 8007df4:	e004      	b.n	8007e00 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f8aa 	bl	8007f52 <USBD_CtlError>
        break;
 8007dfe:	bf00      	nop
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d81e      	bhi.n	8007e5c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d004      	beq.n	8007e30 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f892 	bl	8007f52 <USBD_CtlError>
        break;
 8007e2e:	e01a      	b.n	8007e66 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f043 0202 	orr.w	r2, r3, #2
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	2202      	movs	r2, #2
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f8e7 	bl	8008028 <USBD_CtlSendData>
      break;
 8007e5a:	e004      	b.n	8007e66 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f877 	bl	8007f52 <USBD_CtlError>
      break;
 8007e64:	bf00      	nop
  }
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	885b      	ldrh	r3, [r3, #2]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d106      	bne.n	8007e8e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f92b 	bl	80080e4 <USBD_CtlSendStatus>
  }
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d80b      	bhi.n	8007ec4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	885b      	ldrh	r3, [r3, #2]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d10c      	bne.n	8007ece <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f911 	bl	80080e4 <USBD_CtlSendStatus>
      }
      break;
 8007ec2:	e004      	b.n	8007ece <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f843 	bl	8007f52 <USBD_CtlError>
      break;
 8007ecc:	e000      	b.n	8007ed0 <USBD_ClrFeature+0x3a>
      break;
 8007ece:	bf00      	nop
  }
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	785a      	ldrb	r2, [r3, #1]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	3303      	adds	r3, #3
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	3304      	adds	r3, #4
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	3305      	adds	r3, #5
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	4413      	add	r3, r2
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	3306      	adds	r3, #6
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	3307      	adds	r3, #7
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	4413      	add	r3, r2
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	80da      	strh	r2, [r3, #6]

}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f002 f87c 	bl	800a05c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f002 f878 	bl	800a05c <USBD_LL_StallEP>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d032      	beq.n	8007ff0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f834 	bl	8007ff8 <USBD_GetLen>
 8007f90:	4603      	mov	r3, r0
 8007f92:	3301      	adds	r3, #1
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	75fa      	strb	r2, [r7, #23]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	7812      	ldrb	r2, [r2, #0]
 8007fae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	75fa      	strb	r2, [r7, #23]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4413      	add	r3, r2
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007fc0:	e012      	b.n	8007fe8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	60fa      	str	r2, [r7, #12]
 8007fc8:	7dfa      	ldrb	r2, [r7, #23]
 8007fca:	1c51      	adds	r1, r2, #1
 8007fcc:	75f9      	strb	r1, [r7, #23]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	75fa      	strb	r2, [r7, #23]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e8      	bne.n	8007fc2 <USBD_GetString+0x4e>
    }
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008004:	e005      	b.n	8008012 <USBD_GetLen+0x1a>
  {
    len++;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	3301      	adds	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3301      	adds	r3, #1
 8008010:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1f5      	bne.n	8008006 <USBD_GetLen+0xe>
  }

  return len;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2202      	movs	r2, #2
 800803a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	2100      	movs	r1, #0
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f002 f88d 	bl	800a170 <USBD_LL_Transmit>

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f002 f87b 	bl	800a170 <USBD_LL_Transmit>

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2203      	movs	r2, #3
 8008096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80080a2:	88fa      	ldrh	r2, [r7, #6]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	2100      	movs	r1, #0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f002 f880 	bl	800a1b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	2100      	movs	r1, #0
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f002 f86e 	bl	800a1b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2204      	movs	r2, #4
 80080f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080f4:	2300      	movs	r3, #0
 80080f6:	2200      	movs	r2, #0
 80080f8:	2100      	movs	r1, #0
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f002 f838 	bl	800a170 <USBD_LL_Transmit>

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2205      	movs	r2, #5
 8008116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f002 f848 	bl	800a1b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <get_struct>:

s_rec_flux rf;
s_rec_bus rb;

void get_struct(s_rec_flux* rf_2, s_rec_bus* rb_2)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
	rf_2 = &rf;
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <get_struct+0x20>)
 800813c:	607b      	str	r3, [r7, #4]
	rb_2 = &rb;
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <get_struct+0x24>)
 8008140:	603b      	str	r3, [r7, #0]
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20000640 	.word	0x20000640
 8008154:	20000668 	.word	0x20000668

08008158 <Read_SPI>:

void Read_SPI(uint8_t* Rx_SPI)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]


	if (byte_receive == 1)
 8008160:	4b20      	ldr	r3, [pc, #128]	; (80081e4 <Read_SPI+0x8c>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d139      	bne.n	80081dc <Read_SPI+0x84>
	{
		if(NB_trames == 0)
 8008168:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <Read_SPI+0x90>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d112      	bne.n	8008196 <Read_SPI+0x3e>
		{
			NB_trames += 1;
 8008170:	4b1d      	ldr	r3, [pc, #116]	; (80081e8 <Read_SPI+0x90>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <Read_SPI+0x90>)
 800817a:	701a      	strb	r2, [r3, #0]
			//NB_trames_max = Rx_SPI[0];
			NB_trames_max = 10;
 800817c:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <Read_SPI+0x94>)
 800817e:	220a      	movs	r2, #10
 8008180:	701a      	strb	r2, [r3, #0]
			tab_trames = (uint8_t*)malloc(NB_trames_max*sizeof(uint8_t));
 8008182:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <Read_SPI+0x94>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f002 f8c6 	bl	800a318 <malloc>
 800818c:	4603      	mov	r3, r0
 800818e:	461a      	mov	r2, r3
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <Read_SPI+0x98>)
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e011      	b.n	80081ba <Read_SPI+0x62>
		}else
		{
			if(NB_trames != 0)
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <Read_SPI+0x90>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00d      	beq.n	80081ba <Read_SPI+0x62>
			{
				tab_trames[NB_trames] = Rx_SPI[0];
 800819e:	4b14      	ldr	r3, [pc, #80]	; (80081f0 <Read_SPI+0x98>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <Read_SPI+0x90>)
 80081a4:	7812      	ldrb	r2, [r2, #0]
 80081a6:	4413      	add	r3, r2
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	7812      	ldrb	r2, [r2, #0]
 80081ac:	701a      	strb	r2, [r3, #0]
				NB_trames += 1;
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <Read_SPI+0x90>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <Read_SPI+0x90>)
 80081b8:	701a      	strb	r2, [r3, #0]
			}
		}
		if(NB_trames == NB_trames_max)
 80081ba:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <Read_SPI+0x90>)
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <Read_SPI+0x94>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d107      	bne.n	80081d6 <Read_SPI+0x7e>
		{
			NB_trames = 0;
 80081c6:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <Read_SPI+0x90>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
			//allocation_trame(tab_trames, &rf, &rb);
			allocation_trame(tab_trames);
 80081cc:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <Read_SPI+0x98>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f80f 	bl	80081f4 <allocation_trame>
		}
		byte_receive = 0;
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <Read_SPI+0x8c>)
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
	}
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20000680 	.word	0x20000680
 80081e8:	200003ad 	.word	0x200003ad
 80081ec:	200003ae 	.word	0x200003ae
 80081f0:	20000684 	.word	0x20000684

080081f4 <allocation_trame>:


void allocation_trame(uint8_t* tab_trames)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	if((tab_trames[1]== 2) && (tab_trames[2]== 3))//Analyse DVI
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3301      	adds	r3, #1
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d143      	bne.n	800828e <allocation_trame+0x9a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3302      	adds	r3, #2
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b03      	cmp	r3, #3
 800820e:	d13e      	bne.n	800828e <allocation_trame+0x9a>
	{
		rf.width = (tab_trames[3] << 8) + tab_trames[4];
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3303      	adds	r3, #3
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	3204      	adds	r2, #4
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	4413      	add	r3, r2
 8008220:	4a49      	ldr	r2, [pc, #292]	; (8008348 <allocation_trame+0x154>)
 8008222:	6013      	str	r3, [r2, #0]
		rf.height = (tab_trames[5] << 8) + tab_trames[6];
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3305      	adds	r3, #5
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	3206      	adds	r2, #6
 8008230:	7812      	ldrb	r2, [r2, #0]
 8008232:	4413      	add	r3, r2
 8008234:	4a44      	ldr	r2, [pc, #272]	; (8008348 <allocation_trame+0x154>)
 8008236:	6053      	str	r3, [r2, #4]
		rf.Vsync = (tab_trames[7] << 8) + tab_trames[8];
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3307      	adds	r3, #7
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	3208      	adds	r2, #8
 8008244:	7812      	ldrb	r2, [r2, #0]
 8008246:	4413      	add	r3, r2
 8008248:	4a3f      	ldr	r2, [pc, #252]	; (8008348 <allocation_trame+0x154>)
 800824a:	60d3      	str	r3, [r2, #12]
		rf.Hsync = (tab_trames[9] << 8) + tab_trames[10];
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3309      	adds	r3, #9
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	021b      	lsls	r3, r3, #8
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	320a      	adds	r2, #10
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	4413      	add	r3, r2
 800825c:	4a3a      	ldr	r2, [pc, #232]	; (8008348 <allocation_trame+0x154>)
 800825e:	6093      	str	r3, [r2, #8]
		rf.blankingV = (tab_trames[11] << 8) + tab_trames[12];
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	330b      	adds	r3, #11
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	320c      	adds	r2, #12
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	4413      	add	r3, r2
 8008270:	4a35      	ldr	r2, [pc, #212]	; (8008348 <allocation_trame+0x154>)
 8008272:	6153      	str	r3, [r2, #20]
		rf.blankingH = (tab_trames[13] << 8) + tab_trames[14];
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	330d      	adds	r3, #13
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	320e      	adds	r2, #14
 8008280:	7812      	ldrb	r2, [r2, #0]
 8008282:	4413      	add	r3, r2
 8008284:	4a30      	ldr	r2, [pc, #192]	; (8008348 <allocation_trame+0x154>)
 8008286:	6113      	str	r3, [r2, #16]
		rf.data_dispo_DVI = 1;
 8008288:	4b2f      	ldr	r3, [pc, #188]	; (8008348 <allocation_trame+0x154>)
 800828a:	2201      	movs	r2, #1
 800828c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if((tab_trames[1]== 2) && (tab_trames[2]== 1))//Analyse SDI
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3301      	adds	r3, #1
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d127      	bne.n	80082e8 <allocation_trame+0xf4>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3302      	adds	r3, #2
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d122      	bne.n	80082e8 <allocation_trame+0xf4>
	{
		rf.vidformat = tab_trames[3];
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3303      	adds	r3, #3
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	4b27      	ldr	r3, [pc, #156]	; (8008348 <allocation_trame+0x154>)
 80082ac:	61da      	str	r2, [r3, #28]
		rf.frameformat = tab_trames[4];
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3304      	adds	r3, #4
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	4b24      	ldr	r3, [pc, #144]	; (8008348 <allocation_trame+0x154>)
 80082b8:	619a      	str	r2, [r3, #24]
		rf.blankingH = (tab_trames[5] << 8) + tab_trames[6];
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3305      	adds	r3, #5
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	3206      	adds	r2, #6
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	4413      	add	r3, r2
 80082ca:	4a1f      	ldr	r2, [pc, #124]	; (8008348 <allocation_trame+0x154>)
 80082cc:	6113      	str	r3, [r2, #16]
		rf.blankingV = (tab_trames[7] << 8) + tab_trames[8];
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3307      	adds	r3, #7
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	3208      	adds	r2, #8
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	4413      	add	r3, r2
 80082de:	4a1a      	ldr	r2, [pc, #104]	; (8008348 <allocation_trame+0x154>)
 80082e0:	6153      	str	r3, [r2, #20]
		rf.data_dispo_SDI = 1;
 80082e2:	4b19      	ldr	r3, [pc, #100]	; (8008348 <allocation_trame+0x154>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	621a      	str	r2, [r3, #32]
	}
	if((tab_trames[1]== 1) && (tab_trames[2]== 1))//Réception BUS ID_Sys et ID_Cmd pas défini, 3 et 2 choisi par défaut
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3301      	adds	r3, #1
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d122      	bne.n	8008338 <allocation_trame+0x144>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3302      	adds	r3, #2
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d11d      	bne.n	8008338 <allocation_trame+0x144>
	{
		//Il manque le type de bus
		//un param data_dispo aussi ?
		rb.adresse = tab_trames[4];
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3304      	adds	r3, #4
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	4b11      	ldr	r3, [pc, #68]	; (800834c <allocation_trame+0x158>)
 8008306:	609a      	str	r2, [r3, #8]
		rb.taillemot = tab_trames[5];
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3305      	adds	r3, #5
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	4b0e      	ldr	r3, [pc, #56]	; (800834c <allocation_trame+0x158>)
 8008312:	605a      	str	r2, [r3, #4]
		rb.operateurbaud = tab_trames[6];
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3306      	adds	r3, #6
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <allocation_trame+0x158>)
 800831e:	60da      	str	r2, [r3, #12]
		rb.facteurbaud = tab_trames[7];
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3307      	adds	r3, #7
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	4b08      	ldr	r3, [pc, #32]	; (800834c <allocation_trame+0x158>)
 800832a:	611a      	str	r2, [r3, #16]
		rb.motbinaire = tab_trames[8]; //créer un tableau int *motbiniare dans la struct pour pouvoir stocker plusieur bytes ???
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3308      	adds	r3, #8
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <allocation_trame+0x158>)
 8008336:	615a      	str	r2, [r3, #20]
	}
	free(tab_trames);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 fff5 	bl	800a328 <free>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000640 	.word	0x20000640
 800834c:	20000668 	.word	0x20000668

08008350 <Send_SPI>:
	}
	free(tab_trames);
}*/

void Send_SPI(uint8_t* Tx)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8008358:	2200      	movs	r2, #0
 800835a:	2110      	movs	r1, #16
 800835c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008360:	f7f8 fdc2 	bl	8000ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, Tx, 1, 100);  // write data to register
 8008364:	2364      	movs	r3, #100	; 0x64
 8008366:	2201      	movs	r2, #1
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4808      	ldr	r0, [pc, #32]	; (800838c <Send_SPI+0x3c>)
 800836c:	f7fb fc87 	bl	8003c7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008370:	2201      	movs	r2, #1
 8008372:	2110      	movs	r1, #16
 8008374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008378:	f7f8 fdb6 	bl	8000ee8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800837c:	2064      	movs	r0, #100	; 0x64
 800837e:	f7f8 faf5 	bl	800096c <HAL_Delay>
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	200005d8 	.word	0x200005d8

08008390 <Envoie_Bus_com>:

void Envoie_Bus_com(s_gen_bus* gb)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	uint8_t Tx[1];

	if(gb->commencer == 1)//trames prêteent à être envoyées
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	2b01      	cmp	r3, #1
 800839e:	d153      	bne.n	8008448 <Envoie_Bus_com+0xb8>
	{
		Tx[0] = gb->octet;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80083a8:	f107 030c 	add.w	r3, r7, #12
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff ffcf 	bl	8008350 <Send_SPI>

		Tx[0] = 3;//ID_Sys pas défini !!! 3 choisi par défaut
 80083b2:	2303      	movs	r3, #3
 80083b4:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff ffc8 	bl	8008350 <Send_SPI>

		Tx[0] = 1; //ID_cmd pas défini !!! 1 choisi par défaut
 80083c0:	2301      	movs	r3, #1
 80083c2:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80083c4:	f107 030c 	add.w	r3, r7, #12
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff ffc1 	bl	8008350 <Send_SPI>

		Tx[0] = gb->protocole;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80083d6:	f107 030c 	add.w	r3, r7, #12
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff ffb8 	bl	8008350 <Send_SPI>

		if(gb->protocole == 2)//protocole I2C envoie de l'adresse
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d108      	bne.n	80083fa <Envoie_Bus_com+0x6a>
		{
			Tx[0] = gb->adresse;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	733b      	strb	r3, [r7, #12]
			Send_SPI(Tx);
 80083f0:	f107 030c 	add.w	r3, r7, #12
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff ffab 	bl	8008350 <Send_SPI>
		}

		Tx[0] = gb->taillemot;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008402:	f107 030c 	add.w	r3, r7, #12
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff ffa2 	bl	8008350 <Send_SPI>

		Tx[0] = gb->operateur;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008414:	f107 030c 	add.w	r3, r7, #12
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff ff99 	bl	8008350 <Send_SPI>

		Tx[0] = gb->facteurbaud;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008426:	f107 030c 	add.w	r3, r7, #12
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff ff90 	bl	8008350 <Send_SPI>

		Tx[0] = gb->motbinaire;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008438:	f107 030c 	add.w	r3, r7, #12
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff ff87 	bl	8008350 <Send_SPI>

		gb->commencer = 0; //remise à 0 <=> trames envoyées
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <Envoie_DVI>:

void Envoie_DVI(s_gen_flux* gf)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	uint8_t Tx[1];

	if(gf->commencer == 1)//trames prêteent à être envoyées
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845c:	2b01      	cmp	r3, #1
 800845e:	f040 80c8 	bne.w	80085f2 <Envoie_DVI+0x1a2>
	{
		Tx[0] = 22;//nombre d'octets
 8008462:	2316      	movs	r3, #22
 8008464:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008466:	f107 030c 	add.w	r3, r7, #12
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff ff70 	bl	8008350 <Send_SPI>

		Tx[0] = 1;//ID_Sys
 8008470:	2301      	movs	r3, #1
 8008472:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff ff69 	bl	8008350 <Send_SPI>

		Tx[0] = 1; //ID_cmd
 800847e:	2301      	movs	r3, #1
 8008480:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008482:	f107 030c 	add.w	r3, r7, #12
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff ff62 	bl	8008350 <Send_SPI>

		Tx[0] = gf->hlength; //hlenght sur 2 bytes, ici les 8 premiers bits
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008494:	f107 030c 	add.w	r3, r7, #12
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff ff59 	bl	8008350 <Send_SPI>

		Tx[0] = ((gf->hlength)>>8); //hlenght sur 2 bytes, ici les 8 derneirs bits
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	121b      	asrs	r3, r3, #8
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff ff4f 	bl	8008350 <Send_SPI>

		Tx[0] = gf->width; //width sur 2 bytes, ici les 8 premiers bits
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80084ba:	f107 030c 	add.w	r3, r7, #12
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff ff46 	bl	8008350 <Send_SPI>

		Tx[0] = ((gf->width)>>8); //width sur 2 bytes, ici les 8 derneirs bits
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	121b      	asrs	r3, r3, #8
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80084ce:	f107 030c 	add.w	r3, r7, #12
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff ff3c 	bl	8008350 <Send_SPI>

		Tx[0] = gf->hfp;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80084e0:	f107 030c 	add.w	r3, r7, #12
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff ff33 	bl	8008350 <Send_SPI>

		Tx[0] = gf->hsyncpulse;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80084f2:	f107 030c 	add.w	r3, r7, #12
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ff2a 	bl	8008350 <Send_SPI>

		Tx[0] = gf->hbp; //hbp sur 2 bytes, ici les 8 premiers bits
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008504:	f107 030c 	add.w	r3, r7, #12
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff ff21 	bl	8008350 <Send_SPI>

		Tx[0] = ((gf->hbp)>>8); //hbp sur 2 bytes, ici les 8 derneirs bits
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	121b      	asrs	r3, r3, #8
 8008514:	b2db      	uxtb	r3, r3
 8008516:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008518:	f107 030c 	add.w	r3, r7, #12
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff ff17 	bl	8008350 <Send_SPI>

		Tx[0] = gf->hpolsync;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	b2db      	uxtb	r3, r3
 8008528:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff ff0e 	bl	8008350 <Send_SPI>

		Tx[0] = gf->vlength; //vlength sur 2 bytes, ici les 8 premiers bits
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	b2db      	uxtb	r3, r3
 800853a:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 800853c:	f107 030c 	add.w	r3, r7, #12
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff ff05 	bl	8008350 <Send_SPI>

		Tx[0] = ((gf->vlength)>>8); //vlength sur 2 bytes, ici les 8 derneirs bits
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	121b      	asrs	r3, r3, #8
 800854c:	b2db      	uxtb	r3, r3
 800854e:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008550:	f107 030c 	add.w	r3, r7, #12
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fefb 	bl	8008350 <Send_SPI>

		Tx[0] = gf->height; //vlength sur 2 bytes, ici les 8 premiers bits
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008562:	f107 030c 	add.w	r3, r7, #12
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fef2 	bl	8008350 <Send_SPI>

		Tx[0] = ((gf->height)>>8); //vlength sur 2 bytes, ici les 8 derneirs bits
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	121b      	asrs	r3, r3, #8
 8008572:	b2db      	uxtb	r3, r3
 8008574:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008576:	f107 030c 	add.w	r3, r7, #12
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff fee8 	bl	8008350 <Send_SPI>

		Tx[0] = gf->vfp;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 8008588:	f107 030c 	add.w	r3, r7, #12
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fedf 	bl	8008350 <Send_SPI>

		Tx[0] = gf->vsyncpulse;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	b2db      	uxtb	r3, r3
 8008598:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 800859a:	f107 030c 	add.w	r3, r7, #12
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff fed6 	bl	8008350 <Send_SPI>

		Tx[0] = gf->vbp;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff fecd 	bl	8008350 <Send_SPI>

		Tx[0] = gf->vpolsync;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80085be:	f107 030c 	add.w	r3, r7, #12
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fec4 	bl	8008350 <Send_SPI>

		Tx[0] = gf->pclock;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80085d0:	f107 030c 	add.w	r3, r7, #12
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff febb 	bl	8008350 <Send_SPI>

		Tx[0] = gf->mire;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	733b      	strb	r3, [r7, #12]
		Send_SPI(Tx);
 80085e2:	f107 030c 	add.w	r3, r7, #12
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff feb2 	bl	8008350 <Send_SPI>

		gf->commencer = 0; //remise à 0 <=> trames envoyées
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	80fb      	strh	r3, [r7, #6]
	uint8_t  Rx_SPI[1];
	HAL_SPI_Receive(&hspi1, Rx_SPI, 1, 100);
 8008606:	f107 010c 	add.w	r1, r7, #12
 800860a:	2364      	movs	r3, #100	; 0x64
 800860c:	2201      	movs	r2, #1
 800860e:	4807      	ldr	r0, [pc, #28]	; (800862c <HAL_GPIO_EXTI_Callback+0x30>)
 8008610:	f7fb fca3 	bl	8003f5a <HAL_SPI_Receive>
	byte_receive = 1;
 8008614:	4b06      	ldr	r3, [pc, #24]	; (8008630 <HAL_GPIO_EXTI_Callback+0x34>)
 8008616:	2201      	movs	r2, #1
 8008618:	701a      	strb	r2, [r3, #0]
	Read_SPI(Rx_SPI);
 800861a:	f107 030c 	add.w	r3, r7, #12
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fd9a 	bl	8008158 <Read_SPI>
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	200005d8 	.word	0x200005d8
 8008630:	20000680 	.word	0x20000680

08008634 <s_gen_flux_config>:
/* Privates Variables --------------------------------------------------------*/
extern uint8_t buffer_verif[140];

/* Codes ---------------------------------------------------------------------*/
void s_gen_flux_config(s_gen_flux* gf)
{   help();
 8008634:	b580      	push	{r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af02      	add	r7, sp, #8
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	f000 fb24 	bl	8008c88 <help>
	uint8_t test[20], dummy[2];
    sscanf((char *) buffer_verif, "%s", (char *) test);
 8008640:	f107 0310 	add.w	r3, r7, #16
 8008644:	461a      	mov	r2, r3
 8008646:	499f      	ldr	r1, [pc, #636]	; (80088c4 <s_gen_flux_config+0x290>)
 8008648:	489f      	ldr	r0, [pc, #636]	; (80088c8 <s_gen_flux_config+0x294>)
 800864a:	f001 ff6f 	bl	800a52c <siscanf>

    if(memcmp(test, "genFlux", strlen("genFlux")) == 0)
 800864e:	f107 0310 	add.w	r3, r7, #16
 8008652:	2207      	movs	r2, #7
 8008654:	499d      	ldr	r1, [pc, #628]	; (80088cc <s_gen_flux_config+0x298>)
 8008656:	4618      	mov	r0, r3
 8008658:	f001 fe6e 	bl	800a338 <memcmp>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 816b 	bne.w	800893a <s_gen_flux_config+0x306>
    {
        char *p = strstr((char *) buffer_verif, "-r");
 8008664:	499a      	ldr	r1, [pc, #616]	; (80088d0 <s_gen_flux_config+0x29c>)
 8008666:	4898      	ldr	r0, [pc, #608]	; (80088c8 <s_gen_flux_config+0x294>)
 8008668:	f001 ff8c 	bl	800a584 <strstr>
 800866c:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d01a      	beq.n	80086aa <s_gen_flux_config+0x76>
            sscanf(p, "%s %d %s %d", dummy, &gf->width, dummy, &gf->height);
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3304      	adds	r3, #4
 800867a:	f107 020c 	add.w	r2, r7, #12
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	f107 030c 	add.w	r3, r7, #12
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	460b      	mov	r3, r1
 8008688:	4992      	ldr	r1, [pc, #584]	; (80088d4 <s_gen_flux_config+0x2a0>)
 800868a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800868c:	f001 ff4e 	bl	800a52c <siscanf>
            if((gf->width==0) || (gf->height==0)) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <s_gen_flux_config+0x6c>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d104      	bne.n	80086aa <s_gen_flux_config+0x76>
            	erreur();
 80086a0:	2108      	movs	r1, #8
 80086a2:	488d      	ldr	r0, [pc, #564]	; (80088d8 <s_gen_flux_config+0x2a4>)
 80086a4:	f001 f92a 	bl	80098fc <envoiePCSTM>
 80086a8:	e147      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }

        p = strstr((char *) buffer_verif, "-m");
 80086aa:	498c      	ldr	r1, [pc, #560]	; (80088dc <s_gen_flux_config+0x2a8>)
 80086ac:	4886      	ldr	r0, [pc, #536]	; (80088c8 <s_gen_flux_config+0x294>)
 80086ae:	f001 ff69 	bl	800a584 <strstr>
 80086b2:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d014      	beq.n	80086e4 <s_gen_flux_config+0xb0>
            sscanf(p, "%s %d", dummy, &(gf->mire));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3308      	adds	r3, #8
 80086be:	f107 020c 	add.w	r2, r7, #12
 80086c2:	4987      	ldr	r1, [pc, #540]	; (80088e0 <s_gen_flux_config+0x2ac>)
 80086c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086c6:	f001 ff31 	bl	800a52c <siscanf>
            if((gf->mire == 0) || (gf->mire > N_MIRES)) {
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <s_gen_flux_config+0xa6>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b0a      	cmp	r3, #10
 80086d8:	dd04      	ble.n	80086e4 <s_gen_flux_config+0xb0>
            	erreur();
 80086da:	2108      	movs	r1, #8
 80086dc:	487e      	ldr	r0, [pc, #504]	; (80088d8 <s_gen_flux_config+0x2a4>)
 80086de:	f001 f90d 	bl	80098fc <envoiePCSTM>
 80086e2:	e12a      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }

        p = strstr((char *) buffer_verif, "-s");
 80086e4:	497f      	ldr	r1, [pc, #508]	; (80088e4 <s_gen_flux_config+0x2b0>)
 80086e6:	4878      	ldr	r0, [pc, #480]	; (80088c8 <s_gen_flux_config+0x294>)
 80086e8:	f001 ff4c 	bl	800a584 <strstr>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d014      	beq.n	800871e <s_gen_flux_config+0xea>
            sscanf(p, "%s %d", dummy, &(gf->standard));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	330c      	adds	r3, #12
 80086f8:	f107 020c 	add.w	r2, r7, #12
 80086fc:	4978      	ldr	r1, [pc, #480]	; (80088e0 <s_gen_flux_config+0x2ac>)
 80086fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008700:	f001 ff14 	bl	800a52c <siscanf>
            if((gf->standard==0) || (gf->standard > N_STANDARDS)) {
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <s_gen_flux_config+0xe0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b02      	cmp	r3, #2
 8008712:	dd04      	ble.n	800871e <s_gen_flux_config+0xea>
            	erreur();
 8008714:	2108      	movs	r1, #8
 8008716:	4870      	ldr	r0, [pc, #448]	; (80088d8 <s_gen_flux_config+0x2a4>)
 8008718:	f001 f8f0 	bl	80098fc <envoiePCSTM>
 800871c:	e10d      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }

        p = strstr((char *) buffer_verif, "-f");
 800871e:	4972      	ldr	r1, [pc, #456]	; (80088e8 <s_gen_flux_config+0x2b4>)
 8008720:	4869      	ldr	r0, [pc, #420]	; (80088c8 <s_gen_flux_config+0x294>)
 8008722:	f001 ff2f 	bl	800a584 <strstr>
 8008726:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01c      	beq.n	8008768 <s_gen_flux_config+0x134>
            sscanf(p, "%s %d %s %d", dummy, &gf->hfp, dummy, &gf->vfp);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f103 0110 	add.w	r1, r3, #16
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3314      	adds	r3, #20
 8008738:	f107 020c 	add.w	r2, r7, #12
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	f107 030c 	add.w	r3, r7, #12
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	460b      	mov	r3, r1
 8008746:	4963      	ldr	r1, [pc, #396]	; (80088d4 <s_gen_flux_config+0x2a0>)
 8008748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800874a:	f001 feef 	bl	800a52c <siscanf>
            if((gf->hfp==0) || (gf->vfp==0)) {
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <s_gen_flux_config+0x12a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d104      	bne.n	8008768 <s_gen_flux_config+0x134>
            	erreur();
 800875e:	2108      	movs	r1, #8
 8008760:	485d      	ldr	r0, [pc, #372]	; (80088d8 <s_gen_flux_config+0x2a4>)
 8008762:	f001 f8cb 	bl	80098fc <envoiePCSTM>
 8008766:	e0e8      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }
        p = strstr((char *) buffer_verif, "-b");
 8008768:	4960      	ldr	r1, [pc, #384]	; (80088ec <s_gen_flux_config+0x2b8>)
 800876a:	4857      	ldr	r0, [pc, #348]	; (80088c8 <s_gen_flux_config+0x294>)
 800876c:	f001 ff0a 	bl	800a584 <strstr>
 8008770:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01c      	beq.n	80087b2 <s_gen_flux_config+0x17e>
            sscanf(p, "%s %d %s %d", dummy, &gf->hbp, dummy, &gf->vbp);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f103 0118 	add.w	r1, r3, #24
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	331c      	adds	r3, #28
 8008782:	f107 020c 	add.w	r2, r7, #12
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	f107 030c 	add.w	r3, r7, #12
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	460b      	mov	r3, r1
 8008790:	4950      	ldr	r1, [pc, #320]	; (80088d4 <s_gen_flux_config+0x2a0>)
 8008792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008794:	f001 feca 	bl	800a52c <siscanf>
            if((gf->hbp==0) || (gf->vbp==0)) {
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <s_gen_flux_config+0x174>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <s_gen_flux_config+0x17e>
            	erreur();
 80087a8:	2108      	movs	r1, #8
 80087aa:	484b      	ldr	r0, [pc, #300]	; (80088d8 <s_gen_flux_config+0x2a4>)
 80087ac:	f001 f8a6 	bl	80098fc <envoiePCSTM>
 80087b0:	e0c3      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }
        p = strstr((char *) buffer_verif, "-l");
 80087b2:	494f      	ldr	r1, [pc, #316]	; (80088f0 <s_gen_flux_config+0x2bc>)
 80087b4:	4844      	ldr	r0, [pc, #272]	; (80088c8 <s_gen_flux_config+0x294>)
 80087b6:	f001 fee5 	bl	800a584 <strstr>
 80087ba:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01c      	beq.n	80087fc <s_gen_flux_config+0x1c8>
            sscanf(p, "%s %d %s %d", dummy, &gf->hlength, dummy, &gf->vlength);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f103 0120 	add.w	r1, r3, #32
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3324      	adds	r3, #36	; 0x24
 80087cc:	f107 020c 	add.w	r2, r7, #12
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	f107 030c 	add.w	r3, r7, #12
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	460b      	mov	r3, r1
 80087da:	493e      	ldr	r1, [pc, #248]	; (80088d4 <s_gen_flux_config+0x2a0>)
 80087dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087de:	f001 fea5 	bl	800a52c <siscanf>
            if((gf->hlength==0) || (gf->vlength==0)) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <s_gen_flux_config+0x1be>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <s_gen_flux_config+0x1c8>
            	erreur();
 80087f2:	2108      	movs	r1, #8
 80087f4:	4838      	ldr	r0, [pc, #224]	; (80088d8 <s_gen_flux_config+0x2a4>)
 80087f6:	f001 f881 	bl	80098fc <envoiePCSTM>
 80087fa:	e09e      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }
        p = strstr((char *) buffer_verif, "-a");
 80087fc:	493d      	ldr	r1, [pc, #244]	; (80088f4 <s_gen_flux_config+0x2c0>)
 80087fe:	4832      	ldr	r0, [pc, #200]	; (80088c8 <s_gen_flux_config+0x294>)
 8008800:	f001 fec0 	bl	800a584 <strstr>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01c      	beq.n	8008846 <s_gen_flux_config+0x212>
            sscanf(p, "%s %d %s %d", dummy, &gf->hsyncpulse, dummy, &gf->vsyncpulse);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	332c      	adds	r3, #44	; 0x2c
 8008816:	f107 020c 	add.w	r2, r7, #12
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	f107 030c 	add.w	r3, r7, #12
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	460b      	mov	r3, r1
 8008824:	492b      	ldr	r1, [pc, #172]	; (80088d4 <s_gen_flux_config+0x2a0>)
 8008826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008828:	f001 fe80 	bl	800a52c <siscanf>
            if((gf->hsyncpulse==0) || (gf->vsyncpulse==0)) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <s_gen_flux_config+0x208>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <s_gen_flux_config+0x212>
            	erreur();
 800883c:	2108      	movs	r1, #8
 800883e:	4826      	ldr	r0, [pc, #152]	; (80088d8 <s_gen_flux_config+0x2a4>)
 8008840:	f001 f85c 	bl	80098fc <envoiePCSTM>
 8008844:	e079      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }
        p = strstr((char *) buffer_verif, "-d");
 8008846:	492c      	ldr	r1, [pc, #176]	; (80088f8 <s_gen_flux_config+0x2c4>)
 8008848:	481f      	ldr	r0, [pc, #124]	; (80088c8 <s_gen_flux_config+0x294>)
 800884a:	f001 fe9b 	bl	800a584 <strstr>
 800884e:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01c      	beq.n	8008890 <s_gen_flux_config+0x25c>
            sscanf(p, "%s %d %s %d", dummy, &gf->hpolsync, dummy, &gf->vpolsync);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3334      	adds	r3, #52	; 0x34
 8008860:	f107 020c 	add.w	r2, r7, #12
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	460b      	mov	r3, r1
 800886e:	4919      	ldr	r1, [pc, #100]	; (80088d4 <s_gen_flux_config+0x2a0>)
 8008870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008872:	f001 fe5b 	bl	800a52c <siscanf>
            if((gf->hpolsync==0) || (gf->vpolsync==0)) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <s_gen_flux_config+0x252>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	2b00      	cmp	r3, #0
 8008884:	d104      	bne.n	8008890 <s_gen_flux_config+0x25c>
            	erreur();
 8008886:	2108      	movs	r1, #8
 8008888:	4813      	ldr	r0, [pc, #76]	; (80088d8 <s_gen_flux_config+0x2a4>)
 800888a:	f001 f837 	bl	80098fc <envoiePCSTM>
 800888e:	e054      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }
        p = strstr((char *) buffer_verif, "-p");
 8008890:	491a      	ldr	r1, [pc, #104]	; (80088fc <s_gen_flux_config+0x2c8>)
 8008892:	480d      	ldr	r0, [pc, #52]	; (80088c8 <s_gen_flux_config+0x294>)
 8008894:	f001 fe76 	bl	800a584 <strstr>
 8008898:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	2b00      	cmp	r3, #0
 800889e:	d02f      	beq.n	8008900 <s_gen_flux_config+0x2cc>
            sscanf(p, "%s %d", dummy, &gf->pclock);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3338      	adds	r3, #56	; 0x38
 80088a4:	f107 020c 	add.w	r2, r7, #12
 80088a8:	490d      	ldr	r1, [pc, #52]	; (80088e0 <s_gen_flux_config+0x2ac>)
 80088aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088ac:	f001 fe3e 	bl	800a52c <siscanf>
            if(gf->pclock==0) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d123      	bne.n	8008900 <s_gen_flux_config+0x2cc>
            	erreur();
 80088b8:	2108      	movs	r1, #8
 80088ba:	4807      	ldr	r0, [pc, #28]	; (80088d8 <s_gen_flux_config+0x2a4>)
 80088bc:	f001 f81e 	bl	80098fc <envoiePCSTM>
 80088c0:	e03b      	b.n	800893a <s_gen_flux_config+0x306>
 80088c2:	bf00      	nop
 80088c4:	0800b5b4 	.word	0x0800b5b4
 80088c8:	20000368 	.word	0x20000368
 80088cc:	0800b5b8 	.word	0x0800b5b8
 80088d0:	0800b5c0 	.word	0x0800b5c0
 80088d4:	0800b5c4 	.word	0x0800b5c4
 80088d8:	0800b5d0 	.word	0x0800b5d0
 80088dc:	0800b5dc 	.word	0x0800b5dc
 80088e0:	0800b5e0 	.word	0x0800b5e0
 80088e4:	0800b5e8 	.word	0x0800b5e8
 80088e8:	0800b5ec 	.word	0x0800b5ec
 80088ec:	0800b5f0 	.word	0x0800b5f0
 80088f0:	0800b5f4 	.word	0x0800b5f4
 80088f4:	0800b5f8 	.word	0x0800b5f8
 80088f8:	0800b5fc 	.word	0x0800b5fc
 80088fc:	0800b600 	.word	0x0800b600
            }
        }

        p = strstr((char *) buffer_verif, "-c");
 8008900:	490f      	ldr	r1, [pc, #60]	; (8008940 <s_gen_flux_config+0x30c>)
 8008902:	4810      	ldr	r0, [pc, #64]	; (8008944 <s_gen_flux_config+0x310>)
 8008904:	f001 fe3e 	bl	800a584 <strstr>
 8008908:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	2b00      	cmp	r3, #0
 800890e:	d010      	beq.n	8008932 <s_gen_flux_config+0x2fe>
            sscanf(p, "%s %d", dummy, &(gf->commencer));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	333c      	adds	r3, #60	; 0x3c
 8008914:	f107 020c 	add.w	r2, r7, #12
 8008918:	490b      	ldr	r1, [pc, #44]	; (8008948 <s_gen_flux_config+0x314>)
 800891a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800891c:	f001 fe06 	bl	800a52c <siscanf>
            if(gf->commencer > N_COMMENCE) {
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008924:	2b01      	cmp	r3, #1
 8008926:	dd04      	ble.n	8008932 <s_gen_flux_config+0x2fe>
            	erreur();
 8008928:	2108      	movs	r1, #8
 800892a:	4808      	ldr	r0, [pc, #32]	; (800894c <s_gen_flux_config+0x318>)
 800892c:	f000 ffe6 	bl	80098fc <envoiePCSTM>
 8008930:	e003      	b.n	800893a <s_gen_flux_config+0x306>
            }
        }

        confirmationCMD(GENERATION_FLUX_CMD, (void*) gf);
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	2001      	movs	r0, #1
 8008936:	f000 fc05 	bl	8009144 <confirmationCMD>
    }


}
 800893a:	3728      	adds	r7, #40	; 0x28
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	0800b604 	.word	0x0800b604
 8008944:	20000368 	.word	0x20000368
 8008948:	0800b5e0 	.word	0x0800b5e0
 800894c:	0800b5d0 	.word	0x0800b5d0

08008950 <s_gen_bus_config>:

void s_gen_bus_config(s_gen_bus* gb)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	; 0x28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
    uint8_t test[20], dummy[2];
    sscanf((char *) buffer_verif, "%s", (char *) test);
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	461a      	mov	r2, r3
 800895e:	4996      	ldr	r1, [pc, #600]	; (8008bb8 <s_gen_bus_config+0x268>)
 8008960:	4896      	ldr	r0, [pc, #600]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008962:	f001 fde3 	bl	800a52c <siscanf>

    if(memcmp(test, "genBus", strlen("genBus")) == 0)
 8008966:	f107 0310 	add.w	r3, r7, #16
 800896a:	2206      	movs	r2, #6
 800896c:	4994      	ldr	r1, [pc, #592]	; (8008bc0 <s_gen_bus_config+0x270>)
 800896e:	4618      	mov	r0, r3
 8008970:	f001 fce2 	bl	800a338 <memcmp>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 811a 	bne.w	8008bb0 <s_gen_bus_config+0x260>
    {
        char *p = strstr((char *) buffer_verif, "-p");
 800897c:	4991      	ldr	r1, [pc, #580]	; (8008bc4 <s_gen_bus_config+0x274>)
 800897e:	488f      	ldr	r0, [pc, #572]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008980:	f001 fe00 	bl	800a584 <strstr>
 8008984:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	d013      	beq.n	80089b4 <s_gen_bus_config+0x64>
            sscanf(p, "%s %d", dummy, &gb->protocole);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f107 020c 	add.w	r2, r7, #12
 8008992:	498d      	ldr	r1, [pc, #564]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008996:	f001 fdc9 	bl	800a52c <siscanf>
            if((gb->protocole==0)|| (gb->protocole > N_PROTOCOLE)) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <s_gen_bus_config+0x5a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	dd04      	ble.n	80089b4 <s_gen_bus_config+0x64>
            	erreur();
 80089aa:	2108      	movs	r1, #8
 80089ac:	4887      	ldr	r0, [pc, #540]	; (8008bcc <s_gen_bus_config+0x27c>)
 80089ae:	f000 ffa5 	bl	80098fc <envoiePCSTM>
 80089b2:	e0fd      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-f");
 80089b4:	4986      	ldr	r1, [pc, #536]	; (8008bd0 <s_gen_bus_config+0x280>)
 80089b6:	4881      	ldr	r0, [pc, #516]	; (8008bbc <s_gen_bus_config+0x26c>)
 80089b8:	f001 fde4 	bl	800a584 <strstr>
 80089bc:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d010      	beq.n	80089e6 <s_gen_bus_config+0x96>
            sscanf(p, "%s %d", dummy, &(gb->freq));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3304      	adds	r3, #4
 80089c8:	f107 020c 	add.w	r2, r7, #12
 80089cc:	497e      	ldr	r1, [pc, #504]	; (8008bc8 <s_gen_bus_config+0x278>)
 80089ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d0:	f001 fdac 	bl	800a52c <siscanf>
            if(gb->freq == 0) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <s_gen_bus_config+0x96>
            	erreur();
 80089dc:	2108      	movs	r1, #8
 80089de:	487b      	ldr	r0, [pc, #492]	; (8008bcc <s_gen_bus_config+0x27c>)
 80089e0:	f000 ff8c 	bl	80098fc <envoiePCSTM>
 80089e4:	e0e4      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-o");
 80089e6:	497b      	ldr	r1, [pc, #492]	; (8008bd4 <s_gen_bus_config+0x284>)
 80089e8:	4874      	ldr	r0, [pc, #464]	; (8008bbc <s_gen_bus_config+0x26c>)
 80089ea:	f001 fdcb 	bl	800a584 <strstr>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d010      	beq.n	8008a18 <s_gen_bus_config+0xc8>
            sscanf(p, "%s %d", dummy, &(gb->octet));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3308      	adds	r3, #8
 80089fa:	f107 020c 	add.w	r2, r7, #12
 80089fe:	4972      	ldr	r1, [pc, #456]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a02:	f001 fd93 	bl	800a52c <siscanf>
            if(gb->octet==0) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <s_gen_bus_config+0xc8>
            	erreur();
 8008a0e:	2108      	movs	r1, #8
 8008a10:	486e      	ldr	r0, [pc, #440]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008a12:	f000 ff73 	bl	80098fc <envoiePCSTM>
 8008a16:	e0cb      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-m");
 8008a18:	496f      	ldr	r1, [pc, #444]	; (8008bd8 <s_gen_bus_config+0x288>)
 8008a1a:	4868      	ldr	r0, [pc, #416]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008a1c:	f001 fdb2 	bl	800a584 <strstr>
 8008a20:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d010      	beq.n	8008a4a <s_gen_bus_config+0xfa>
            sscanf(p, "%s %d", dummy, &(gb->motbinaire));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	f107 020c 	add.w	r2, r7, #12
 8008a30:	4965      	ldr	r1, [pc, #404]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008a32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a34:	f001 fd7a 	bl	800a52c <siscanf>
            if(gb->motbinaire==0) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <s_gen_bus_config+0xfa>
            	erreur();
 8008a40:	2108      	movs	r1, #8
 8008a42:	4862      	ldr	r0, [pc, #392]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008a44:	f000 ff5a 	bl	80098fc <envoiePCSTM>
 8008a48:	e0b2      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-i");
 8008a4a:	4964      	ldr	r1, [pc, #400]	; (8008bdc <s_gen_bus_config+0x28c>)
 8008a4c:	485b      	ldr	r0, [pc, #364]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008a4e:	f001 fd99 	bl	800a584 <strstr>
 8008a52:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d010      	beq.n	8008a7c <s_gen_bus_config+0x12c>
            sscanf(p, "%s %d", dummy, &(gb->taillemot));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	f107 020c 	add.w	r2, r7, #12
 8008a62:	4959      	ldr	r1, [pc, #356]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a66:	f001 fd61 	bl	800a52c <siscanf>
            if(gb->taillemot == 0) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d104      	bne.n	8008a7c <s_gen_bus_config+0x12c>
            	erreur();
 8008a72:	2108      	movs	r1, #8
 8008a74:	4855      	ldr	r0, [pc, #340]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008a76:	f000 ff41 	bl	80098fc <envoiePCSTM>
 8008a7a:	e099      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-e");
 8008a7c:	4958      	ldr	r1, [pc, #352]	; (8008be0 <s_gen_bus_config+0x290>)
 8008a7e:	484f      	ldr	r0, [pc, #316]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008a80:	f001 fd80 	bl	800a584 <strstr>
 8008a84:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d010      	beq.n	8008aae <s_gen_bus_config+0x15e>
            sscanf(p, "%s %d", dummy, &(gb->idcmd));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3314      	adds	r3, #20
 8008a90:	f107 020c 	add.w	r2, r7, #12
 8008a94:	494c      	ldr	r1, [pc, #304]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a98:	f001 fd48 	bl	800a52c <siscanf>
            if(gb->idcmd==0) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <s_gen_bus_config+0x15e>
            	erreur();
 8008aa4:	2108      	movs	r1, #8
 8008aa6:	4849      	ldr	r0, [pc, #292]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008aa8:	f000 ff28 	bl	80098fc <envoiePCSTM>
 8008aac:	e080      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-t");
 8008aae:	494d      	ldr	r1, [pc, #308]	; (8008be4 <s_gen_bus_config+0x294>)
 8008ab0:	4842      	ldr	r0, [pc, #264]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008ab2:	f001 fd67 	bl	800a584 <strstr>
 8008ab6:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d010      	beq.n	8008ae0 <s_gen_bus_config+0x190>
            sscanf(p, "%s %d", dummy, &(gb->operateur));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3318      	adds	r3, #24
 8008ac2:	f107 020c 	add.w	r2, r7, #12
 8008ac6:	4940      	ldr	r1, [pc, #256]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aca:	f001 fd2f 	bl	800a52c <siscanf>
            if(gb->operateur==0) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <s_gen_bus_config+0x190>
            	erreur();
 8008ad6:	2108      	movs	r1, #8
 8008ad8:	483c      	ldr	r0, [pc, #240]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008ada:	f000 ff0f 	bl	80098fc <envoiePCSTM>
 8008ade:	e067      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-u");
 8008ae0:	4941      	ldr	r1, [pc, #260]	; (8008be8 <s_gen_bus_config+0x298>)
 8008ae2:	4836      	ldr	r0, [pc, #216]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008ae4:	f001 fd4e 	bl	800a584 <strstr>
 8008ae8:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d010      	beq.n	8008b12 <s_gen_bus_config+0x1c2>
            sscanf(p, "%s %d", dummy, &(gb->facteurbaud));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	331c      	adds	r3, #28
 8008af4:	f107 020c 	add.w	r2, r7, #12
 8008af8:	4933      	ldr	r1, [pc, #204]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008afc:	f001 fd16 	bl	800a52c <siscanf>
            if(gb->facteurbaud==0) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d104      	bne.n	8008b12 <s_gen_bus_config+0x1c2>
            	erreur();
 8008b08:	2108      	movs	r1, #8
 8008b0a:	4830      	ldr	r0, [pc, #192]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008b0c:	f000 fef6 	bl	80098fc <envoiePCSTM>
 8008b10:	e04e      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-a");
 8008b12:	4936      	ldr	r1, [pc, #216]	; (8008bec <s_gen_bus_config+0x29c>)
 8008b14:	4829      	ldr	r0, [pc, #164]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008b16:	f001 fd35 	bl	800a584 <strstr>
 8008b1a:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d010      	beq.n	8008b44 <s_gen_bus_config+0x1f4>
            sscanf(p, "%s %d", dummy, &(gb->adresse));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3320      	adds	r3, #32
 8008b26:	f107 020c 	add.w	r2, r7, #12
 8008b2a:	4927      	ldr	r1, [pc, #156]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b2e:	f001 fcfd 	bl	800a52c <siscanf>
            if(gb->adresse==0) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <s_gen_bus_config+0x1f4>
            	erreur();
 8008b3a:	2108      	movs	r1, #8
 8008b3c:	4823      	ldr	r0, [pc, #140]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008b3e:	f000 fedd 	bl	80098fc <envoiePCSTM>
 8008b42:	e035      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-c");
 8008b44:	492a      	ldr	r1, [pc, #168]	; (8008bf0 <s_gen_bus_config+0x2a0>)
 8008b46:	481d      	ldr	r0, [pc, #116]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008b48:	f001 fd1c 	bl	800a584 <strstr>
 8008b4c:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d010      	beq.n	8008b76 <s_gen_bus_config+0x226>
            sscanf(p, "%s %d", dummy, &(gb->commencer));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3328      	adds	r3, #40	; 0x28
 8008b58:	f107 020c 	add.w	r2, r7, #12
 8008b5c:	491a      	ldr	r1, [pc, #104]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b60:	f001 fce4 	bl	800a52c <siscanf>
            if(gb->commencer > N_COMMENCE) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	dd04      	ble.n	8008b76 <s_gen_bus_config+0x226>
            	erreur();
 8008b6c:	2108      	movs	r1, #8
 8008b6e:	4817      	ldr	r0, [pc, #92]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008b70:	f000 fec4 	bl	80098fc <envoiePCSTM>
 8008b74:	e01c      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        p = strstr((char *) buffer_verif, "-b");
 8008b76:	491f      	ldr	r1, [pc, #124]	; (8008bf4 <s_gen_bus_config+0x2a4>)
 8008b78:	4810      	ldr	r0, [pc, #64]	; (8008bbc <s_gen_bus_config+0x26c>)
 8008b7a:	f001 fd03 	bl	800a584 <strstr>
 8008b7e:	6278      	str	r0, [r7, #36]	; 0x24
        if(p) {
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d010      	beq.n	8008ba8 <s_gen_bus_config+0x258>
            sscanf(p, "%s %d", dummy, &(gb->pins));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3324      	adds	r3, #36	; 0x24
 8008b8a:	f107 020c 	add.w	r2, r7, #12
 8008b8e:	490e      	ldr	r1, [pc, #56]	; (8008bc8 <s_gen_bus_config+0x278>)
 8008b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b92:	f001 fccb 	bl	800a52c <siscanf>
            if(gb->pins==0) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d104      	bne.n	8008ba8 <s_gen_bus_config+0x258>
            	erreur();
 8008b9e:	2108      	movs	r1, #8
 8008ba0:	480a      	ldr	r0, [pc, #40]	; (8008bcc <s_gen_bus_config+0x27c>)
 8008ba2:	f000 feab 	bl	80098fc <envoiePCSTM>
 8008ba6:	e003      	b.n	8008bb0 <s_gen_bus_config+0x260>
            }
        }

        confirmationCMD(GENERATION_BUS_CMD, (void*) gb);
 8008ba8:	6879      	ldr	r1, [r7, #4]
 8008baa:	2002      	movs	r0, #2
 8008bac:	f000 faca 	bl	8009144 <confirmationCMD>
    }


}
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	0800b5b4 	.word	0x0800b5b4
 8008bbc:	20000368 	.word	0x20000368
 8008bc0:	0800b608 	.word	0x0800b608
 8008bc4:	0800b600 	.word	0x0800b600
 8008bc8:	0800b5e0 	.word	0x0800b5e0
 8008bcc:	0800b5d0 	.word	0x0800b5d0
 8008bd0:	0800b5ec 	.word	0x0800b5ec
 8008bd4:	0800b610 	.word	0x0800b610
 8008bd8:	0800b5dc 	.word	0x0800b5dc
 8008bdc:	0800b614 	.word	0x0800b614
 8008be0:	0800b618 	.word	0x0800b618
 8008be4:	0800b61c 	.word	0x0800b61c
 8008be8:	0800b620 	.word	0x0800b620
 8008bec:	0800b5f8 	.word	0x0800b5f8
 8008bf0:	0800b604 	.word	0x0800b604
 8008bf4:	0800b5f0 	.word	0x0800b5f0

08008bf8 <s_rec_bus_config>:

void s_rec_bus_config(s_rec_bus* rb)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
		uint8_t dr[8];
		sscanf((char *) buffer_verif, "%s", (char *) dr);
 8008c00:	f107 0308 	add.w	r3, r7, #8
 8008c04:	461a      	mov	r2, r3
 8008c06:	490b      	ldr	r1, [pc, #44]	; (8008c34 <s_rec_bus_config+0x3c>)
 8008c08:	480b      	ldr	r0, [pc, #44]	; (8008c38 <s_rec_bus_config+0x40>)
 8008c0a:	f001 fc8f 	bl	800a52c <siscanf>

		if(memcmp(dr, "recBus", strlen("recBus")) == 0)
 8008c0e:	f107 0308 	add.w	r3, r7, #8
 8008c12:	2206      	movs	r2, #6
 8008c14:	4909      	ldr	r1, [pc, #36]	; (8008c3c <s_rec_bus_config+0x44>)
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 fb8e 	bl	800a338 <memcmp>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d103      	bne.n	8008c2a <s_rec_bus_config+0x32>
		{
			confirmationCMD(RECEPTION_BUS_CMD, (void*) rb);
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	2003      	movs	r0, #3
 8008c26:	f000 fa8d 	bl	8009144 <confirmationCMD>
			//ajouter la variable vous indiquant de modifier les champs des structures attendues

		}
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	0800b5b4 	.word	0x0800b5b4
 8008c38:	20000368 	.word	0x20000368
 8008c3c:	0800b624 	.word	0x0800b624

08008c40 <s_rec_flux_config>:

void s_rec_flux_config(s_rec_flux* rf)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
		uint8_t dfl[8];
		sscanf((char *) buffer_verif, "%s", (char *) dfl);
 8008c48:	f107 0308 	add.w	r3, r7, #8
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	490b      	ldr	r1, [pc, #44]	; (8008c7c <s_rec_flux_config+0x3c>)
 8008c50:	480b      	ldr	r0, [pc, #44]	; (8008c80 <s_rec_flux_config+0x40>)
 8008c52:	f001 fc6b 	bl	800a52c <siscanf>

		if(memcmp(dfl, "recFlux", strlen("recFlux")) == 0)
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	2207      	movs	r2, #7
 8008c5c:	4909      	ldr	r1, [pc, #36]	; (8008c84 <s_rec_flux_config+0x44>)
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 fb6a 	bl	800a338 <memcmp>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <s_rec_flux_config+0x32>
		{
			confirmationCMD(RECEPTION_FLUX_CMD, (void*) rf);
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	2004      	movs	r0, #4
 8008c6e:	f000 fa69 	bl	8009144 <confirmationCMD>
			//ajouter la variable vous indiquant de modifier les champs des structures attendues
		}
}
 8008c72:	bf00      	nop
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	0800b5b4 	.word	0x0800b5b4
 8008c80:	20000368 	.word	0x20000368
 8008c84:	0800b62c 	.word	0x0800b62c

08008c88 <help>:

void help(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b0ae      	sub	sp, #184	; 0xb8
 8008c8c:	af00      	add	r7, sp, #0
    uint8_t h[20];
    sscanf((char *) buffer_verif, "%s", (char *) h);
 8008c8e:	463b      	mov	r3, r7
 8008c90:	461a      	mov	r2, r3
 8008c92:	49c5      	ldr	r1, [pc, #788]	; (8008fa8 <help+0x320>)
 8008c94:	48c5      	ldr	r0, [pc, #788]	; (8008fac <help+0x324>)
 8008c96:	f001 fc49 	bl	800a52c <siscanf>

    if(memcmp(h, "help", strlen("help")) == 0)
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	49c4      	ldr	r1, [pc, #784]	; (8008fb0 <help+0x328>)
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 fb49 	bl	800a338 <memcmp>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f040 8233 	bne.w	8009114 <help+0x48c>
    {
    	uint8_t *help = "\nHELP \n";
 8008cae:	4bc1      	ldr	r3, [pc, #772]	; (8008fb4 <help+0x32c>)
 8008cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   		envoiePCSTM(help, strlen(help));
 8008cb4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8008cb8:	f7f7 fa92 	bl	80001e0 <strlen>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8008cc6:	f000 fe19 	bl	80098fc <envoiePCSTM>
    	uint8_t *help1 = "genBus sert a definir les parametres";
 8008cca:	4bbb      	ldr	r3, [pc, #748]	; (8008fb8 <help+0x330>)
 8008ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   		envoiePCSTM(help1, strlen(help1));
 8008cd0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008cd4:	f7f7 fa84 	bl	80001e0 <strlen>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008ce2:	f000 fe0b 	bl	80098fc <envoiePCSTM>
    	uint8_t *help2 = " pour la communication via UART, I2C et SPI \n";
 8008ce6:	4bb5      	ldr	r3, [pc, #724]	; (8008fbc <help+0x334>)
 8008ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   		envoiePCSTM(help2, strlen(help2));
 8008cec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008cf0:	f7f7 fa76 	bl	80001e0 <strlen>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008cfe:	f000 fdfd 	bl	80098fc <envoiePCSTM>
    	uint8_t *help3 = "Ces commandes sont :\n";
 8008d02:	4baf      	ldr	r3, [pc, #700]	; (8008fc0 <help+0x338>)
 8008d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   		envoiePCSTM(help3, strlen(help3));
 8008d08:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008d0c:	f7f7 fa68 	bl	80001e0 <strlen>
 8008d10:	4603      	mov	r3, r0
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4619      	mov	r1, r3
 8008d16:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008d1a:	f000 fdef 	bl	80098fc <envoiePCSTM>
    	uint8_t *help4 = "-p doit etre suivi d'un entier tel que: \n";
 8008d1e:	4ba9      	ldr	r3, [pc, #676]	; (8008fc4 <help+0x33c>)
 8008d20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   		envoiePCSTM(help4, strlen(help4));
 8008d24:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008d28:	f7f7 fa5a 	bl	80001e0 <strlen>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	4619      	mov	r1, r3
 8008d32:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008d36:	f000 fde1 	bl	80098fc <envoiePCSTM>
    	uint8_t *help5 = " 1 pour I2C \n 2 pour UART \n 3 pour SPI\n";
 8008d3a:	4ba3      	ldr	r3, [pc, #652]	; (8008fc8 <help+0x340>)
 8008d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   		envoiePCSTM(help5, strlen(help5));
 8008d40:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008d44:	f7f7 fa4c 	bl	80001e0 <strlen>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008d52:	f000 fdd3 	bl	80098fc <envoiePCSTM>
    	uint8_t *help6 = "-f doit etre suivi d'un entier representatif de la frequence de la communication \n";
 8008d56:	4b9d      	ldr	r3, [pc, #628]	; (8008fcc <help+0x344>)
 8008d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   		envoiePCSTM(help6, strlen(help6));
 8008d5c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8008d60:	f7f7 fa3e 	bl	80001e0 <strlen>
 8008d64:	4603      	mov	r3, r0
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8008d6e:	f000 fdc5 	bl	80098fc <envoiePCSTM>
    	uint8_t *help7 = "-o doit etre suivi d'un entier representatif du nombre d'octet de la communication \n";
 8008d72:	4b97      	ldr	r3, [pc, #604]	; (8008fd0 <help+0x348>)
 8008d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   		envoiePCSTM(help7, strlen(help7));
 8008d78:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008d7c:	f7f7 fa30 	bl	80001e0 <strlen>
 8008d80:	4603      	mov	r3, r0
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008d8a:	f000 fdb7 	bl	80098fc <envoiePCSTM>
    	uint8_t *help8 = "-m doit etre suivi d'un entier representatif d'un mot binaire \n";
 8008d8e:	4b91      	ldr	r3, [pc, #580]	; (8008fd4 <help+0x34c>)
 8008d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    	envoiePCSTM(help8, strlen(help8));
 8008d94:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008d98:	f7f7 fa22 	bl	80001e0 <strlen>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	4619      	mov	r1, r3
 8008da2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008da6:	f000 fda9 	bl	80098fc <envoiePCSTM>
    	uint8_t *help40 = "-i doit etre suivi d'un entier representatif de la taille du mot\n";
 8008daa:	4b8b      	ldr	r3, [pc, #556]	; (8008fd8 <help+0x350>)
 8008dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   		envoiePCSTM(help40, strlen(help40));
 8008db0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008db4:	f7f7 fa14 	bl	80001e0 <strlen>
 8008db8:	4603      	mov	r3, r0
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008dc2:	f000 fd9b 	bl	80098fc <envoiePCSTM>
    	uint8_t *help41 = "-e doit etre suivi d'un entier representatif du numero d'identification de la commande\n";
 8008dc6:	4b85      	ldr	r3, [pc, #532]	; (8008fdc <help+0x354>)
 8008dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   		envoiePCSTM(help41, strlen(help41));
 8008dcc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008dd0:	f7f7 fa06 	bl	80001e0 <strlen>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008dde:	f000 fd8d 	bl	80098fc <envoiePCSTM>
    	uint8_t *help42 = "-t doit etre suivi d'un entier representatif de l'operateur baud\n";
 8008de2:	4b7f      	ldr	r3, [pc, #508]	; (8008fe0 <help+0x358>)
 8008de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   		envoiePCSTM(help42, strlen(help42));
 8008de8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8008dec:	f7f7 f9f8 	bl	80001e0 <strlen>
 8008df0:	4603      	mov	r3, r0
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	4619      	mov	r1, r3
 8008df6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8008dfa:	f000 fd7f 	bl	80098fc <envoiePCSTM>
    	uint8_t *help43 = "-u doit etre suivi d'un entier representatif du facteur de baud\n";
 8008dfe:	4b79      	ldr	r3, [pc, #484]	; (8008fe4 <help+0x35c>)
 8008e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   		envoiePCSTM(help43, strlen(help43));
 8008e04:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8008e08:	f7f7 f9ea 	bl	80001e0 <strlen>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4619      	mov	r1, r3
 8008e12:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8008e16:	f000 fd71 	bl	80098fc <envoiePCSTM>
    	uint8_t *help44 = "-a doit etre suivi d'un entier representatif de l'adresse de l'esclave\n";
 8008e1a:	4b73      	ldr	r3, [pc, #460]	; (8008fe8 <help+0x360>)
 8008e1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   		envoiePCSTM(help44, strlen(help44));
 8008e20:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008e24:	f7f7 f9dc 	bl	80001e0 <strlen>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008e32:	f000 fd63 	bl	80098fc <envoiePCSTM>
    	uint8_t *help60 = "-b doit etre suivi d'un entier representatif du nombre de pins\n";
 8008e36:	4b6d      	ldr	r3, [pc, #436]	; (8008fec <help+0x364>)
 8008e38:	67fb      	str	r3, [r7, #124]	; 0x7c
   		envoiePCSTM(help60, strlen(help60));
 8008e3a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008e3c:	f7f7 f9d0 	bl	80001e0 <strlen>
 8008e40:	4603      	mov	r3, r0
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	4619      	mov	r1, r3
 8008e46:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008e48:	f000 fd58 	bl	80098fc <envoiePCSTM>
    	uint8_t *help24 = "-c doit etre suivi d'un entier representatif de l'intention de commencer une generation \n";
 8008e4c:	4b68      	ldr	r3, [pc, #416]	; (8008ff0 <help+0x368>)
 8008e4e:	67bb      	str	r3, [r7, #120]	; 0x78
       	envoiePCSTM(help24, strlen(help24));
 8008e50:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008e52:	f7f7 f9c5 	bl	80001e0 <strlen>
 8008e56:	4603      	mov	r3, r0
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008e5e:	f000 fd4d 	bl	80098fc <envoiePCSTM>
        uint8_t *help25 = " 1 pour commencer la generation \n 0 pour ne pas commencer la generation \n";
 8008e62:	4b64      	ldr	r3, [pc, #400]	; (8008ff4 <help+0x36c>)
 8008e64:	677b      	str	r3, [r7, #116]	; 0x74
       	envoiePCSTM(help25, strlen(help25));
 8008e66:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008e68:	f7f7 f9ba 	bl	80001e0 <strlen>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	4619      	mov	r1, r3
 8008e72:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008e74:	f000 fd42 	bl	80098fc <envoiePCSTM>
        uint8_t *help45 = "\n/!\Attention/!\ \nN'envoyer pas toutes les commandes sur une ligne !\nEnvoyer au max 4 commandes sur une ligne :\n";
 8008e78:	4b5f      	ldr	r3, [pc, #380]	; (8008ff8 <help+0x370>)
 8008e7a:	673b      	str	r3, [r7, #112]	; 0x70
       	envoiePCSTM(help45, strlen(help45));
 8008e7c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008e7e:	f7f7 f9af 	bl	80001e0 <strlen>
 8008e82:	4603      	mov	r3, r0
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	4619      	mov	r1, r3
 8008e88:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008e8a:	f000 fd37 	bl	80098fc <envoiePCSTM>
        uint8_t *help46 = "Exemple d'utilisation de genBus\n genBus -p 1 -f 9 -o 1 -m 11011011\n genBus -i 5 -e 4 -t 3 -u 2\n";
 8008e8e:	4b5b      	ldr	r3, [pc, #364]	; (8008ffc <help+0x374>)
 8008e90:	66fb      	str	r3, [r7, #108]	; 0x6c
       	envoiePCSTM(help46, strlen(help46));
 8008e92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e94:	f7f7 f9a4 	bl	80001e0 <strlen>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ea0:	f000 fd2c 	bl	80098fc <envoiePCSTM>
        uint8_t *help47 = " genBus -a 55 -b 5 -c 1\n";
 8008ea4:	4b56      	ldr	r3, [pc, #344]	; (8009000 <help+0x378>)
 8008ea6:	66bb      	str	r3, [r7, #104]	; 0x68
       	envoiePCSTM(help47, strlen(help47));
 8008ea8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008eaa:	f7f7 f999 	bl	80001e0 <strlen>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008eb6:	f000 fd21 	bl	80098fc <envoiePCSTM>

    	uint8_t *help9 = "\ngenFlux sert a definir les parametres pour generer une mire \n";
 8008eba:	4b52      	ldr	r3, [pc, #328]	; (8009004 <help+0x37c>)
 8008ebc:	667b      	str	r3, [r7, #100]	; 0x64
   		envoiePCSTM(help9, strlen(help9));
 8008ebe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008ec0:	f7f7 f98e 	bl	80001e0 <strlen>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008ecc:	f000 fd16 	bl	80098fc <envoiePCSTM>
    	uint8_t *help10 = "Ces commandes sont :  \n";
 8008ed0:	4b4d      	ldr	r3, [pc, #308]	; (8009008 <help+0x380>)
 8008ed2:	663b      	str	r3, [r7, #96]	; 0x60
   		envoiePCSTM(help10, strlen(help10));
 8008ed4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008ed6:	f7f7 f983 	bl	80001e0 <strlen>
 8008eda:	4603      	mov	r3, r0
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008ee2:	f000 fd0b 	bl	80098fc <envoiePCSTM>
    	uint8_t *help11 = "-r doit etre suivi de deux entiers representatifs de la resolution tel que entier x entier \n";
 8008ee6:	4b49      	ldr	r3, [pc, #292]	; (800900c <help+0x384>)
 8008ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   		envoiePCSTM(help11, strlen(help11));
 8008eea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008eec:	f7f7 f978 	bl	80001e0 <strlen>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008ef8:	f000 fd00 	bl	80098fc <envoiePCSTM>
    	uint8_t *help12 = "-m doit etre suivi d'un entier representatif du type de la mire \n";
 8008efc:	4b44      	ldr	r3, [pc, #272]	; (8009010 <help+0x388>)
 8008efe:	65bb      	str	r3, [r7, #88]	; 0x58
   		envoiePCSTM(help12, strlen(help12));
 8008f00:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008f02:	f7f7 f96d 	bl	80001e0 <strlen>
 8008f06:	4603      	mov	r3, r0
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008f0e:	f000 fcf5 	bl	80098fc <envoiePCSTM>
    	uint8_t *help13 = " 1 pour Mire barre code \n 2 pour Mire contour blanc \n 3 pour Mire green/red\n 4 pour Mire horizontalBandMire\n 5 pour Mire horizontalShadeGray\n";
 8008f12:	4b40      	ldr	r3, [pc, #256]	; (8009014 <help+0x38c>)
 8008f14:	657b      	str	r3, [r7, #84]	; 0x54
   		envoiePCSTM(help13, strlen(help13));
 8008f16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f18:	f7f7 f962 	bl	80001e0 <strlen>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	4619      	mov	r1, r3
 8008f22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f24:	f000 fcea 	bl	80098fc <envoiePCSTM>
    	uint8_t *help14 = " 6 pour Mire PatchWork\n 7 pour Mire RectShadesGray\n 8 pour Mire SwitchBlackWhite\n 9 pour Mire VerticalBlandMire\n 10 pour Mire VerticalShadesGray\n";
 8008f28:	4b3b      	ldr	r3, [pc, #236]	; (8009018 <help+0x390>)
 8008f2a:	653b      	str	r3, [r7, #80]	; 0x50
   		envoiePCSTM(help14, strlen(help14));
 8008f2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008f2e:	f7f7 f957 	bl	80001e0 <strlen>
 8008f32:	4603      	mov	r3, r0
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4619      	mov	r1, r3
 8008f38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008f3a:	f000 fcdf 	bl	80098fc <envoiePCSTM>
    	uint8_t *help15 = "-s doit etre suivi d'un entier representatif du standard \n";
 8008f3e:	4b37      	ldr	r3, [pc, #220]	; (800901c <help+0x394>)
 8008f40:	64fb      	str	r3, [r7, #76]	; 0x4c
       	envoiePCSTM(help15, strlen(help15));
 8008f42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008f44:	f7f7 f94c 	bl	80001e0 <strlen>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008f50:	f000 fcd4 	bl	80098fc <envoiePCSTM>
        uint8_t *help16 = " 1 pour SDI \n 2 pour HDMI \n";
 8008f54:	4b32      	ldr	r3, [pc, #200]	; (8009020 <help+0x398>)
 8008f56:	64bb      	str	r3, [r7, #72]	; 0x48
       	envoiePCSTM(help16, strlen(help16));
 8008f58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008f5a:	f7f7 f941 	bl	80001e0 <strlen>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4619      	mov	r1, r3
 8008f64:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008f66:	f000 fcc9 	bl	80098fc <envoiePCSTM>
    	uint8_t *help30 = "-f doit etre suivi de deux entiers representatifs du front porch horizontale et verticale tel que entier x entier\n ";
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <help+0x39c>)
 8008f6c:	647b      	str	r3, [r7, #68]	; 0x44
   		envoiePCSTM(help30, strlen(help30));
 8008f6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008f70:	f7f7 f936 	bl	80001e0 <strlen>
 8008f74:	4603      	mov	r3, r0
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008f7c:	f000 fcbe 	bl	80098fc <envoiePCSTM>
    	uint8_t *help31 = "-b doit etre suivi de deux entiers representatifs du back porch horizontale et verticale tel que entier x entier\n";
 8008f80:	4b29      	ldr	r3, [pc, #164]	; (8009028 <help+0x3a0>)
 8008f82:	643b      	str	r3, [r7, #64]	; 0x40
   		envoiePCSTM(help31, strlen(help31));
 8008f84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f86:	f7f7 f92b 	bl	80001e0 <strlen>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f92:	f000 fcb3 	bl	80098fc <envoiePCSTM>
    	uint8_t *help32 = "-l doit etre suivi de deux entiers representatifs des nombres de pixels row et column tel que entier x entier\n";
 8008f96:	4b25      	ldr	r3, [pc, #148]	; (800902c <help+0x3a4>)
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
       	envoiePCSTM(help32, strlen(help32));
 8008f9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f9c:	f7f7 f920 	bl	80001e0 <strlen>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	e044      	b.n	8009030 <help+0x3a8>
 8008fa6:	bf00      	nop
 8008fa8:	0800b5b4 	.word	0x0800b5b4
 8008fac:	20000368 	.word	0x20000368
 8008fb0:	0800b634 	.word	0x0800b634
 8008fb4:	0800b63c 	.word	0x0800b63c
 8008fb8:	0800b644 	.word	0x0800b644
 8008fbc:	0800b66c 	.word	0x0800b66c
 8008fc0:	0800b69c 	.word	0x0800b69c
 8008fc4:	0800b6b4 	.word	0x0800b6b4
 8008fc8:	0800b6e0 	.word	0x0800b6e0
 8008fcc:	0800b708 	.word	0x0800b708
 8008fd0:	0800b75c 	.word	0x0800b75c
 8008fd4:	0800b7b4 	.word	0x0800b7b4
 8008fd8:	0800b7f4 	.word	0x0800b7f4
 8008fdc:	0800b838 	.word	0x0800b838
 8008fe0:	0800b890 	.word	0x0800b890
 8008fe4:	0800b8d4 	.word	0x0800b8d4
 8008fe8:	0800b918 	.word	0x0800b918
 8008fec:	0800b960 	.word	0x0800b960
 8008ff0:	0800b9a0 	.word	0x0800b9a0
 8008ff4:	0800b9fc 	.word	0x0800b9fc
 8008ff8:	0800ba48 	.word	0x0800ba48
 8008ffc:	0800bab8 	.word	0x0800bab8
 8009000:	0800bb18 	.word	0x0800bb18
 8009004:	0800bb34 	.word	0x0800bb34
 8009008:	0800bb74 	.word	0x0800bb74
 800900c:	0800bb8c 	.word	0x0800bb8c
 8009010:	0800bbec 	.word	0x0800bbec
 8009014:	0800bc30 	.word	0x0800bc30
 8009018:	0800bcc0 	.word	0x0800bcc0
 800901c:	0800bd54 	.word	0x0800bd54
 8009020:	0800bd90 	.word	0x0800bd90
 8009024:	0800bdac 	.word	0x0800bdac
 8009028:	0800be20 	.word	0x0800be20
 800902c:	0800be94 	.word	0x0800be94
 8009030:	4619      	mov	r1, r3
 8009032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009034:	f000 fc62 	bl	80098fc <envoiePCSTM>
        uint8_t *help33 = "-a doit etre suivi de deux entiers representatifs de la sync pulse horizontale et verticale tel que entier x entier\n";
 8009038:	4b38      	ldr	r3, [pc, #224]	; (800911c <help+0x494>)
 800903a:	63bb      	str	r3, [r7, #56]	; 0x38
       	envoiePCSTM(help33, strlen(help33));
 800903c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800903e:	f7f7 f8cf 	bl	80001e0 <strlen>
 8009042:	4603      	mov	r3, r0
 8009044:	b29b      	uxth	r3, r3
 8009046:	4619      	mov	r1, r3
 8009048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800904a:	f000 fc57 	bl	80098fc <envoiePCSTM>
    	uint8_t *help34 = "-d doit etre suivi de deux entiers representatifs de la sync polarity horizontale et verticale tel que entier x entier\n";
 800904e:	4b34      	ldr	r3, [pc, #208]	; (8009120 <help+0x498>)
 8009050:	637b      	str	r3, [r7, #52]	; 0x34
       	envoiePCSTM(help34, strlen(help34));
 8009052:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009054:	f7f7 f8c4 	bl	80001e0 <strlen>
 8009058:	4603      	mov	r3, r0
 800905a:	b29b      	uxth	r3, r3
 800905c:	4619      	mov	r1, r3
 800905e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009060:	f000 fc4c 	bl	80098fc <envoiePCSTM>
        uint8_t *help35 = "-p doit etre suivi d'un entier representatif de l'horloge des pixels\n";
 8009064:	4b2f      	ldr	r3, [pc, #188]	; (8009124 <help+0x49c>)
 8009066:	633b      	str	r3, [r7, #48]	; 0x30
       	envoiePCSTM(help35, strlen(help35));
 8009068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800906a:	f7f7 f8b9 	bl	80001e0 <strlen>
 800906e:	4603      	mov	r3, r0
 8009070:	b29b      	uxth	r3, r3
 8009072:	4619      	mov	r1, r3
 8009074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009076:	f000 fc41 	bl	80098fc <envoiePCSTM>
    	uint8_t *help22 = "-c doit etre suivi d'un entier representatif de l'intention de commencer une generation \n";
 800907a:	4b2b      	ldr	r3, [pc, #172]	; (8009128 <help+0x4a0>)
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
       	envoiePCSTM(help22, strlen(help22));
 800907e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009080:	f7f7 f8ae 	bl	80001e0 <strlen>
 8009084:	4603      	mov	r3, r0
 8009086:	b29b      	uxth	r3, r3
 8009088:	4619      	mov	r1, r3
 800908a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800908c:	f000 fc36 	bl	80098fc <envoiePCSTM>
        uint8_t *help23 = " 1 pour commencer la generation \n 0 pour ne pas commencer la generation \n";
 8009090:	4b26      	ldr	r3, [pc, #152]	; (800912c <help+0x4a4>)
 8009092:	62bb      	str	r3, [r7, #40]	; 0x28
       	envoiePCSTM(help23, strlen(help23));
 8009094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009096:	f7f7 f8a3 	bl	80001e0 <strlen>
 800909a:	4603      	mov	r3, r0
 800909c:	b29b      	uxth	r3, r3
 800909e:	4619      	mov	r1, r3
 80090a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a2:	f000 fc2b 	bl	80098fc <envoiePCSTM>
        uint8_t *help36 = "\n/!\Attention/!\ \nN'envoyer pas toutes les commandes sur une ligne !\nEnvoyer au max 4 commandes sur une ligne :\n";
 80090a6:	4b22      	ldr	r3, [pc, #136]	; (8009130 <help+0x4a8>)
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
       	envoiePCSTM(help36, strlen(help36));
 80090aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090ac:	f7f7 f898 	bl	80001e0 <strlen>
 80090b0:	4603      	mov	r3, r0
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	4619      	mov	r1, r3
 80090b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090b8:	f000 fc20 	bl	80098fc <envoiePCSTM>
        uint8_t *help37 = "Exemple d'utilisation de genFlux\n genFlux -r 1920x1080 -m 9 -s 1 -f 720x480\n genFlux -f 760 x 400 -b 830 x 520 -l 430x320 -a 520x230\n";
 80090bc:	4b1d      	ldr	r3, [pc, #116]	; (8009134 <help+0x4ac>)
 80090be:	623b      	str	r3, [r7, #32]
       	envoiePCSTM(help37, strlen(help37));
 80090c0:	6a38      	ldr	r0, [r7, #32]
 80090c2:	f7f7 f88d 	bl	80001e0 <strlen>
 80090c6:	4603      	mov	r3, r0
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4619      	mov	r1, r3
 80090cc:	6a38      	ldr	r0, [r7, #32]
 80090ce:	f000 fc15 	bl	80098fc <envoiePCSTM>
        uint8_t *help38 = " genFlux -d 430x220 -p 50 -c 1\n";
 80090d2:	4b19      	ldr	r3, [pc, #100]	; (8009138 <help+0x4b0>)
 80090d4:	61fb      	str	r3, [r7, #28]
       	envoiePCSTM(help38, strlen(help38));
 80090d6:	69f8      	ldr	r0, [r7, #28]
 80090d8:	f7f7 f882 	bl	80001e0 <strlen>
 80090dc:	4603      	mov	r3, r0
 80090de:	b29b      	uxth	r3, r3
 80090e0:	4619      	mov	r1, r3
 80090e2:	69f8      	ldr	r0, [r7, #28]
 80090e4:	f000 fc0a 	bl	80098fc <envoiePCSTM>


    	uint8_t *help20 = "\nrecBus sert a afficher les informations d'un bus de communication tel que:la frequence, l'octet et le mot binaire\n";
 80090e8:	4b14      	ldr	r3, [pc, #80]	; (800913c <help+0x4b4>)
 80090ea:	61bb      	str	r3, [r7, #24]
   		envoiePCSTM(help20, strlen(help20));
 80090ec:	69b8      	ldr	r0, [r7, #24]
 80090ee:	f7f7 f877 	bl	80001e0 <strlen>
 80090f2:	4603      	mov	r3, r0
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	4619      	mov	r1, r3
 80090f8:	69b8      	ldr	r0, [r7, #24]
 80090fa:	f000 fbff 	bl	80098fc <envoiePCSTM>

    	uint8_t *help21 = "\nrecFlux sert a afficher les informations d'un flux video tel que: la resolution, le blanking et le framerate\n";
 80090fe:	4b10      	ldr	r3, [pc, #64]	; (8009140 <help+0x4b8>)
 8009100:	617b      	str	r3, [r7, #20]
   		envoiePCSTM(help21, strlen(help21));
 8009102:	6978      	ldr	r0, [r7, #20]
 8009104:	f7f7 f86c 	bl	80001e0 <strlen>
 8009108:	4603      	mov	r3, r0
 800910a:	b29b      	uxth	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f000 fbf4 	bl	80098fc <envoiePCSTM>
    }
    else
    {
    }

}
 8009114:	bf00      	nop
 8009116:	37b8      	adds	r7, #184	; 0xb8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	0800bf04 	.word	0x0800bf04
 8009120:	0800bf7c 	.word	0x0800bf7c
 8009124:	0800bff4 	.word	0x0800bff4
 8009128:	0800b9a0 	.word	0x0800b9a0
 800912c:	0800b9fc 	.word	0x0800b9fc
 8009130:	0800ba48 	.word	0x0800ba48
 8009134:	0800c03c 	.word	0x0800c03c
 8009138:	0800c0c4 	.word	0x0800c0c4
 800913c:	0800c0e4 	.word	0x0800c0e4
 8009140:	0800c158 	.word	0x0800c158

08009144 <confirmationCMD>:

void confirmationCMD(uint8_t cmd, void* str)
{
 8009144:	b5b0      	push	{r4, r5, r7, lr}
 8009146:	f5ad 7d3a 	sub.w	sp, sp, #744	; 0x2e8
 800914a:	af02      	add	r7, sp, #8
 800914c:	4602      	mov	r2, r0
 800914e:	463b      	mov	r3, r7
 8009150:	6019      	str	r1, [r3, #0]
 8009152:	1dfb      	adds	r3, r7, #7
 8009154:	701a      	strb	r2, [r3, #0]
    uint8_t temp[250] = {0};
 8009156:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800915a:	4618      	mov	r0, r3
 800915c:	23fa      	movs	r3, #250	; 0xfa
 800915e:	461a      	mov	r2, r3
 8009160:	2100      	movs	r1, #0
 8009162:	f001 f903 	bl	800a36c <memset>
    uint8_t var[150] = {0};
 8009166:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800916a:	4618      	mov	r0, r3
 800916c:	2396      	movs	r3, #150	; 0x96
 800916e:	461a      	mov	r2, r3
 8009170:	2100      	movs	r1, #0
 8009172:	f001 f8fb 	bl	800a36c <memset>
    uint8_t tab[150] = {0};
 8009176:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800917a:	4618      	mov	r0, r3
 800917c:	2396      	movs	r3, #150	; 0x96
 800917e:	461a      	mov	r2, r3
 8009180:	2100      	movs	r1, #0
 8009182:	f001 f8f3 	bl	800a36c <memset>
    uint8_t dat[150] = {0};
 8009186:	f107 030c 	add.w	r3, r7, #12
 800918a:	4618      	mov	r0, r3
 800918c:	2396      	movs	r3, #150	; 0x96
 800918e:	461a      	mov	r2, r3
 8009190:	2100      	movs	r1, #0
 8009192:	f001 f8eb 	bl	800a36c <memset>
    sprintf((char *) temp, "\nGENERATION FLUX VIDEO \n"
 8009196:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800919a:	4ab4      	ldr	r2, [pc, #720]	; (800946c <confirmationCMD+0x328>)
 800919c:	461c      	mov	r4, r3
 800919e:	4615      	mov	r5, r2
 80091a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	8022      	strh	r2, [r4, #0]
 80091ae:	3402      	adds	r4, #2
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	7023      	strb	r3, [r4, #0]
    		"Standard :");
    if(cmd == GENERATION_FLUX_CMD) {
 80091b4:	1dfb      	adds	r3, r7, #7
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	f040 8122 	bne.w	8009402 <confirmationCMD+0x2be>
   		s_gen_flux* gf = (s_gen_flux*) str;
 80091be:	463b      	mov	r3, r7
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc

   		if(gf->standard == 1){
 80091c6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d108      	bne.n	80091e2 <confirmationCMD+0x9e>
   			sprintf((char *) temp, "%s SDI\n", (char *) temp);
 80091d0:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80091d4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80091d8:	49a5      	ldr	r1, [pc, #660]	; (8009470 <confirmationCMD+0x32c>)
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 f986 	bl	800a4ec <siprintf>
 80091e0:	e00c      	b.n	80091fc <confirmationCMD+0xb8>
   		}
   		else if(gf->standard == 2){
 80091e2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d107      	bne.n	80091fc <confirmationCMD+0xb8>
   			sprintf((char *) temp, "%s HDMI\n", (char *) temp);
 80091ec:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80091f0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80091f4:	499f      	ldr	r1, [pc, #636]	; (8009474 <confirmationCMD+0x330>)
 80091f6:	4618      	mov	r0, r3
 80091f8:	f001 f978 	bl	800a4ec <siprintf>
   		}

   		sprintf((char *) temp, "%sResolution : %dx%d \n", (char *) temp, gf->width, gf->height);
 80091fc:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009200:	6819      	ldr	r1, [r3, #0]
 8009202:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800920c:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	460b      	mov	r3, r1
 8009214:	4998      	ldr	r1, [pc, #608]	; (8009478 <confirmationCMD+0x334>)
 8009216:	f001 f969 	bl	800a4ec <siprintf>

   		switch (gf->mire)
 800921a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	3b01      	subs	r3, #1
 8009222:	2b09      	cmp	r3, #9
 8009224:	d870      	bhi.n	8009308 <confirmationCMD+0x1c4>
 8009226:	a201      	add	r2, pc, #4	; (adr r2, 800922c <confirmationCMD+0xe8>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	08009255 	.word	0x08009255
 8009230:	08009267 	.word	0x08009267
 8009234:	08009279 	.word	0x08009279
 8009238:	0800928b 	.word	0x0800928b
 800923c:	0800929d 	.word	0x0800929d
 8009240:	080092af 	.word	0x080092af
 8009244:	080092c1 	.word	0x080092c1
 8009248:	080092d3 	.word	0x080092d3
 800924c:	080092e5 	.word	0x080092e5
 8009250:	080092f7 	.word	0x080092f7
   		{
   		case 1:
   			sprintf((char *) temp, "%sMire :  barre code\n", (char *) temp);
 8009254:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8009258:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800925c:	4987      	ldr	r1, [pc, #540]	; (800947c <confirmationCMD+0x338>)
 800925e:	4618      	mov	r0, r3
 8009260:	f001 f944 	bl	800a4ec <siprintf>
   		  break;
 8009264:	e050      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 2:
   			sprintf((char *) temp, "%sMire :  contour blanc\n", (char *) temp);
 8009266:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800926a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800926e:	4984      	ldr	r1, [pc, #528]	; (8009480 <confirmationCMD+0x33c>)
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f93b 	bl	800a4ec <siprintf>
   		  break;
 8009276:	e047      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 3:
   			sprintf((char *) temp, "%sMire :  green_red\n", (char *) temp);
 8009278:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800927c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8009280:	4980      	ldr	r1, [pc, #512]	; (8009484 <confirmationCMD+0x340>)
 8009282:	4618      	mov	r0, r3
 8009284:	f001 f932 	bl	800a4ec <siprintf>
   		  break;
 8009288:	e03e      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 4:
   			sprintf((char *) temp, "%sMire : horizontalBandMire\n", (char *) temp);
 800928a:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800928e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8009292:	497d      	ldr	r1, [pc, #500]	; (8009488 <confirmationCMD+0x344>)
 8009294:	4618      	mov	r0, r3
 8009296:	f001 f929 	bl	800a4ec <siprintf>
   		  break;
 800929a:	e035      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 5:
   			sprintf((char *) temp, "%sMire :  horizontalShadeGray\n", (char *) temp);
 800929c:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80092a0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80092a4:	4979      	ldr	r1, [pc, #484]	; (800948c <confirmationCMD+0x348>)
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 f920 	bl	800a4ec <siprintf>
   		  break;
 80092ac:	e02c      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 6:
   			sprintf((char *) temp, "%sMire :  PatchWork\n", (char *) temp);
 80092ae:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80092b2:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80092b6:	4976      	ldr	r1, [pc, #472]	; (8009490 <confirmationCMD+0x34c>)
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 f917 	bl	800a4ec <siprintf>
   		  break;
 80092be:	e023      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 7:
   			sprintf((char *) temp, "%sMire :  RectShadesGray\n", (char *) temp);
 80092c0:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80092c4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80092c8:	4972      	ldr	r1, [pc, #456]	; (8009494 <confirmationCMD+0x350>)
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 f90e 	bl	800a4ec <siprintf>
   		  break;
 80092d0:	e01a      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 8:
   			sprintf((char *) temp, "%sMire :  SwitchBlackWhite\n", (char *) temp);
 80092d2:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80092d6:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80092da:	496f      	ldr	r1, [pc, #444]	; (8009498 <confirmationCMD+0x354>)
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 f905 	bl	800a4ec <siprintf>
   		  break;
 80092e2:	e011      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 9:
   			sprintf((char *) temp, "%sMire :  VerticalBlandMire\n", (char *) temp);
 80092e4:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80092e8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80092ec:	496b      	ldr	r1, [pc, #428]	; (800949c <confirmationCMD+0x358>)
 80092ee:	4618      	mov	r0, r3
 80092f0:	f001 f8fc 	bl	800a4ec <siprintf>
   		  break;
 80092f4:	e008      	b.n	8009308 <confirmationCMD+0x1c4>
   		case 10:
   			sprintf((char *) temp, "%sMire :  VerticalShadesGray\n", (char *) temp);
 80092f6:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80092fa:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80092fe:	4968      	ldr	r1, [pc, #416]	; (80094a0 <confirmationCMD+0x35c>)
 8009300:	4618      	mov	r0, r3
 8009302:	f001 f8f3 	bl	800a4ec <siprintf>
   		  break;
 8009306:	bf00      	nop
   		}
   		sprintf((char *) temp, "%sPixels : %dx%d \n", (char *) temp, gf->hlength, gf->vlength);
 8009308:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800930c:	6a19      	ldr	r1, [r3, #32]
 800930e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8009318:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	460b      	mov	r3, r1
 8009320:	4960      	ldr	r1, [pc, #384]	; (80094a4 <confirmationCMD+0x360>)
 8009322:	f001 f8e3 	bl	800a4ec <siprintf>
   		sprintf((char *) temp, "%sFront porch : %dx%d \n", (char *) temp, gf->hfp, gf->vfp);
 8009326:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800932a:	6919      	ldr	r1, [r3, #16]
 800932c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8009336:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	460b      	mov	r3, r1
 800933e:	495a      	ldr	r1, [pc, #360]	; (80094a8 <confirmationCMD+0x364>)
 8009340:	f001 f8d4 	bl	800a4ec <siprintf>
   		sprintf((char *) temp, "%sSync pulse : %dx%d \n", (char *) temp, gf->hsyncpulse, gf->vsyncpulse);
 8009344:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009348:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800934a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8009354:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	460b      	mov	r3, r1
 800935c:	4953      	ldr	r1, [pc, #332]	; (80094ac <confirmationCMD+0x368>)
 800935e:	f001 f8c5 	bl	800a4ec <siprintf>
   		sprintf((char *) temp, "%sBack porch : %dx%d \n", (char *) temp, gf->hbp, gf->vbp);
 8009362:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009366:	6999      	ldr	r1, [r3, #24]
 8009368:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8009372:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	460b      	mov	r3, r1
 800937a:	494d      	ldr	r1, [pc, #308]	; (80094b0 <confirmationCMD+0x36c>)
 800937c:	f001 f8b6 	bl	800a4ec <siprintf>
   		sprintf((char *) temp, "%sSync polarity : %dx%d \n", (char *) temp, gf->hpolsync, gf->vpolsync);
 8009380:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8009384:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009386:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800938a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938c:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8009390:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	460b      	mov	r3, r1
 8009398:	4946      	ldr	r1, [pc, #280]	; (80094b4 <confirmationCMD+0x370>)
 800939a:	f001 f8a7 	bl	800a4ec <siprintf>
   		sprintf((char *) temp, "%sPixel clock : %d \n", (char *) temp, gf->pclock);
 800939e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80093a8:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 80093ac:	4942      	ldr	r1, [pc, #264]	; (80094b8 <confirmationCMD+0x374>)
 80093ae:	f001 f89d 	bl	800a4ec <siprintf>
   		if(gf->commencer == 0){
 80093b2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80093b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d108      	bne.n	80093ce <confirmationCMD+0x28a>
   			sprintf((char *) temp, "%sCommencer : Non\n", (char *) temp);
 80093bc:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80093c0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80093c4:	493d      	ldr	r1, [pc, #244]	; (80094bc <confirmationCMD+0x378>)
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 f890 	bl	800a4ec <siprintf>
 80093cc:	e00c      	b.n	80093e8 <confirmationCMD+0x2a4>
   		}
   		else if(gf->commencer == 1){
 80093ce:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80093d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d107      	bne.n	80093e8 <confirmationCMD+0x2a4>
   			sprintf((char *) temp, "%sCommencer : Oui\n", (char *) temp);
 80093d8:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80093dc:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80093e0:	4937      	ldr	r1, [pc, #220]	; (80094c0 <confirmationCMD+0x37c>)
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 f882 	bl	800a4ec <siprintf>
   		}
    		envoiePCSTM(temp, strlen((char *) temp));
 80093e8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f6 fef7 	bl	80001e0 <strlen>
 80093f2:	4603      	mov	r3, r0
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fa7d 	bl	80098fc <envoiePCSTM>
    }

    sprintf((char *) var, "\nGENERATION BUS COMMUNICATION \n"
 8009402:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009406:	4a2f      	ldr	r2, [pc, #188]	; (80094c4 <confirmationCMD+0x380>)
 8009408:	461c      	mov	r4, r3
 800940a:	4615      	mov	r5, r2
 800940c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800940e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009418:	c403      	stmia	r4!, {r0, r1}
 800941a:	8022      	strh	r2, [r4, #0]
 800941c:	3402      	adds	r4, #2
 800941e:	0c13      	lsrs	r3, r2, #16
 8009420:	7023      	strb	r3, [r4, #0]
    		"Protocole :");
    if(cmd == GENERATION_BUS_CMD) {
 8009422:	1dfb      	adds	r3, r7, #7
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b02      	cmp	r3, #2
 8009428:	f040 80e1 	bne.w	80095ee <confirmationCMD+0x4aa>
   		s_gen_bus* gb = (s_gen_bus*) str;
 800942c:	463b      	mov	r3, r7
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

   		if(gb->protocole == 1){
 8009434:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d108      	bne.n	8009450 <confirmationCMD+0x30c>
   			sprintf((char *) var, "%s I2C\n", (char *) var);
 800943e:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009442:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009446:	4920      	ldr	r1, [pc, #128]	; (80094c8 <confirmationCMD+0x384>)
 8009448:	4618      	mov	r0, r3
 800944a:	f001 f84f 	bl	800a4ec <siprintf>
 800944e:	e04c      	b.n	80094ea <confirmationCMD+0x3a6>
   		}
   		else if(gb->protocole == 2){
 8009450:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d13a      	bne.n	80094d0 <confirmationCMD+0x38c>
   			sprintf((char *) var, "%s UART\n", (char *) var);
 800945a:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800945e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009462:	491a      	ldr	r1, [pc, #104]	; (80094cc <confirmationCMD+0x388>)
 8009464:	4618      	mov	r0, r3
 8009466:	f001 f841 	bl	800a4ec <siprintf>
 800946a:	e03e      	b.n	80094ea <confirmationCMD+0x3a6>
 800946c:	0800c1c8 	.word	0x0800c1c8
 8009470:	0800c1ec 	.word	0x0800c1ec
 8009474:	0800c1f4 	.word	0x0800c1f4
 8009478:	0800c200 	.word	0x0800c200
 800947c:	0800c218 	.word	0x0800c218
 8009480:	0800c230 	.word	0x0800c230
 8009484:	0800c24c 	.word	0x0800c24c
 8009488:	0800c264 	.word	0x0800c264
 800948c:	0800c284 	.word	0x0800c284
 8009490:	0800c2a4 	.word	0x0800c2a4
 8009494:	0800c2bc 	.word	0x0800c2bc
 8009498:	0800c2d8 	.word	0x0800c2d8
 800949c:	0800c2f4 	.word	0x0800c2f4
 80094a0:	0800c314 	.word	0x0800c314
 80094a4:	0800c334 	.word	0x0800c334
 80094a8:	0800c348 	.word	0x0800c348
 80094ac:	0800c360 	.word	0x0800c360
 80094b0:	0800c378 	.word	0x0800c378
 80094b4:	0800c390 	.word	0x0800c390
 80094b8:	0800c3ac 	.word	0x0800c3ac
 80094bc:	0800c3c4 	.word	0x0800c3c4
 80094c0:	0800c3d8 	.word	0x0800c3d8
 80094c4:	0800c3ec 	.word	0x0800c3ec
 80094c8:	0800c418 	.word	0x0800c418
 80094cc:	0800c420 	.word	0x0800c420
   		}
   		else if(gb->protocole == 3){
 80094d0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d107      	bne.n	80094ea <confirmationCMD+0x3a6>
   			sprintf((char *) var, "%s SPI\n", (char *) var);
 80094da:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80094de:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80094e2:	49c3      	ldr	r1, [pc, #780]	; (80097f0 <confirmationCMD+0x6ac>)
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 f801 	bl	800a4ec <siprintf>
   		}

   		sprintf((char *) var, "%sFrequence : %d \n", (char *) var, gb->freq);
 80094ea:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80094f4:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 80094f8:	49be      	ldr	r1, [pc, #760]	; (80097f4 <confirmationCMD+0x6b0>)
 80094fa:	f000 fff7 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sPins : %d \n", (char *) var, gb->pins);
 80094fe:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009508:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 800950c:	49ba      	ldr	r1, [pc, #744]	; (80097f8 <confirmationCMD+0x6b4>)
 800950e:	f000 ffed 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sOctet : %d \n", (char *) var, gb->octet);
 8009512:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800951c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8009520:	49b6      	ldr	r1, [pc, #728]	; (80097fc <confirmationCMD+0x6b8>)
 8009522:	f000 ffe3 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sMot binaire : %d \n", (char *) var, gb->motbinaire);
 8009526:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009530:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8009534:	49b2      	ldr	r1, [pc, #712]	; (8009800 <confirmationCMD+0x6bc>)
 8009536:	f000 ffd9 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sTaille mot : %d \n", (char *) var, gb->taillemot);
 800953a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009544:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8009548:	49ae      	ldr	r1, [pc, #696]	; (8009804 <confirmationCMD+0x6c0>)
 800954a:	f000 ffcf 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sID Commande : %d \n", (char *) var, gb->idcmd);
 800954e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009558:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 800955c:	49aa      	ldr	r1, [pc, #680]	; (8009808 <confirmationCMD+0x6c4>)
 800955e:	f000 ffc5 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sOperateur baud : %d \n", (char *) var, gb->operateur);
 8009562:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800956c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8009570:	49a6      	ldr	r1, [pc, #664]	; (800980c <confirmationCMD+0x6c8>)
 8009572:	f000 ffbb 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sFacteur baud : %d \n", (char *) var, gb->facteurbaud);
 8009576:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009580:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8009584:	49a2      	ldr	r1, [pc, #648]	; (8009810 <confirmationCMD+0x6cc>)
 8009586:	f000 ffb1 	bl	800a4ec <siprintf>
   		sprintf((char *) var, "%sAdresse : %d \n", (char *) var, gb->adresse);
 800958a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009594:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8009598:	499e      	ldr	r1, [pc, #632]	; (8009814 <confirmationCMD+0x6d0>)
 800959a:	f000 ffa7 	bl	800a4ec <siprintf>

   		if(gb->commencer == 0){
 800959e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80095a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d108      	bne.n	80095ba <confirmationCMD+0x476>
   			sprintf((char *) var, "%sCommencer : Non\n", (char *) var);
 80095a8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80095ac:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80095b0:	4999      	ldr	r1, [pc, #612]	; (8009818 <confirmationCMD+0x6d4>)
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 ff9a 	bl	800a4ec <siprintf>
 80095b8:	e00c      	b.n	80095d4 <confirmationCMD+0x490>
   		}
   		else if(gb->commencer == 1){
 80095ba:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d107      	bne.n	80095d4 <confirmationCMD+0x490>
   			sprintf((char *) var, "%sCommencer : Oui\n", (char *) var);
 80095c4:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80095c8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80095cc:	4993      	ldr	r1, [pc, #588]	; (800981c <confirmationCMD+0x6d8>)
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 ff8c 	bl	800a4ec <siprintf>
   		}

   		envoiePCSTM(var, strlen((char *) var));
 80095d4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f6 fe01 	bl	80001e0 <strlen>
 80095de:	4603      	mov	r3, r0
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f987 	bl	80098fc <envoiePCSTM>
    }

    sprintf((char *) tab, "\nRECEPTION BUS COMMUNICATION \n");
 80095ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80095f2:	4a8b      	ldr	r2, [pc, #556]	; (8009820 <confirmationCMD+0x6dc>)
 80095f4:	461c      	mov	r4, r3
 80095f6:	4615      	mov	r5, r2
 80095f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009600:	c407      	stmia	r4!, {r0, r1, r2}
 8009602:	8023      	strh	r3, [r4, #0]
 8009604:	3402      	adds	r4, #2
 8009606:	0c1b      	lsrs	r3, r3, #16
 8009608:	7023      	strb	r3, [r4, #0]
    if(cmd == RECEPTION_BUS_CMD) {
 800960a:	1dfb      	adds	r3, r7, #7
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b03      	cmp	r3, #3
 8009610:	d14c      	bne.n	80096ac <confirmationCMD+0x568>
    	s_rec_bus* rb = (s_rec_bus*) str;
 8009612:	463b      	mov	r3, r7
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4

   		sprintf((char *) tab, "%sTaille bus : %d \n", (char *) tab, rb->taillebus);
 800961a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009624:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8009628:	497e      	ldr	r1, [pc, #504]	; (8009824 <confirmationCMD+0x6e0>)
 800962a:	f000 ff5f 	bl	800a4ec <siprintf>
   		sprintf((char *) tab, "%sTaille mot : %d \n", (char *) tab, rb->taillemot);
 800962e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009638:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800963c:	4971      	ldr	r1, [pc, #452]	; (8009804 <confirmationCMD+0x6c0>)
 800963e:	f000 ff55 	bl	800a4ec <siprintf>
   		sprintf((char *) tab, "%sAdresse : %d \n", (char *) tab, rb->adresse);
 8009642:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800964c:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8009650:	4970      	ldr	r1, [pc, #448]	; (8009814 <confirmationCMD+0x6d0>)
 8009652:	f000 ff4b 	bl	800a4ec <siprintf>
   		sprintf((char *) tab, "%sOperateur baud : %d \n", (char *) tab, rb->operateurbaud);
 8009656:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009660:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8009664:	4969      	ldr	r1, [pc, #420]	; (800980c <confirmationCMD+0x6c8>)
 8009666:	f000 ff41 	bl	800a4ec <siprintf>
   		sprintf((char *) tab, "%sFacteur baud : %d \n", (char *) tab, rb->facteurbaud);
 800966a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009674:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8009678:	4965      	ldr	r1, [pc, #404]	; (8009810 <confirmationCMD+0x6cc>)
 800967a:	f000 ff37 	bl	800a4ec <siprintf>
   		sprintf((char *) tab, "%sMot binaire : %d \n", (char *) tab, rb->motbinaire);
 800967e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009688:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800968c:	495c      	ldr	r1, [pc, #368]	; (8009800 <confirmationCMD+0x6bc>)
 800968e:	f000 ff2d 	bl	800a4ec <siprintf>

   		envoiePCSTM(tab, strlen((char *) tab));
 8009692:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009696:	4618      	mov	r0, r3
 8009698:	f7f6 fda2 	bl	80001e0 <strlen>
 800969c:	4603      	mov	r3, r0
 800969e:	b29a      	uxth	r2, r3
 80096a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80096a4:	4611      	mov	r1, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 f928 	bl	80098fc <envoiePCSTM>
    }

    sprintf((char *) dat, "\nRECEPTION FLUX VIDEO\n");
 80096ac:	f107 030c 	add.w	r3, r7, #12
 80096b0:	4a5d      	ldr	r2, [pc, #372]	; (8009828 <confirmationCMD+0x6e4>)
 80096b2:	461c      	mov	r4, r3
 80096b4:	4615      	mov	r5, r2
 80096b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80096be:	6020      	str	r0, [r4, #0]
 80096c0:	3404      	adds	r4, #4
 80096c2:	8021      	strh	r1, [r4, #0]
 80096c4:	3402      	adds	r4, #2
 80096c6:	0c0b      	lsrs	r3, r1, #16
 80096c8:	7023      	strb	r3, [r4, #0]
    if(cmd == RECEPTION_FLUX_CMD) {
 80096ca:	1dfb      	adds	r3, r7, #7
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	f040 8106 	bne.w	80098e0 <confirmationCMD+0x79c>
    	s_rec_flux* rf = (s_rec_flux*) str;
 80096d4:	463b      	mov	r3, r7
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
       if((rf->data_dispo_SDI==1) && (rf->data_dispo_DVI==1))
 80096dc:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d14e      	bne.n	8009784 <confirmationCMD+0x640>
 80096e6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d149      	bne.n	8009784 <confirmationCMD+0x640>
       {
    	   sprintf((char *) dat, "%sDonnees issues du DVI & SDI\n", (char *) dat);
 80096f0:	f107 020c 	add.w	r2, r7, #12
 80096f4:	f107 030c 	add.w	r3, r7, #12
 80096f8:	494c      	ldr	r1, [pc, #304]	; (800982c <confirmationCMD+0x6e8>)
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fef6 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sResolution : %dx%d\n", (char *) dat, rf->width, rf->height);
 8009700:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009704:	6819      	ldr	r1, [r3, #0]
 8009706:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f107 020c 	add.w	r2, r7, #12
 8009710:	f107 000c 	add.w	r0, r7, #12
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	460b      	mov	r3, r1
 8009718:	4945      	ldr	r1, [pc, #276]	; (8009830 <confirmationCMD+0x6ec>)
 800971a:	f000 fee7 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sBlanking : %dx%d \n", (char *) dat, rf->blankingH, rf->blankingV);
 800971e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009722:	6919      	ldr	r1, [r3, #16]
 8009724:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f107 020c 	add.w	r2, r7, #12
 800972e:	f107 000c 	add.w	r0, r7, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	460b      	mov	r3, r1
 8009736:	493f      	ldr	r1, [pc, #252]	; (8009834 <confirmationCMD+0x6f0>)
 8009738:	f000 fed8 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sFrame format : %d \n", (char *) dat, rf->frameformat);
 800973c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	f107 020c 	add.w	r2, r7, #12
 8009746:	f107 000c 	add.w	r0, r7, #12
 800974a:	493b      	ldr	r1, [pc, #236]	; (8009838 <confirmationCMD+0x6f4>)
 800974c:	f000 fece 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sVideo format : %d \n", (char *) dat, rf->vidformat);
 8009750:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f107 020c 	add.w	r2, r7, #12
 800975a:	f107 000c 	add.w	r0, r7, #12
 800975e:	4937      	ldr	r1, [pc, #220]	; (800983c <confirmationCMD+0x6f8>)
 8009760:	f000 fec4 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sSync : %dx%d\n", (char *) dat, rf->Hsync, rf->Vsync);
 8009764:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009768:	6899      	ldr	r1, [r3, #8]
 800976a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f107 020c 	add.w	r2, r7, #12
 8009774:	f107 000c 	add.w	r0, r7, #12
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	460b      	mov	r3, r1
 800977c:	4930      	ldr	r1, [pc, #192]	; (8009840 <confirmationCMD+0x6fc>)
 800977e:	f000 feb5 	bl	800a4ec <siprintf>
 8009782:	e0a0      	b.n	80098c6 <confirmationCMD+0x782>
     }

       else if((rf->data_dispo_SDI==1) && (rf->data_dispo_DVI==0))
 8009784:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d15c      	bne.n	8009848 <confirmationCMD+0x704>
 800978e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	2b00      	cmp	r3, #0
 8009796:	d157      	bne.n	8009848 <confirmationCMD+0x704>
       {
    	   sprintf((char *) dat, "%sDonnees issues du SDI\n", (char *) dat);
 8009798:	f107 020c 	add.w	r2, r7, #12
 800979c:	f107 030c 	add.w	r3, r7, #12
 80097a0:	4928      	ldr	r1, [pc, #160]	; (8009844 <confirmationCMD+0x700>)
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fea2 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sFrame format : %d \n", (char *) dat, rf->frameformat);
 80097a8:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	f107 020c 	add.w	r2, r7, #12
 80097b2:	f107 000c 	add.w	r0, r7, #12
 80097b6:	4920      	ldr	r1, [pc, #128]	; (8009838 <confirmationCMD+0x6f4>)
 80097b8:	f000 fe98 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sVideo format : %d \n", (char *) dat, rf->vidformat);
 80097bc:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	f107 020c 	add.w	r2, r7, #12
 80097c6:	f107 000c 	add.w	r0, r7, #12
 80097ca:	491c      	ldr	r1, [pc, #112]	; (800983c <confirmationCMD+0x6f8>)
 80097cc:	f000 fe8e 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sBlanking : %dx%d \n", (char *) dat, rf->blankingH, rf->blankingV);
 80097d0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80097d4:	6919      	ldr	r1, [r3, #16]
 80097d6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	f107 020c 	add.w	r2, r7, #12
 80097e0:	f107 000c 	add.w	r0, r7, #12
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	460b      	mov	r3, r1
 80097e8:	4912      	ldr	r1, [pc, #72]	; (8009834 <confirmationCMD+0x6f0>)
 80097ea:	f000 fe7f 	bl	800a4ec <siprintf>
 80097ee:	e06a      	b.n	80098c6 <confirmationCMD+0x782>
 80097f0:	0800c42c 	.word	0x0800c42c
 80097f4:	0800c434 	.word	0x0800c434
 80097f8:	0800c448 	.word	0x0800c448
 80097fc:	0800c458 	.word	0x0800c458
 8009800:	0800c468 	.word	0x0800c468
 8009804:	0800c480 	.word	0x0800c480
 8009808:	0800c494 	.word	0x0800c494
 800980c:	0800c4ac 	.word	0x0800c4ac
 8009810:	0800c4c4 	.word	0x0800c4c4
 8009814:	0800c4dc 	.word	0x0800c4dc
 8009818:	0800c3c4 	.word	0x0800c3c4
 800981c:	0800c3d8 	.word	0x0800c3d8
 8009820:	0800c4f0 	.word	0x0800c4f0
 8009824:	0800c510 	.word	0x0800c510
 8009828:	0800c524 	.word	0x0800c524
 800982c:	0800c53c 	.word	0x0800c53c
 8009830:	0800c55c 	.word	0x0800c55c
 8009834:	0800c574 	.word	0x0800c574
 8009838:	0800c58c 	.word	0x0800c58c
 800983c:	0800c5a4 	.word	0x0800c5a4
 8009840:	0800c5bc 	.word	0x0800c5bc
 8009844:	0800c5cc 	.word	0x0800c5cc
       }

       else if((rf->data_dispo_SDI==0) && (rf->data_dispo_DVI==1))
 8009848:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d139      	bne.n	80098c6 <confirmationCMD+0x782>
 8009852:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	2b01      	cmp	r3, #1
 800985a:	d134      	bne.n	80098c6 <confirmationCMD+0x782>
       {
    	   sprintf((char *) dat, "%sDonnees issues du DVI\n", (char *) dat);
 800985c:	f107 020c 	add.w	r2, r7, #12
 8009860:	f107 030c 	add.w	r3, r7, #12
 8009864:	4921      	ldr	r1, [pc, #132]	; (80098ec <confirmationCMD+0x7a8>)
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fe40 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sResolution : %dx%d\n", (char *) dat, rf->width, rf->height);
 800986c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009870:	6819      	ldr	r1, [r3, #0]
 8009872:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f107 020c 	add.w	r2, r7, #12
 800987c:	f107 000c 	add.w	r0, r7, #12
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	460b      	mov	r3, r1
 8009884:	491a      	ldr	r1, [pc, #104]	; (80098f0 <confirmationCMD+0x7ac>)
 8009886:	f000 fe31 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sSync : %dx%d\n", (char *) dat, rf->Hsync, rf->Vsync);
 800988a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800988e:	6899      	ldr	r1, [r3, #8]
 8009890:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f107 020c 	add.w	r2, r7, #12
 800989a:	f107 000c 	add.w	r0, r7, #12
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	460b      	mov	r3, r1
 80098a2:	4914      	ldr	r1, [pc, #80]	; (80098f4 <confirmationCMD+0x7b0>)
 80098a4:	f000 fe22 	bl	800a4ec <siprintf>
      		sprintf((char *) dat, "%sBlanking : %dx%d \n", (char *) dat, rf->blankingH, rf->blankingV);
 80098a8:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80098ac:	6919      	ldr	r1, [r3, #16]
 80098ae:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	f107 020c 	add.w	r2, r7, #12
 80098b8:	f107 000c 	add.w	r0, r7, #12
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	460b      	mov	r3, r1
 80098c0:	490d      	ldr	r1, [pc, #52]	; (80098f8 <confirmationCMD+0x7b4>)
 80098c2:	f000 fe13 	bl	800a4ec <siprintf>

       }
   		envoiePCSTM(dat, strlen((char *) dat));
 80098c6:	f107 030c 	add.w	r3, r7, #12
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7f6 fc88 	bl	80001e0 <strlen>
 80098d0:	4603      	mov	r3, r0
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	f107 030c 	add.w	r3, r7, #12
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f80e 	bl	80098fc <envoiePCSTM>
    }
}
 80098e0:	bf00      	nop
 80098e2:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bdb0      	pop	{r4, r5, r7, pc}
 80098ea:	bf00      	nop
 80098ec:	0800c5e8 	.word	0x0800c5e8
 80098f0:	0800c55c 	.word	0x0800c55c
 80098f4:	0800c5bc 	.word	0x0800c5bc
 80098f8:	0800c574 	.word	0x0800c574

080098fc <envoiePCSTM>:

void envoiePCSTM(uint8_t* Buf, uint16_t Len)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	807b      	strh	r3, [r7, #2]
	 CDC_Transmit_FS(Buf, Len); //Si on veut envoyer via un autre dispositif on peut le faire
 8009908:	887b      	ldrh	r3, [r7, #2]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f8f3 	bl	8009af8 <CDC_Transmit_FS>
	 HAL_Delay(10);
 8009912:	200a      	movs	r0, #10
 8009914:	f7f7 f82a 	bl	800096c <HAL_Delay>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <clear_buffer>:

void clear_buffer(uint8_t * buffer_verif)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0; i<140; i++)
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	e007      	b.n	800993e <clear_buffer+0x1e>
    {
            	buffer_verif[i]='\0';
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4413      	add	r3, r2
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
    for(i=0; i<140; i++)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b8b      	cmp	r3, #139	; 0x8b
 8009942:	ddf4      	ble.n	800992e <clear_buffer+0xe>
    }

}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009954:	2200      	movs	r2, #0
 8009956:	4912      	ldr	r1, [pc, #72]	; (80099a0 <MX_USB_DEVICE_Init+0x50>)
 8009958:	4812      	ldr	r0, [pc, #72]	; (80099a4 <MX_USB_DEVICE_Init+0x54>)
 800995a:	f7fd fb55 	bl	8007008 <USBD_Init>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009964:	f7f6 fe84 	bl	8000670 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009968:	490f      	ldr	r1, [pc, #60]	; (80099a8 <MX_USB_DEVICE_Init+0x58>)
 800996a:	480e      	ldr	r0, [pc, #56]	; (80099a4 <MX_USB_DEVICE_Init+0x54>)
 800996c:	f7fd fb77 	bl	800705e <USBD_RegisterClass>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009976:	f7f6 fe7b 	bl	8000670 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800997a:	490c      	ldr	r1, [pc, #48]	; (80099ac <MX_USB_DEVICE_Init+0x5c>)
 800997c:	4809      	ldr	r0, [pc, #36]	; (80099a4 <MX_USB_DEVICE_Init+0x54>)
 800997e:	f7fd faa5 	bl	8006ecc <USBD_CDC_RegisterInterface>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009988:	f7f6 fe72 	bl	8000670 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800998c:	4805      	ldr	r0, [pc, #20]	; (80099a4 <MX_USB_DEVICE_Init+0x54>)
 800998e:	f7fd fb80 	bl	8007092 <USBD_Start>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009998:	f7f6 fe6a 	bl	8000670 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800999c:	bf00      	nop
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	2000012c 	.word	0x2000012c
 80099a4:	20000688 	.word	0x20000688
 80099a8:	20000018 	.word	0x20000018
 80099ac:	2000011c 	.word	0x2000011c

080099b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099b4:	2200      	movs	r2, #0
 80099b6:	4905      	ldr	r1, [pc, #20]	; (80099cc <CDC_Init_FS+0x1c>)
 80099b8:	4805      	ldr	r0, [pc, #20]	; (80099d0 <CDC_Init_FS+0x20>)
 80099ba:	f7fd fa9e 	bl	8006efa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099be:	4905      	ldr	r1, [pc, #20]	; (80099d4 <CDC_Init_FS+0x24>)
 80099c0:	4803      	ldr	r0, [pc, #12]	; (80099d0 <CDC_Init_FS+0x20>)
 80099c2:	f7fd fab4 	bl	8006f2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	20000d34 	.word	0x20000d34
 80099d0:	20000688 	.word	0x20000688
 80099d4:	2000094c 	.word	0x2000094c

080099d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099d8:	b480      	push	{r7}
 80099da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099de:	4618      	mov	r0, r3
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	71fb      	strb	r3, [r7, #7]
 80099f4:	4613      	mov	r3, r2
 80099f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	2b23      	cmp	r3, #35	; 0x23
 80099fc:	d84a      	bhi.n	8009a94 <CDC_Control_FS+0xac>
 80099fe:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <CDC_Control_FS+0x1c>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a95 	.word	0x08009a95
 8009a08:	08009a95 	.word	0x08009a95
 8009a0c:	08009a95 	.word	0x08009a95
 8009a10:	08009a95 	.word	0x08009a95
 8009a14:	08009a95 	.word	0x08009a95
 8009a18:	08009a95 	.word	0x08009a95
 8009a1c:	08009a95 	.word	0x08009a95
 8009a20:	08009a95 	.word	0x08009a95
 8009a24:	08009a95 	.word	0x08009a95
 8009a28:	08009a95 	.word	0x08009a95
 8009a2c:	08009a95 	.word	0x08009a95
 8009a30:	08009a95 	.word	0x08009a95
 8009a34:	08009a95 	.word	0x08009a95
 8009a38:	08009a95 	.word	0x08009a95
 8009a3c:	08009a95 	.word	0x08009a95
 8009a40:	08009a95 	.word	0x08009a95
 8009a44:	08009a95 	.word	0x08009a95
 8009a48:	08009a95 	.word	0x08009a95
 8009a4c:	08009a95 	.word	0x08009a95
 8009a50:	08009a95 	.word	0x08009a95
 8009a54:	08009a95 	.word	0x08009a95
 8009a58:	08009a95 	.word	0x08009a95
 8009a5c:	08009a95 	.word	0x08009a95
 8009a60:	08009a95 	.word	0x08009a95
 8009a64:	08009a95 	.word	0x08009a95
 8009a68:	08009a95 	.word	0x08009a95
 8009a6c:	08009a95 	.word	0x08009a95
 8009a70:	08009a95 	.word	0x08009a95
 8009a74:	08009a95 	.word	0x08009a95
 8009a78:	08009a95 	.word	0x08009a95
 8009a7c:	08009a95 	.word	0x08009a95
 8009a80:	08009a95 	.word	0x08009a95
 8009a84:	08009a95 	.word	0x08009a95
 8009a88:	08009a95 	.word	0x08009a95
 8009a8c:	08009a95 	.word	0x08009a95
 8009a90:	08009a95 	.word	0x08009a95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a94:	bf00      	nop
  }

  return (USBD_OK);
 8009a96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	480f      	ldr	r0, [pc, #60]	; (8009af0 <CDC_Receive_FS+0x4c>)
 8009ab2:	f7fd fa3c 	bl	8006f2e <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ab6:	480e      	ldr	r0, [pc, #56]	; (8009af0 <CDC_Receive_FS+0x4c>)
 8009ab8:	f7fd fa7c 	bl	8006fb4 <USBD_CDC_ReceivePacket>

	  memset (buffer_verif, '\0', 64);  // clear the buffer
 8009abc:	2240      	movs	r2, #64	; 0x40
 8009abe:	2100      	movs	r1, #0
 8009ac0:	480c      	ldr	r0, [pc, #48]	; (8009af4 <CDC_Receive_FS+0x50>)
 8009ac2:	f000 fc53 	bl	800a36c <memset>
	  uint8_t len = (uint8_t)*Len;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer_verif, Buf, len);  // copy the data to the buffer
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	4808      	ldr	r0, [pc, #32]	; (8009af4 <CDC_Receive_FS+0x50>)
 8009ad4:	f000 fc3f 	bl	800a356 <memcpy>
	  memset(Buf, '\0', len);   // clear the Buf also
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	461a      	mov	r2, r3
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fc44 	bl	800a36c <memset>

	  return (USBD_OK);
 8009ae4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000688 	.word	0x20000688
 8009af4:	20000368 	.word	0x20000368

08009af8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b08:	4b0d      	ldr	r3, [pc, #52]	; (8009b40 <CDC_Transmit_FS+0x48>)
 8009b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e00b      	b.n	8009b36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b1e:	887b      	ldrh	r3, [r7, #2]
 8009b20:	461a      	mov	r2, r3
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	4806      	ldr	r0, [pc, #24]	; (8009b40 <CDC_Transmit_FS+0x48>)
 8009b26:	f7fd f9e8 	bl	8006efa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b2a:	4805      	ldr	r0, [pc, #20]	; (8009b40 <CDC_Transmit_FS+0x48>)
 8009b2c:	f7fd fa13 	bl	8006f56 <USBD_CDC_TransmitPacket>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000688 	.word	0x20000688

08009b44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2212      	movs	r2, #18
 8009b54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b56:	4b03      	ldr	r3, [pc, #12]	; (8009b64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	20000148 	.word	0x20000148

08009b68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2204      	movs	r2, #4
 8009b78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b7a:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	2000015c 	.word	0x2000015c

08009b8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	6039      	str	r1, [r7, #0]
 8009b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d105      	bne.n	8009baa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	4907      	ldr	r1, [pc, #28]	; (8009bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ba2:	4808      	ldr	r0, [pc, #32]	; (8009bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ba4:	f7fe f9e6 	bl	8007f74 <USBD_GetString>
 8009ba8:	e004      	b.n	8009bb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	4904      	ldr	r1, [pc, #16]	; (8009bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bae:	4805      	ldr	r0, [pc, #20]	; (8009bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bb0:	f7fe f9e0 	bl	8007f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bb4:	4b02      	ldr	r3, [pc, #8]	; (8009bc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	2000111c 	.word	0x2000111c
 8009bc4:	0800c604 	.word	0x0800c604

08009bc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	6039      	str	r1, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	4904      	ldr	r1, [pc, #16]	; (8009be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bd8:	4804      	ldr	r0, [pc, #16]	; (8009bec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bda:	f7fe f9cb 	bl	8007f74 <USBD_GetString>
  return USBD_StrDesc;
 8009bde:	4b02      	ldr	r3, [pc, #8]	; (8009be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	2000111c 	.word	0x2000111c
 8009bec:	0800c61c 	.word	0x0800c61c

08009bf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	221a      	movs	r2, #26
 8009c00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c02:	f000 f843 	bl	8009c8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c06:	4b02      	ldr	r3, [pc, #8]	; (8009c10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20000160 	.word	0x20000160

08009c14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	6039      	str	r1, [r7, #0]
 8009c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d105      	bne.n	8009c32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	4907      	ldr	r1, [pc, #28]	; (8009c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c2a:	4808      	ldr	r0, [pc, #32]	; (8009c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c2c:	f7fe f9a2 	bl	8007f74 <USBD_GetString>
 8009c30:	e004      	b.n	8009c3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	4904      	ldr	r1, [pc, #16]	; (8009c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c36:	4805      	ldr	r0, [pc, #20]	; (8009c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c38:	f7fe f99c 	bl	8007f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c3c:	4b02      	ldr	r3, [pc, #8]	; (8009c48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	2000111c 	.word	0x2000111c
 8009c4c:	0800c630 	.word	0x0800c630

08009c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	6039      	str	r1, [r7, #0]
 8009c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d105      	bne.n	8009c6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	4907      	ldr	r1, [pc, #28]	; (8009c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c66:	4808      	ldr	r0, [pc, #32]	; (8009c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c68:	f7fe f984 	bl	8007f74 <USBD_GetString>
 8009c6c:	e004      	b.n	8009c78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	4904      	ldr	r1, [pc, #16]	; (8009c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c72:	4805      	ldr	r0, [pc, #20]	; (8009c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c74:	f7fe f97e 	bl	8007f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c78:	4b02      	ldr	r3, [pc, #8]	; (8009c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	2000111c 	.word	0x2000111c
 8009c88:	0800c63c 	.word	0x0800c63c

08009c8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c92:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <Get_SerialNum+0x44>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c98:	4b0e      	ldr	r3, [pc, #56]	; (8009cd4 <Get_SerialNum+0x48>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <Get_SerialNum+0x4c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cb2:	2208      	movs	r2, #8
 8009cb4:	4909      	ldr	r1, [pc, #36]	; (8009cdc <Get_SerialNum+0x50>)
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 f814 	bl	8009ce4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cbc:	2204      	movs	r2, #4
 8009cbe:	4908      	ldr	r1, [pc, #32]	; (8009ce0 <Get_SerialNum+0x54>)
 8009cc0:	68b8      	ldr	r0, [r7, #8]
 8009cc2:	f000 f80f 	bl	8009ce4 <IntToUnicode>
  }
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	1ffff7ac 	.word	0x1ffff7ac
 8009cd4:	1ffff7b0 	.word	0x1ffff7b0
 8009cd8:	1ffff7b4 	.word	0x1ffff7b4
 8009cdc:	20000162 	.word	0x20000162
 8009ce0:	20000172 	.word	0x20000172

08009ce4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75fb      	strb	r3, [r7, #23]
 8009cfa:	e027      	b.n	8009d4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	0f1b      	lsrs	r3, r3, #28
 8009d00:	2b09      	cmp	r3, #9
 8009d02:	d80b      	bhi.n	8009d1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0f1b      	lsrs	r3, r3, #28
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	440b      	add	r3, r1
 8009d14:	3230      	adds	r2, #48	; 0x30
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	e00a      	b.n	8009d32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0f1b      	lsrs	r3, r3, #28
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	4619      	mov	r1, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3237      	adds	r2, #55	; 0x37
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	4413      	add	r3, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]
 8009d4c:	7dfa      	ldrb	r2, [r7, #23]
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d3d3      	bcc.n	8009cfc <IntToUnicode+0x18>
  }
}
 8009d54:	bf00      	nop
 8009d56:	371c      	adds	r7, #28
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a0d      	ldr	r2, [pc, #52]	; (8009da4 <HAL_PCD_MspInit+0x44>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d113      	bne.n	8009d9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d72:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <HAL_PCD_MspInit+0x48>)
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	4a0c      	ldr	r2, [pc, #48]	; (8009da8 <HAL_PCD_MspInit+0x48>)
 8009d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d7c:	61d3      	str	r3, [r2, #28]
 8009d7e:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <HAL_PCD_MspInit+0x48>)
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	2014      	movs	r0, #20
 8009d90:	f7f6 fee9 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009d94:	2014      	movs	r0, #20
 8009d96:	f7f6 ff02 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	40005c00 	.word	0x40005c00
 8009da8:	40021000 	.word	0x40021000

08009dac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f7fd f9ae 	bl	8007124 <USBD_LL_SetupStage>
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009de2:	78fa      	ldrb	r2, [r7, #3]
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	440b      	add	r3, r1
 8009df0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	f7fd f9de 	bl	80071ba <USBD_LL_DataOutStage>
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e18:	78fa      	ldrb	r2, [r7, #3]
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	440b      	add	r3, r1
 8009e26:	333c      	adds	r3, #60	; 0x3c
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7fd fa35 	bl	800729c <USBD_LL_DataInStage>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fd fb48 	bl	80074de <USBD_LL_SOF>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d001      	beq.n	8009e6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e6a:	f7f6 fc01 	bl	8000670 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e74:	7bfa      	ldrb	r2, [r7, #15]
 8009e76:	4611      	mov	r1, r2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fd faf5 	bl	8007468 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fd faae 	bl	80073e6 <USBD_LL_Reset>
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fd faf0 	bl	8007488 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009eb0:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <HAL_PCD_SuspendCallback+0x30>)
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	4a03      	ldr	r2, [pc, #12]	; (8009ec4 <HAL_PCD_SuspendCallback+0x30>)
 8009eb6:	f043 0306 	orr.w	r3, r3, #6
 8009eba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	e000ed00 	.word	0xe000ed00

08009ec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd faeb 	bl	80074b2 <USBD_LL_Resume>
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009eec:	4a29      	ldr	r2, [pc, #164]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a27      	ldr	r2, [pc, #156]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009ef8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009efc:	4b25      	ldr	r3, [pc, #148]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009efe:	4a26      	ldr	r2, [pc, #152]	; (8009f98 <USBD_LL_Init+0xb4>)
 8009f00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f02:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009f04:	2208      	movs	r2, #8
 8009f06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f08:	4b22      	ldr	r3, [pc, #136]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f0e:	4b21      	ldr	r3, [pc, #132]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009f10:	2202      	movs	r2, #2
 8009f12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f14:	4b1f      	ldr	r3, [pc, #124]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f1a:	4b1e      	ldr	r3, [pc, #120]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f20:	4b1c      	ldr	r3, [pc, #112]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f26:	481b      	ldr	r0, [pc, #108]	; (8009f94 <USBD_LL_Init+0xb0>)
 8009f28:	f7f7 f80e 	bl	8000f48 <HAL_PCD_Init>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009f32:	f7f6 fb9d 	bl	8000670 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f3c:	2318      	movs	r3, #24
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2100      	movs	r1, #0
 8009f42:	f7f8 fa94 	bl	800246e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f4c:	2358      	movs	r3, #88	; 0x58
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2180      	movs	r1, #128	; 0x80
 8009f52:	f7f8 fa8c 	bl	800246e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f5c:	23c0      	movs	r3, #192	; 0xc0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2181      	movs	r1, #129	; 0x81
 8009f62:	f7f8 fa84 	bl	800246e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f6c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009f70:	2200      	movs	r2, #0
 8009f72:	2101      	movs	r1, #1
 8009f74:	f7f8 fa7b 	bl	800246e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f82:	2200      	movs	r2, #0
 8009f84:	2182      	movs	r1, #130	; 0x82
 8009f86:	f7f8 fa72 	bl	800246e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	2000131c 	.word	0x2000131c
 8009f98:	40005c00 	.word	0x40005c00

08009f9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f7 f8a6 	bl	8001104 <HAL_PCD_Start>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f954 	bl	800a26c <USBD_Get_USB_Status>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	4608      	mov	r0, r1
 8009fdc:	4611      	mov	r1, r2
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	70fb      	strb	r3, [r7, #3]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70bb      	strb	r3, [r7, #2]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ffa:	78bb      	ldrb	r3, [r7, #2]
 8009ffc:	883a      	ldrh	r2, [r7, #0]
 8009ffe:	78f9      	ldrb	r1, [r7, #3]
 800a000:	f7f7 f9c2 	bl	8001388 <HAL_PCD_EP_Open>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f92e 	bl	800a26c <USBD_Get_USB_Status>
 800a010:	4603      	mov	r3, r0
 800a012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a014:	7bbb      	ldrb	r3, [r7, #14]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	4611      	mov	r1, r2
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f7 fa09 	bl	8001454 <HAL_PCD_EP_Close>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f90f 	bl	800a26c <USBD_Get_USB_Status>
 800a04e:	4603      	mov	r3, r0
 800a050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a052:	7bbb      	ldrb	r3, [r7, #14]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a076:	78fa      	ldrb	r2, [r7, #3]
 800a078:	4611      	mov	r1, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f7 faca 	bl	8001614 <HAL_PCD_EP_SetStall>
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 f8f0 	bl	800a26c <USBD_Get_USB_Status>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a090:	7bbb      	ldrb	r3, [r7, #14]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7f7 fafd 	bl	80016b8 <HAL_PCD_EP_ClrStall>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f8d1 	bl	800a26c <USBD_Get_USB_Status>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	da0c      	bge.n	800a10e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fa:	68f9      	ldr	r1, [r7, #12]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	440b      	add	r3, r1
 800a108:	3302      	adds	r3, #2
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	e00b      	b.n	800a126 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a114:	68f9      	ldr	r1, [r7, #12]
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	440b      	add	r3, r1
 800a120:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a124:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	460b      	mov	r3, r1
 800a13c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a14c:	78fa      	ldrb	r2, [r7, #3]
 800a14e:	4611      	mov	r1, r2
 800a150:	4618      	mov	r0, r3
 800a152:	f7f7 f8f4 	bl	800133e <HAL_PCD_SetAddress>
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f885 	bl	800a26c <USBD_Get_USB_Status>
 800a162:	4603      	mov	r3, r0
 800a164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a166:	7bbb      	ldrb	r3, [r7, #14]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	461a      	mov	r2, r3
 800a17c:	460b      	mov	r3, r1
 800a17e:	72fb      	strb	r3, [r7, #11]
 800a180:	4613      	mov	r3, r2
 800a182:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a192:	893b      	ldrh	r3, [r7, #8]
 800a194:	7af9      	ldrb	r1, [r7, #11]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	f7f7 f9f9 	bl	800158e <HAL_PCD_EP_Transmit>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f862 	bl	800a26c <USBD_Get_USB_Status>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b086      	sub	sp, #24
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	60f8      	str	r0, [r7, #12]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	72fb      	strb	r3, [r7, #11]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1d8:	893b      	ldrh	r3, [r7, #8]
 800a1da:	7af9      	ldrb	r1, [r7, #11]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	f7f7 f981 	bl	80014e4 <HAL_PCD_EP_Receive>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 f83f 	bl	800a26c <USBD_Get_USB_Status>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7f7 f9a3 	bl	800155e <HAL_PCD_EP_GetRxCount>
 800a218:	4603      	mov	r3, r0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a22c:	4b03      	ldr	r3, [pc, #12]	; (800a23c <USBD_static_malloc+0x18>)
}
 800a22e:	4618      	mov	r0, r3
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	200003b0 	.word	0x200003b0

0800a240 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]

}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d817      	bhi.n	800a2b0 <USBD_Get_USB_Status+0x44>
 800a280:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <USBD_Get_USB_Status+0x1c>)
 800a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a286:	bf00      	nop
 800a288:	0800a299 	.word	0x0800a299
 800a28c:	0800a29f 	.word	0x0800a29f
 800a290:	0800a2a5 	.word	0x0800a2a5
 800a294:	0800a2ab 	.word	0x0800a2ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
    break;
 800a29c:	e00b      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a2:	e008      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a8:	e005      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ae:	e002      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b4:	bf00      	nop
  }
  return usb_status;
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <__errno>:
 800a2c4:	4b01      	ldr	r3, [pc, #4]	; (800a2cc <__errno+0x8>)
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	2000017c 	.word	0x2000017c

0800a2d0 <__libc_init_array>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	4e0d      	ldr	r6, [pc, #52]	; (800a308 <__libc_init_array+0x38>)
 800a2d4:	4c0d      	ldr	r4, [pc, #52]	; (800a30c <__libc_init_array+0x3c>)
 800a2d6:	1ba4      	subs	r4, r4, r6
 800a2d8:	10a4      	asrs	r4, r4, #2
 800a2da:	2500      	movs	r5, #0
 800a2dc:	42a5      	cmp	r5, r4
 800a2de:	d109      	bne.n	800a2f4 <__libc_init_array+0x24>
 800a2e0:	4e0b      	ldr	r6, [pc, #44]	; (800a310 <__libc_init_array+0x40>)
 800a2e2:	4c0c      	ldr	r4, [pc, #48]	; (800a314 <__libc_init_array+0x44>)
 800a2e4:	f001 f944 	bl	800b570 <_init>
 800a2e8:	1ba4      	subs	r4, r4, r6
 800a2ea:	10a4      	asrs	r4, r4, #2
 800a2ec:	2500      	movs	r5, #0
 800a2ee:	42a5      	cmp	r5, r4
 800a2f0:	d105      	bne.n	800a2fe <__libc_init_array+0x2e>
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2f8:	4798      	blx	r3
 800a2fa:	3501      	adds	r5, #1
 800a2fc:	e7ee      	b.n	800a2dc <__libc_init_array+0xc>
 800a2fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a302:	4798      	blx	r3
 800a304:	3501      	adds	r5, #1
 800a306:	e7f2      	b.n	800a2ee <__libc_init_array+0x1e>
 800a308:	0800c844 	.word	0x0800c844
 800a30c:	0800c844 	.word	0x0800c844
 800a310:	0800c844 	.word	0x0800c844
 800a314:	0800c848 	.word	0x0800c848

0800a318 <malloc>:
 800a318:	4b02      	ldr	r3, [pc, #8]	; (800a324 <malloc+0xc>)
 800a31a:	4601      	mov	r1, r0
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f000 b87b 	b.w	800a418 <_malloc_r>
 800a322:	bf00      	nop
 800a324:	2000017c 	.word	0x2000017c

0800a328 <free>:
 800a328:	4b02      	ldr	r3, [pc, #8]	; (800a334 <free+0xc>)
 800a32a:	4601      	mov	r1, r0
 800a32c:	6818      	ldr	r0, [r3, #0]
 800a32e:	f000 b825 	b.w	800a37c <_free_r>
 800a332:	bf00      	nop
 800a334:	2000017c 	.word	0x2000017c

0800a338 <memcmp>:
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	2400      	movs	r4, #0
 800a33c:	42a2      	cmp	r2, r4
 800a33e:	d101      	bne.n	800a344 <memcmp+0xc>
 800a340:	2000      	movs	r0, #0
 800a342:	e007      	b.n	800a354 <memcmp+0x1c>
 800a344:	5d03      	ldrb	r3, [r0, r4]
 800a346:	3401      	adds	r4, #1
 800a348:	190d      	adds	r5, r1, r4
 800a34a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800a34e:	42ab      	cmp	r3, r5
 800a350:	d0f4      	beq.n	800a33c <memcmp+0x4>
 800a352:	1b58      	subs	r0, r3, r5
 800a354:	bd30      	pop	{r4, r5, pc}

0800a356 <memcpy>:
 800a356:	b510      	push	{r4, lr}
 800a358:	1e43      	subs	r3, r0, #1
 800a35a:	440a      	add	r2, r1
 800a35c:	4291      	cmp	r1, r2
 800a35e:	d100      	bne.n	800a362 <memcpy+0xc>
 800a360:	bd10      	pop	{r4, pc}
 800a362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a36a:	e7f7      	b.n	800a35c <memcpy+0x6>

0800a36c <memset>:
 800a36c:	4402      	add	r2, r0
 800a36e:	4603      	mov	r3, r0
 800a370:	4293      	cmp	r3, r2
 800a372:	d100      	bne.n	800a376 <memset+0xa>
 800a374:	4770      	bx	lr
 800a376:	f803 1b01 	strb.w	r1, [r3], #1
 800a37a:	e7f9      	b.n	800a370 <memset+0x4>

0800a37c <_free_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4605      	mov	r5, r0
 800a380:	2900      	cmp	r1, #0
 800a382:	d045      	beq.n	800a410 <_free_r+0x94>
 800a384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a388:	1f0c      	subs	r4, r1, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	bfb8      	it	lt
 800a38e:	18e4      	addlt	r4, r4, r3
 800a390:	f000 f912 	bl	800a5b8 <__malloc_lock>
 800a394:	4a1f      	ldr	r2, [pc, #124]	; (800a414 <_free_r+0x98>)
 800a396:	6813      	ldr	r3, [r2, #0]
 800a398:	4610      	mov	r0, r2
 800a39a:	b933      	cbnz	r3, 800a3aa <_free_r+0x2e>
 800a39c:	6063      	str	r3, [r4, #4]
 800a39e:	6014      	str	r4, [r2, #0]
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3a6:	f000 b908 	b.w	800a5ba <__malloc_unlock>
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	d90c      	bls.n	800a3c8 <_free_r+0x4c>
 800a3ae:	6821      	ldr	r1, [r4, #0]
 800a3b0:	1862      	adds	r2, r4, r1
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	bf04      	itt	eq
 800a3b6:	681a      	ldreq	r2, [r3, #0]
 800a3b8:	685b      	ldreq	r3, [r3, #4]
 800a3ba:	6063      	str	r3, [r4, #4]
 800a3bc:	bf04      	itt	eq
 800a3be:	1852      	addeq	r2, r2, r1
 800a3c0:	6022      	streq	r2, [r4, #0]
 800a3c2:	6004      	str	r4, [r0, #0]
 800a3c4:	e7ec      	b.n	800a3a0 <_free_r+0x24>
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	b10a      	cbz	r2, 800a3d0 <_free_r+0x54>
 800a3cc:	42a2      	cmp	r2, r4
 800a3ce:	d9fa      	bls.n	800a3c6 <_free_r+0x4a>
 800a3d0:	6819      	ldr	r1, [r3, #0]
 800a3d2:	1858      	adds	r0, r3, r1
 800a3d4:	42a0      	cmp	r0, r4
 800a3d6:	d10b      	bne.n	800a3f0 <_free_r+0x74>
 800a3d8:	6820      	ldr	r0, [r4, #0]
 800a3da:	4401      	add	r1, r0
 800a3dc:	1858      	adds	r0, r3, r1
 800a3de:	4282      	cmp	r2, r0
 800a3e0:	6019      	str	r1, [r3, #0]
 800a3e2:	d1dd      	bne.n	800a3a0 <_free_r+0x24>
 800a3e4:	6810      	ldr	r0, [r2, #0]
 800a3e6:	6852      	ldr	r2, [r2, #4]
 800a3e8:	605a      	str	r2, [r3, #4]
 800a3ea:	4401      	add	r1, r0
 800a3ec:	6019      	str	r1, [r3, #0]
 800a3ee:	e7d7      	b.n	800a3a0 <_free_r+0x24>
 800a3f0:	d902      	bls.n	800a3f8 <_free_r+0x7c>
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	602b      	str	r3, [r5, #0]
 800a3f6:	e7d3      	b.n	800a3a0 <_free_r+0x24>
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	1821      	adds	r1, r4, r0
 800a3fc:	428a      	cmp	r2, r1
 800a3fe:	bf04      	itt	eq
 800a400:	6811      	ldreq	r1, [r2, #0]
 800a402:	6852      	ldreq	r2, [r2, #4]
 800a404:	6062      	str	r2, [r4, #4]
 800a406:	bf04      	itt	eq
 800a408:	1809      	addeq	r1, r1, r0
 800a40a:	6021      	streq	r1, [r4, #0]
 800a40c:	605c      	str	r4, [r3, #4]
 800a40e:	e7c7      	b.n	800a3a0 <_free_r+0x24>
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	bf00      	nop
 800a414:	200005d0 	.word	0x200005d0

0800a418 <_malloc_r>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	1ccd      	adds	r5, r1, #3
 800a41c:	f025 0503 	bic.w	r5, r5, #3
 800a420:	3508      	adds	r5, #8
 800a422:	2d0c      	cmp	r5, #12
 800a424:	bf38      	it	cc
 800a426:	250c      	movcc	r5, #12
 800a428:	2d00      	cmp	r5, #0
 800a42a:	4606      	mov	r6, r0
 800a42c:	db01      	blt.n	800a432 <_malloc_r+0x1a>
 800a42e:	42a9      	cmp	r1, r5
 800a430:	d903      	bls.n	800a43a <_malloc_r+0x22>
 800a432:	230c      	movs	r3, #12
 800a434:	6033      	str	r3, [r6, #0]
 800a436:	2000      	movs	r0, #0
 800a438:	bd70      	pop	{r4, r5, r6, pc}
 800a43a:	f000 f8bd 	bl	800a5b8 <__malloc_lock>
 800a43e:	4a21      	ldr	r2, [pc, #132]	; (800a4c4 <_malloc_r+0xac>)
 800a440:	6814      	ldr	r4, [r2, #0]
 800a442:	4621      	mov	r1, r4
 800a444:	b991      	cbnz	r1, 800a46c <_malloc_r+0x54>
 800a446:	4c20      	ldr	r4, [pc, #128]	; (800a4c8 <_malloc_r+0xb0>)
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	b91b      	cbnz	r3, 800a454 <_malloc_r+0x3c>
 800a44c:	4630      	mov	r0, r6
 800a44e:	f000 f83d 	bl	800a4cc <_sbrk_r>
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	4629      	mov	r1, r5
 800a456:	4630      	mov	r0, r6
 800a458:	f000 f838 	bl	800a4cc <_sbrk_r>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d124      	bne.n	800a4aa <_malloc_r+0x92>
 800a460:	230c      	movs	r3, #12
 800a462:	6033      	str	r3, [r6, #0]
 800a464:	4630      	mov	r0, r6
 800a466:	f000 f8a8 	bl	800a5ba <__malloc_unlock>
 800a46a:	e7e4      	b.n	800a436 <_malloc_r+0x1e>
 800a46c:	680b      	ldr	r3, [r1, #0]
 800a46e:	1b5b      	subs	r3, r3, r5
 800a470:	d418      	bmi.n	800a4a4 <_malloc_r+0x8c>
 800a472:	2b0b      	cmp	r3, #11
 800a474:	d90f      	bls.n	800a496 <_malloc_r+0x7e>
 800a476:	600b      	str	r3, [r1, #0]
 800a478:	50cd      	str	r5, [r1, r3]
 800a47a:	18cc      	adds	r4, r1, r3
 800a47c:	4630      	mov	r0, r6
 800a47e:	f000 f89c 	bl	800a5ba <__malloc_unlock>
 800a482:	f104 000b 	add.w	r0, r4, #11
 800a486:	1d23      	adds	r3, r4, #4
 800a488:	f020 0007 	bic.w	r0, r0, #7
 800a48c:	1ac3      	subs	r3, r0, r3
 800a48e:	d0d3      	beq.n	800a438 <_malloc_r+0x20>
 800a490:	425a      	negs	r2, r3
 800a492:	50e2      	str	r2, [r4, r3]
 800a494:	e7d0      	b.n	800a438 <_malloc_r+0x20>
 800a496:	428c      	cmp	r4, r1
 800a498:	684b      	ldr	r3, [r1, #4]
 800a49a:	bf16      	itet	ne
 800a49c:	6063      	strne	r3, [r4, #4]
 800a49e:	6013      	streq	r3, [r2, #0]
 800a4a0:	460c      	movne	r4, r1
 800a4a2:	e7eb      	b.n	800a47c <_malloc_r+0x64>
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	6849      	ldr	r1, [r1, #4]
 800a4a8:	e7cc      	b.n	800a444 <_malloc_r+0x2c>
 800a4aa:	1cc4      	adds	r4, r0, #3
 800a4ac:	f024 0403 	bic.w	r4, r4, #3
 800a4b0:	42a0      	cmp	r0, r4
 800a4b2:	d005      	beq.n	800a4c0 <_malloc_r+0xa8>
 800a4b4:	1a21      	subs	r1, r4, r0
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f000 f808 	bl	800a4cc <_sbrk_r>
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d0cf      	beq.n	800a460 <_malloc_r+0x48>
 800a4c0:	6025      	str	r5, [r4, #0]
 800a4c2:	e7db      	b.n	800a47c <_malloc_r+0x64>
 800a4c4:	200005d0 	.word	0x200005d0
 800a4c8:	200005d4 	.word	0x200005d4

0800a4cc <_sbrk_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4c06      	ldr	r4, [pc, #24]	; (800a4e8 <_sbrk_r+0x1c>)
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	4608      	mov	r0, r1
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	f7f6 f970 	bl	80007bc <_sbrk>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_sbrk_r+0x1a>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_sbrk_r+0x1a>
 800a4e4:	602b      	str	r3, [r5, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	20001608 	.word	0x20001608

0800a4ec <siprintf>:
 800a4ec:	b40e      	push	{r1, r2, r3}
 800a4ee:	b500      	push	{lr}
 800a4f0:	b09c      	sub	sp, #112	; 0x70
 800a4f2:	ab1d      	add	r3, sp, #116	; 0x74
 800a4f4:	9002      	str	r0, [sp, #8]
 800a4f6:	9006      	str	r0, [sp, #24]
 800a4f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4fc:	4809      	ldr	r0, [pc, #36]	; (800a524 <siprintf+0x38>)
 800a4fe:	9107      	str	r1, [sp, #28]
 800a500:	9104      	str	r1, [sp, #16]
 800a502:	4909      	ldr	r1, [pc, #36]	; (800a528 <siprintf+0x3c>)
 800a504:	f853 2b04 	ldr.w	r2, [r3], #4
 800a508:	9105      	str	r1, [sp, #20]
 800a50a:	6800      	ldr	r0, [r0, #0]
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	a902      	add	r1, sp, #8
 800a510:	f000 f8ae 	bl	800a670 <_svfiprintf_r>
 800a514:	9b02      	ldr	r3, [sp, #8]
 800a516:	2200      	movs	r2, #0
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	b01c      	add	sp, #112	; 0x70
 800a51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a520:	b003      	add	sp, #12
 800a522:	4770      	bx	lr
 800a524:	2000017c 	.word	0x2000017c
 800a528:	ffff0208 	.word	0xffff0208

0800a52c <siscanf>:
 800a52c:	b40e      	push	{r1, r2, r3}
 800a52e:	b530      	push	{r4, r5, lr}
 800a530:	b09c      	sub	sp, #112	; 0x70
 800a532:	ac1f      	add	r4, sp, #124	; 0x7c
 800a534:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a538:	f854 5b04 	ldr.w	r5, [r4], #4
 800a53c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a540:	9002      	str	r0, [sp, #8]
 800a542:	9006      	str	r0, [sp, #24]
 800a544:	f7f5 fe4c 	bl	80001e0 <strlen>
 800a548:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <siscanf+0x4c>)
 800a54a:	9003      	str	r0, [sp, #12]
 800a54c:	9007      	str	r0, [sp, #28]
 800a54e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a550:	480a      	ldr	r0, [pc, #40]	; (800a57c <siscanf+0x50>)
 800a552:	9401      	str	r4, [sp, #4]
 800a554:	2300      	movs	r3, #0
 800a556:	930f      	str	r3, [sp, #60]	; 0x3c
 800a558:	9314      	str	r3, [sp, #80]	; 0x50
 800a55a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a55e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a562:	462a      	mov	r2, r5
 800a564:	4623      	mov	r3, r4
 800a566:	a902      	add	r1, sp, #8
 800a568:	6800      	ldr	r0, [r0, #0]
 800a56a:	f000 f9d3 	bl	800a914 <__ssvfiscanf_r>
 800a56e:	b01c      	add	sp, #112	; 0x70
 800a570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a574:	b003      	add	sp, #12
 800a576:	4770      	bx	lr
 800a578:	0800a581 	.word	0x0800a581
 800a57c:	2000017c 	.word	0x2000017c

0800a580 <__seofread>:
 800a580:	2000      	movs	r0, #0
 800a582:	4770      	bx	lr

0800a584 <strstr>:
 800a584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a586:	7803      	ldrb	r3, [r0, #0]
 800a588:	b17b      	cbz	r3, 800a5aa <strstr+0x26>
 800a58a:	4604      	mov	r4, r0
 800a58c:	7823      	ldrb	r3, [r4, #0]
 800a58e:	4620      	mov	r0, r4
 800a590:	1c66      	adds	r6, r4, #1
 800a592:	b17b      	cbz	r3, 800a5b4 <strstr+0x30>
 800a594:	1e4a      	subs	r2, r1, #1
 800a596:	1e63      	subs	r3, r4, #1
 800a598:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a59c:	b14d      	cbz	r5, 800a5b2 <strstr+0x2e>
 800a59e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a5a2:	42af      	cmp	r7, r5
 800a5a4:	4634      	mov	r4, r6
 800a5a6:	d0f7      	beq.n	800a598 <strstr+0x14>
 800a5a8:	e7f0      	b.n	800a58c <strstr+0x8>
 800a5aa:	780b      	ldrb	r3, [r1, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bf18      	it	ne
 800a5b0:	2000      	movne	r0, #0
 800a5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	e7fc      	b.n	800a5b2 <strstr+0x2e>

0800a5b8 <__malloc_lock>:
 800a5b8:	4770      	bx	lr

0800a5ba <__malloc_unlock>:
 800a5ba:	4770      	bx	lr

0800a5bc <__ssputs_r>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	688e      	ldr	r6, [r1, #8]
 800a5c2:	429e      	cmp	r6, r3
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	4699      	mov	r9, r3
 800a5cc:	d837      	bhi.n	800a63e <__ssputs_r+0x82>
 800a5ce:	898a      	ldrh	r2, [r1, #12]
 800a5d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d4:	d031      	beq.n	800a63a <__ssputs_r+0x7e>
 800a5d6:	6825      	ldr	r5, [r4, #0]
 800a5d8:	6909      	ldr	r1, [r1, #16]
 800a5da:	1a6f      	subs	r7, r5, r1
 800a5dc:	6965      	ldr	r5, [r4, #20]
 800a5de:	2302      	movs	r3, #2
 800a5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5e4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a5e8:	f109 0301 	add.w	r3, r9, #1
 800a5ec:	443b      	add	r3, r7
 800a5ee:	429d      	cmp	r5, r3
 800a5f0:	bf38      	it	cc
 800a5f2:	461d      	movcc	r5, r3
 800a5f4:	0553      	lsls	r3, r2, #21
 800a5f6:	d530      	bpl.n	800a65a <__ssputs_r+0x9e>
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	f7ff ff0d 	bl	800a418 <_malloc_r>
 800a5fe:	4606      	mov	r6, r0
 800a600:	b950      	cbnz	r0, 800a618 <__ssputs_r+0x5c>
 800a602:	230c      	movs	r3, #12
 800a604:	f8ca 3000 	str.w	r3, [sl]
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60e:	81a3      	strh	r3, [r4, #12]
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a618:	463a      	mov	r2, r7
 800a61a:	6921      	ldr	r1, [r4, #16]
 800a61c:	f7ff fe9b 	bl	800a356 <memcpy>
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	6126      	str	r6, [r4, #16]
 800a62e:	6165      	str	r5, [r4, #20]
 800a630:	443e      	add	r6, r7
 800a632:	1bed      	subs	r5, r5, r7
 800a634:	6026      	str	r6, [r4, #0]
 800a636:	60a5      	str	r5, [r4, #8]
 800a638:	464e      	mov	r6, r9
 800a63a:	454e      	cmp	r6, r9
 800a63c:	d900      	bls.n	800a640 <__ssputs_r+0x84>
 800a63e:	464e      	mov	r6, r9
 800a640:	4632      	mov	r2, r6
 800a642:	4641      	mov	r1, r8
 800a644:	6820      	ldr	r0, [r4, #0]
 800a646:	f000 ff3f 	bl	800b4c8 <memmove>
 800a64a:	68a3      	ldr	r3, [r4, #8]
 800a64c:	1b9b      	subs	r3, r3, r6
 800a64e:	60a3      	str	r3, [r4, #8]
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	441e      	add	r6, r3
 800a654:	6026      	str	r6, [r4, #0]
 800a656:	2000      	movs	r0, #0
 800a658:	e7dc      	b.n	800a614 <__ssputs_r+0x58>
 800a65a:	462a      	mov	r2, r5
 800a65c:	f000 ff4d 	bl	800b4fa <_realloc_r>
 800a660:	4606      	mov	r6, r0
 800a662:	2800      	cmp	r0, #0
 800a664:	d1e2      	bne.n	800a62c <__ssputs_r+0x70>
 800a666:	6921      	ldr	r1, [r4, #16]
 800a668:	4650      	mov	r0, sl
 800a66a:	f7ff fe87 	bl	800a37c <_free_r>
 800a66e:	e7c8      	b.n	800a602 <__ssputs_r+0x46>

0800a670 <_svfiprintf_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	461d      	mov	r5, r3
 800a676:	898b      	ldrh	r3, [r1, #12]
 800a678:	061f      	lsls	r7, r3, #24
 800a67a:	b09d      	sub	sp, #116	; 0x74
 800a67c:	4680      	mov	r8, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	4616      	mov	r6, r2
 800a682:	d50f      	bpl.n	800a6a4 <_svfiprintf_r+0x34>
 800a684:	690b      	ldr	r3, [r1, #16]
 800a686:	b96b      	cbnz	r3, 800a6a4 <_svfiprintf_r+0x34>
 800a688:	2140      	movs	r1, #64	; 0x40
 800a68a:	f7ff fec5 	bl	800a418 <_malloc_r>
 800a68e:	6020      	str	r0, [r4, #0]
 800a690:	6120      	str	r0, [r4, #16]
 800a692:	b928      	cbnz	r0, 800a6a0 <_svfiprintf_r+0x30>
 800a694:	230c      	movs	r3, #12
 800a696:	f8c8 3000 	str.w	r3, [r8]
 800a69a:	f04f 30ff 	mov.w	r0, #4294967295
 800a69e:	e0c8      	b.n	800a832 <_svfiprintf_r+0x1c2>
 800a6a0:	2340      	movs	r3, #64	; 0x40
 800a6a2:	6163      	str	r3, [r4, #20]
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a8:	2320      	movs	r3, #32
 800a6aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ae:	2330      	movs	r3, #48	; 0x30
 800a6b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6b4:	9503      	str	r5, [sp, #12]
 800a6b6:	f04f 0b01 	mov.w	fp, #1
 800a6ba:	4637      	mov	r7, r6
 800a6bc:	463d      	mov	r5, r7
 800a6be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a6c2:	b10b      	cbz	r3, 800a6c8 <_svfiprintf_r+0x58>
 800a6c4:	2b25      	cmp	r3, #37	; 0x25
 800a6c6:	d13e      	bne.n	800a746 <_svfiprintf_r+0xd6>
 800a6c8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a6cc:	d00b      	beq.n	800a6e6 <_svfiprintf_r+0x76>
 800a6ce:	4653      	mov	r3, sl
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	f7ff ff71 	bl	800a5bc <__ssputs_r>
 800a6da:	3001      	adds	r0, #1
 800a6dc:	f000 80a4 	beq.w	800a828 <_svfiprintf_r+0x1b8>
 800a6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e2:	4453      	add	r3, sl
 800a6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e6:	783b      	ldrb	r3, [r7, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 809d 	beq.w	800a828 <_svfiprintf_r+0x1b8>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a700:	931a      	str	r3, [sp, #104]	; 0x68
 800a702:	462f      	mov	r7, r5
 800a704:	2205      	movs	r2, #5
 800a706:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a70a:	4850      	ldr	r0, [pc, #320]	; (800a84c <_svfiprintf_r+0x1dc>)
 800a70c:	f7f5 fd70 	bl	80001f0 <memchr>
 800a710:	9b04      	ldr	r3, [sp, #16]
 800a712:	b9d0      	cbnz	r0, 800a74a <_svfiprintf_r+0xda>
 800a714:	06d9      	lsls	r1, r3, #27
 800a716:	bf44      	itt	mi
 800a718:	2220      	movmi	r2, #32
 800a71a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a71e:	071a      	lsls	r2, r3, #28
 800a720:	bf44      	itt	mi
 800a722:	222b      	movmi	r2, #43	; 0x2b
 800a724:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a728:	782a      	ldrb	r2, [r5, #0]
 800a72a:	2a2a      	cmp	r2, #42	; 0x2a
 800a72c:	d015      	beq.n	800a75a <_svfiprintf_r+0xea>
 800a72e:	9a07      	ldr	r2, [sp, #28]
 800a730:	462f      	mov	r7, r5
 800a732:	2000      	movs	r0, #0
 800a734:	250a      	movs	r5, #10
 800a736:	4639      	mov	r1, r7
 800a738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a73c:	3b30      	subs	r3, #48	; 0x30
 800a73e:	2b09      	cmp	r3, #9
 800a740:	d94d      	bls.n	800a7de <_svfiprintf_r+0x16e>
 800a742:	b1b8      	cbz	r0, 800a774 <_svfiprintf_r+0x104>
 800a744:	e00f      	b.n	800a766 <_svfiprintf_r+0xf6>
 800a746:	462f      	mov	r7, r5
 800a748:	e7b8      	b.n	800a6bc <_svfiprintf_r+0x4c>
 800a74a:	4a40      	ldr	r2, [pc, #256]	; (800a84c <_svfiprintf_r+0x1dc>)
 800a74c:	1a80      	subs	r0, r0, r2
 800a74e:	fa0b f000 	lsl.w	r0, fp, r0
 800a752:	4318      	orrs	r0, r3
 800a754:	9004      	str	r0, [sp, #16]
 800a756:	463d      	mov	r5, r7
 800a758:	e7d3      	b.n	800a702 <_svfiprintf_r+0x92>
 800a75a:	9a03      	ldr	r2, [sp, #12]
 800a75c:	1d11      	adds	r1, r2, #4
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	9103      	str	r1, [sp, #12]
 800a762:	2a00      	cmp	r2, #0
 800a764:	db01      	blt.n	800a76a <_svfiprintf_r+0xfa>
 800a766:	9207      	str	r2, [sp, #28]
 800a768:	e004      	b.n	800a774 <_svfiprintf_r+0x104>
 800a76a:	4252      	negs	r2, r2
 800a76c:	f043 0302 	orr.w	r3, r3, #2
 800a770:	9207      	str	r2, [sp, #28]
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	783b      	ldrb	r3, [r7, #0]
 800a776:	2b2e      	cmp	r3, #46	; 0x2e
 800a778:	d10c      	bne.n	800a794 <_svfiprintf_r+0x124>
 800a77a:	787b      	ldrb	r3, [r7, #1]
 800a77c:	2b2a      	cmp	r3, #42	; 0x2a
 800a77e:	d133      	bne.n	800a7e8 <_svfiprintf_r+0x178>
 800a780:	9b03      	ldr	r3, [sp, #12]
 800a782:	1d1a      	adds	r2, r3, #4
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	9203      	str	r2, [sp, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bfb8      	it	lt
 800a78c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a790:	3702      	adds	r7, #2
 800a792:	9305      	str	r3, [sp, #20]
 800a794:	4d2e      	ldr	r5, [pc, #184]	; (800a850 <_svfiprintf_r+0x1e0>)
 800a796:	7839      	ldrb	r1, [r7, #0]
 800a798:	2203      	movs	r2, #3
 800a79a:	4628      	mov	r0, r5
 800a79c:	f7f5 fd28 	bl	80001f0 <memchr>
 800a7a0:	b138      	cbz	r0, 800a7b2 <_svfiprintf_r+0x142>
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	1b40      	subs	r0, r0, r5
 800a7a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7aa:	9b04      	ldr	r3, [sp, #16]
 800a7ac:	4303      	orrs	r3, r0
 800a7ae:	3701      	adds	r7, #1
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	7839      	ldrb	r1, [r7, #0]
 800a7b4:	4827      	ldr	r0, [pc, #156]	; (800a854 <_svfiprintf_r+0x1e4>)
 800a7b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7ba:	2206      	movs	r2, #6
 800a7bc:	1c7e      	adds	r6, r7, #1
 800a7be:	f7f5 fd17 	bl	80001f0 <memchr>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d038      	beq.n	800a838 <_svfiprintf_r+0x1c8>
 800a7c6:	4b24      	ldr	r3, [pc, #144]	; (800a858 <_svfiprintf_r+0x1e8>)
 800a7c8:	bb13      	cbnz	r3, 800a810 <_svfiprintf_r+0x1a0>
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	3307      	adds	r3, #7
 800a7ce:	f023 0307 	bic.w	r3, r3, #7
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d8:	444b      	add	r3, r9
 800a7da:	9309      	str	r3, [sp, #36]	; 0x24
 800a7dc:	e76d      	b.n	800a6ba <_svfiprintf_r+0x4a>
 800a7de:	fb05 3202 	mla	r2, r5, r2, r3
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	e7a6      	b.n	800a736 <_svfiprintf_r+0xc6>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	3701      	adds	r7, #1
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	250a      	movs	r5, #10
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7f8:	3a30      	subs	r2, #48	; 0x30
 800a7fa:	2a09      	cmp	r2, #9
 800a7fc:	d903      	bls.n	800a806 <_svfiprintf_r+0x196>
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d0c8      	beq.n	800a794 <_svfiprintf_r+0x124>
 800a802:	9105      	str	r1, [sp, #20]
 800a804:	e7c6      	b.n	800a794 <_svfiprintf_r+0x124>
 800a806:	fb05 2101 	mla	r1, r5, r1, r2
 800a80a:	2301      	movs	r3, #1
 800a80c:	4607      	mov	r7, r0
 800a80e:	e7f0      	b.n	800a7f2 <_svfiprintf_r+0x182>
 800a810:	ab03      	add	r3, sp, #12
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	4622      	mov	r2, r4
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <_svfiprintf_r+0x1ec>)
 800a818:	a904      	add	r1, sp, #16
 800a81a:	4640      	mov	r0, r8
 800a81c:	f3af 8000 	nop.w
 800a820:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a824:	4681      	mov	r9, r0
 800a826:	d1d6      	bne.n	800a7d6 <_svfiprintf_r+0x166>
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	065b      	lsls	r3, r3, #25
 800a82c:	f53f af35 	bmi.w	800a69a <_svfiprintf_r+0x2a>
 800a830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a832:	b01d      	add	sp, #116	; 0x74
 800a834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a838:	ab03      	add	r3, sp, #12
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	4622      	mov	r2, r4
 800a83e:	4b07      	ldr	r3, [pc, #28]	; (800a85c <_svfiprintf_r+0x1ec>)
 800a840:	a904      	add	r1, sp, #16
 800a842:	4640      	mov	r0, r8
 800a844:	f000 fa2c 	bl	800aca0 <_printf_i>
 800a848:	e7ea      	b.n	800a820 <_svfiprintf_r+0x1b0>
 800a84a:	bf00      	nop
 800a84c:	0800c688 	.word	0x0800c688
 800a850:	0800c68e 	.word	0x0800c68e
 800a854:	0800c692 	.word	0x0800c692
 800a858:	00000000 	.word	0x00000000
 800a85c:	0800a5bd 	.word	0x0800a5bd

0800a860 <_sungetc_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	1c4b      	adds	r3, r1, #1
 800a864:	4614      	mov	r4, r2
 800a866:	d103      	bne.n	800a870 <_sungetc_r+0x10>
 800a868:	f04f 35ff 	mov.w	r5, #4294967295
 800a86c:	4628      	mov	r0, r5
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	8993      	ldrh	r3, [r2, #12]
 800a872:	f023 0320 	bic.w	r3, r3, #32
 800a876:	8193      	strh	r3, [r2, #12]
 800a878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a87a:	6852      	ldr	r2, [r2, #4]
 800a87c:	b2cd      	uxtb	r5, r1
 800a87e:	b18b      	cbz	r3, 800a8a4 <_sungetc_r+0x44>
 800a880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a882:	4293      	cmp	r3, r2
 800a884:	dd08      	ble.n	800a898 <_sungetc_r+0x38>
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	6022      	str	r2, [r4, #0]
 800a88c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a890:	6863      	ldr	r3, [r4, #4]
 800a892:	3301      	adds	r3, #1
 800a894:	6063      	str	r3, [r4, #4]
 800a896:	e7e9      	b.n	800a86c <_sungetc_r+0xc>
 800a898:	4621      	mov	r1, r4
 800a89a:	f000 fdb7 	bl	800b40c <__submore>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d0f1      	beq.n	800a886 <_sungetc_r+0x26>
 800a8a2:	e7e1      	b.n	800a868 <_sungetc_r+0x8>
 800a8a4:	6921      	ldr	r1, [r4, #16]
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	b151      	cbz	r1, 800a8c0 <_sungetc_r+0x60>
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	d208      	bcs.n	800a8c0 <_sungetc_r+0x60>
 800a8ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a8b2:	42a9      	cmp	r1, r5
 800a8b4:	d104      	bne.n	800a8c0 <_sungetc_r+0x60>
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	3201      	adds	r2, #1
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	6062      	str	r2, [r4, #4]
 800a8be:	e7d5      	b.n	800a86c <_sungetc_r+0xc>
 800a8c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8ce:	4623      	mov	r3, r4
 800a8d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e7dc      	b.n	800a894 <_sungetc_r+0x34>

0800a8da <__ssrefill_r>:
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	460c      	mov	r4, r1
 800a8de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8e0:	b169      	cbz	r1, 800a8fe <__ssrefill_r+0x24>
 800a8e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8e6:	4299      	cmp	r1, r3
 800a8e8:	d001      	beq.n	800a8ee <__ssrefill_r+0x14>
 800a8ea:	f7ff fd47 	bl	800a37c <_free_r>
 800a8ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8f0:	6063      	str	r3, [r4, #4]
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a8f6:	b113      	cbz	r3, 800a8fe <__ssrefill_r+0x24>
 800a8f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	6923      	ldr	r3, [r4, #16]
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	2300      	movs	r3, #0
 800a904:	6063      	str	r3, [r4, #4]
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	f043 0320 	orr.w	r3, r3, #32
 800a90c:	81a3      	strh	r3, [r4, #12]
 800a90e:	f04f 30ff 	mov.w	r0, #4294967295
 800a912:	e7f3      	b.n	800a8fc <__ssrefill_r+0x22>

0800a914 <__ssvfiscanf_r>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a91c:	460c      	mov	r4, r1
 800a91e:	2100      	movs	r1, #0
 800a920:	9144      	str	r1, [sp, #272]	; 0x110
 800a922:	9145      	str	r1, [sp, #276]	; 0x114
 800a924:	499f      	ldr	r1, [pc, #636]	; (800aba4 <__ssvfiscanf_r+0x290>)
 800a926:	91a0      	str	r1, [sp, #640]	; 0x280
 800a928:	f10d 0804 	add.w	r8, sp, #4
 800a92c:	499e      	ldr	r1, [pc, #632]	; (800aba8 <__ssvfiscanf_r+0x294>)
 800a92e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800abac <__ssvfiscanf_r+0x298>
 800a932:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a936:	4606      	mov	r6, r0
 800a938:	4692      	mov	sl, r2
 800a93a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	270a      	movs	r7, #10
 800a940:	f89a 3000 	ldrb.w	r3, [sl]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 812a 	beq.w	800ab9e <__ssvfiscanf_r+0x28a>
 800a94a:	4655      	mov	r5, sl
 800a94c:	f000 fd9c 	bl	800b488 <__locale_ctype_ptr>
 800a950:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a954:	4458      	add	r0, fp
 800a956:	7843      	ldrb	r3, [r0, #1]
 800a958:	f013 0308 	ands.w	r3, r3, #8
 800a95c:	d01c      	beq.n	800a998 <__ssvfiscanf_r+0x84>
 800a95e:	6863      	ldr	r3, [r4, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	dd12      	ble.n	800a98a <__ssvfiscanf_r+0x76>
 800a964:	f000 fd90 	bl	800b488 <__locale_ctype_ptr>
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	781a      	ldrb	r2, [r3, #0]
 800a96c:	4410      	add	r0, r2
 800a96e:	7842      	ldrb	r2, [r0, #1]
 800a970:	0712      	lsls	r2, r2, #28
 800a972:	d401      	bmi.n	800a978 <__ssvfiscanf_r+0x64>
 800a974:	46aa      	mov	sl, r5
 800a976:	e7e3      	b.n	800a940 <__ssvfiscanf_r+0x2c>
 800a978:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a97a:	3201      	adds	r2, #1
 800a97c:	9245      	str	r2, [sp, #276]	; 0x114
 800a97e:	6862      	ldr	r2, [r4, #4]
 800a980:	3301      	adds	r3, #1
 800a982:	3a01      	subs	r2, #1
 800a984:	6062      	str	r2, [r4, #4]
 800a986:	6023      	str	r3, [r4, #0]
 800a988:	e7e9      	b.n	800a95e <__ssvfiscanf_r+0x4a>
 800a98a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a98c:	4621      	mov	r1, r4
 800a98e:	4630      	mov	r0, r6
 800a990:	4798      	blx	r3
 800a992:	2800      	cmp	r0, #0
 800a994:	d0e6      	beq.n	800a964 <__ssvfiscanf_r+0x50>
 800a996:	e7ed      	b.n	800a974 <__ssvfiscanf_r+0x60>
 800a998:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a99c:	f040 8082 	bne.w	800aaa4 <__ssvfiscanf_r+0x190>
 800a9a0:	9343      	str	r3, [sp, #268]	; 0x10c
 800a9a2:	9341      	str	r3, [sp, #260]	; 0x104
 800a9a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9aa:	d103      	bne.n	800a9b4 <__ssvfiscanf_r+0xa0>
 800a9ac:	2310      	movs	r3, #16
 800a9ae:	9341      	str	r3, [sp, #260]	; 0x104
 800a9b0:	f10a 0502 	add.w	r5, sl, #2
 800a9b4:	46aa      	mov	sl, r5
 800a9b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a9ba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a9be:	2a09      	cmp	r2, #9
 800a9c0:	d922      	bls.n	800aa08 <__ssvfiscanf_r+0xf4>
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	4879      	ldr	r0, [pc, #484]	; (800abac <__ssvfiscanf_r+0x298>)
 800a9c6:	f7f5 fc13 	bl	80001f0 <memchr>
 800a9ca:	b138      	cbz	r0, 800a9dc <__ssvfiscanf_r+0xc8>
 800a9cc:	eba0 0309 	sub.w	r3, r0, r9
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	4098      	lsls	r0, r3
 800a9d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a9d6:	4318      	orrs	r0, r3
 800a9d8:	9041      	str	r0, [sp, #260]	; 0x104
 800a9da:	46aa      	mov	sl, r5
 800a9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e0:	2b67      	cmp	r3, #103	; 0x67
 800a9e2:	f10a 0501 	add.w	r5, sl, #1
 800a9e6:	d82b      	bhi.n	800aa40 <__ssvfiscanf_r+0x12c>
 800a9e8:	2b65      	cmp	r3, #101	; 0x65
 800a9ea:	f080 809f 	bcs.w	800ab2c <__ssvfiscanf_r+0x218>
 800a9ee:	2b47      	cmp	r3, #71	; 0x47
 800a9f0:	d810      	bhi.n	800aa14 <__ssvfiscanf_r+0x100>
 800a9f2:	2b45      	cmp	r3, #69	; 0x45
 800a9f4:	f080 809a 	bcs.w	800ab2c <__ssvfiscanf_r+0x218>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d06c      	beq.n	800aad6 <__ssvfiscanf_r+0x1c2>
 800a9fc:	2b25      	cmp	r3, #37	; 0x25
 800a9fe:	d051      	beq.n	800aaa4 <__ssvfiscanf_r+0x190>
 800aa00:	2303      	movs	r3, #3
 800aa02:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa04:	9742      	str	r7, [sp, #264]	; 0x108
 800aa06:	e027      	b.n	800aa58 <__ssvfiscanf_r+0x144>
 800aa08:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa0a:	fb07 1303 	mla	r3, r7, r3, r1
 800aa0e:	3b30      	subs	r3, #48	; 0x30
 800aa10:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa12:	e7cf      	b.n	800a9b4 <__ssvfiscanf_r+0xa0>
 800aa14:	2b5b      	cmp	r3, #91	; 0x5b
 800aa16:	d06a      	beq.n	800aaee <__ssvfiscanf_r+0x1da>
 800aa18:	d80c      	bhi.n	800aa34 <__ssvfiscanf_r+0x120>
 800aa1a:	2b58      	cmp	r3, #88	; 0x58
 800aa1c:	d1f0      	bne.n	800aa00 <__ssvfiscanf_r+0xec>
 800aa1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aa20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa24:	9241      	str	r2, [sp, #260]	; 0x104
 800aa26:	2210      	movs	r2, #16
 800aa28:	9242      	str	r2, [sp, #264]	; 0x108
 800aa2a:	2b6e      	cmp	r3, #110	; 0x6e
 800aa2c:	bf8c      	ite	hi
 800aa2e:	2304      	movhi	r3, #4
 800aa30:	2303      	movls	r3, #3
 800aa32:	e010      	b.n	800aa56 <__ssvfiscanf_r+0x142>
 800aa34:	2b63      	cmp	r3, #99	; 0x63
 800aa36:	d065      	beq.n	800ab04 <__ssvfiscanf_r+0x1f0>
 800aa38:	2b64      	cmp	r3, #100	; 0x64
 800aa3a:	d1e1      	bne.n	800aa00 <__ssvfiscanf_r+0xec>
 800aa3c:	9742      	str	r7, [sp, #264]	; 0x108
 800aa3e:	e7f4      	b.n	800aa2a <__ssvfiscanf_r+0x116>
 800aa40:	2b70      	cmp	r3, #112	; 0x70
 800aa42:	d04b      	beq.n	800aadc <__ssvfiscanf_r+0x1c8>
 800aa44:	d826      	bhi.n	800aa94 <__ssvfiscanf_r+0x180>
 800aa46:	2b6e      	cmp	r3, #110	; 0x6e
 800aa48:	d062      	beq.n	800ab10 <__ssvfiscanf_r+0x1fc>
 800aa4a:	d84c      	bhi.n	800aae6 <__ssvfiscanf_r+0x1d2>
 800aa4c:	2b69      	cmp	r3, #105	; 0x69
 800aa4e:	d1d7      	bne.n	800aa00 <__ssvfiscanf_r+0xec>
 800aa50:	2300      	movs	r3, #0
 800aa52:	9342      	str	r3, [sp, #264]	; 0x108
 800aa54:	2303      	movs	r3, #3
 800aa56:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd68      	ble.n	800ab30 <__ssvfiscanf_r+0x21c>
 800aa5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa60:	0659      	lsls	r1, r3, #25
 800aa62:	d407      	bmi.n	800aa74 <__ssvfiscanf_r+0x160>
 800aa64:	f000 fd10 	bl	800b488 <__locale_ctype_ptr>
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	4410      	add	r0, r2
 800aa6e:	7842      	ldrb	r2, [r0, #1]
 800aa70:	0712      	lsls	r2, r2, #28
 800aa72:	d464      	bmi.n	800ab3e <__ssvfiscanf_r+0x22a>
 800aa74:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	dc73      	bgt.n	800ab62 <__ssvfiscanf_r+0x24e>
 800aa7a:	466b      	mov	r3, sp
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	a941      	add	r1, sp, #260	; 0x104
 800aa80:	4630      	mov	r0, r6
 800aa82:	f000 fa1f 	bl	800aec4 <_scanf_chars>
 800aa86:	2801      	cmp	r0, #1
 800aa88:	f000 8089 	beq.w	800ab9e <__ssvfiscanf_r+0x28a>
 800aa8c:	2802      	cmp	r0, #2
 800aa8e:	f47f af71 	bne.w	800a974 <__ssvfiscanf_r+0x60>
 800aa92:	e01d      	b.n	800aad0 <__ssvfiscanf_r+0x1bc>
 800aa94:	2b75      	cmp	r3, #117	; 0x75
 800aa96:	d0d1      	beq.n	800aa3c <__ssvfiscanf_r+0x128>
 800aa98:	2b78      	cmp	r3, #120	; 0x78
 800aa9a:	d0c0      	beq.n	800aa1e <__ssvfiscanf_r+0x10a>
 800aa9c:	2b73      	cmp	r3, #115	; 0x73
 800aa9e:	d1af      	bne.n	800aa00 <__ssvfiscanf_r+0xec>
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	e7d8      	b.n	800aa56 <__ssvfiscanf_r+0x142>
 800aaa4:	6863      	ldr	r3, [r4, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	dd0c      	ble.n	800aac4 <__ssvfiscanf_r+0x1b0>
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	781a      	ldrb	r2, [r3, #0]
 800aaae:	455a      	cmp	r2, fp
 800aab0:	d175      	bne.n	800ab9e <__ssvfiscanf_r+0x28a>
 800aab2:	3301      	adds	r3, #1
 800aab4:	6862      	ldr	r2, [r4, #4]
 800aab6:	6023      	str	r3, [r4, #0]
 800aab8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800aaba:	3a01      	subs	r2, #1
 800aabc:	3301      	adds	r3, #1
 800aabe:	6062      	str	r2, [r4, #4]
 800aac0:	9345      	str	r3, [sp, #276]	; 0x114
 800aac2:	e757      	b.n	800a974 <__ssvfiscanf_r+0x60>
 800aac4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aac6:	4621      	mov	r1, r4
 800aac8:	4630      	mov	r0, r6
 800aaca:	4798      	blx	r3
 800aacc:	2800      	cmp	r0, #0
 800aace:	d0ec      	beq.n	800aaaa <__ssvfiscanf_r+0x196>
 800aad0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d159      	bne.n	800ab8a <__ssvfiscanf_r+0x276>
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	e05c      	b.n	800ab96 <__ssvfiscanf_r+0x282>
 800aadc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aade:	f042 0220 	orr.w	r2, r2, #32
 800aae2:	9241      	str	r2, [sp, #260]	; 0x104
 800aae4:	e79b      	b.n	800aa1e <__ssvfiscanf_r+0x10a>
 800aae6:	2308      	movs	r3, #8
 800aae8:	9342      	str	r3, [sp, #264]	; 0x108
 800aaea:	2304      	movs	r3, #4
 800aaec:	e7b3      	b.n	800aa56 <__ssvfiscanf_r+0x142>
 800aaee:	4629      	mov	r1, r5
 800aaf0:	4640      	mov	r0, r8
 800aaf2:	f000 fb3f 	bl	800b174 <__sccl>
 800aaf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aafc:	9341      	str	r3, [sp, #260]	; 0x104
 800aafe:	4605      	mov	r5, r0
 800ab00:	2301      	movs	r3, #1
 800ab02:	e7a8      	b.n	800aa56 <__ssvfiscanf_r+0x142>
 800ab04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab0a:	9341      	str	r3, [sp, #260]	; 0x104
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e7a2      	b.n	800aa56 <__ssvfiscanf_r+0x142>
 800ab10:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ab12:	06c3      	lsls	r3, r0, #27
 800ab14:	f53f af2e 	bmi.w	800a974 <__ssvfiscanf_r+0x60>
 800ab18:	9b00      	ldr	r3, [sp, #0]
 800ab1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab1c:	1d19      	adds	r1, r3, #4
 800ab1e:	9100      	str	r1, [sp, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	07c0      	lsls	r0, r0, #31
 800ab24:	bf4c      	ite	mi
 800ab26:	801a      	strhmi	r2, [r3, #0]
 800ab28:	601a      	strpl	r2, [r3, #0]
 800ab2a:	e723      	b.n	800a974 <__ssvfiscanf_r+0x60>
 800ab2c:	2305      	movs	r3, #5
 800ab2e:	e792      	b.n	800aa56 <__ssvfiscanf_r+0x142>
 800ab30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab32:	4621      	mov	r1, r4
 800ab34:	4630      	mov	r0, r6
 800ab36:	4798      	blx	r3
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d090      	beq.n	800aa5e <__ssvfiscanf_r+0x14a>
 800ab3c:	e7c8      	b.n	800aad0 <__ssvfiscanf_r+0x1bc>
 800ab3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab40:	3201      	adds	r2, #1
 800ab42:	9245      	str	r2, [sp, #276]	; 0x114
 800ab44:	6862      	ldr	r2, [r4, #4]
 800ab46:	3a01      	subs	r2, #1
 800ab48:	2a00      	cmp	r2, #0
 800ab4a:	6062      	str	r2, [r4, #4]
 800ab4c:	dd02      	ble.n	800ab54 <__ssvfiscanf_r+0x240>
 800ab4e:	3301      	adds	r3, #1
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	e787      	b.n	800aa64 <__ssvfiscanf_r+0x150>
 800ab54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab56:	4621      	mov	r1, r4
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4798      	blx	r3
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d081      	beq.n	800aa64 <__ssvfiscanf_r+0x150>
 800ab60:	e7b6      	b.n	800aad0 <__ssvfiscanf_r+0x1bc>
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	dc06      	bgt.n	800ab74 <__ssvfiscanf_r+0x260>
 800ab66:	466b      	mov	r3, sp
 800ab68:	4622      	mov	r2, r4
 800ab6a:	a941      	add	r1, sp, #260	; 0x104
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f000 fa0d 	bl	800af8c <_scanf_i>
 800ab72:	e788      	b.n	800aa86 <__ssvfiscanf_r+0x172>
 800ab74:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <__ssvfiscanf_r+0x29c>)
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f43f aefc 	beq.w	800a974 <__ssvfiscanf_r+0x60>
 800ab7c:	466b      	mov	r3, sp
 800ab7e:	4622      	mov	r2, r4
 800ab80:	a941      	add	r1, sp, #260	; 0x104
 800ab82:	4630      	mov	r0, r6
 800ab84:	f3af 8000 	nop.w
 800ab88:	e77d      	b.n	800aa86 <__ssvfiscanf_r+0x172>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ab90:	bf18      	it	ne
 800ab92:	f04f 30ff 	movne.w	r0, #4294967295
 800ab96:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ab9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aba0:	e7f9      	b.n	800ab96 <__ssvfiscanf_r+0x282>
 800aba2:	bf00      	nop
 800aba4:	0800a861 	.word	0x0800a861
 800aba8:	0800a8db 	.word	0x0800a8db
 800abac:	0800c68e 	.word	0x0800c68e
 800abb0:	00000000 	.word	0x00000000

0800abb4 <_printf_common>:
 800abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	4691      	mov	r9, r2
 800abba:	461f      	mov	r7, r3
 800abbc:	688a      	ldr	r2, [r1, #8]
 800abbe:	690b      	ldr	r3, [r1, #16]
 800abc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	bfb8      	it	lt
 800abc8:	4613      	movlt	r3, r2
 800abca:	f8c9 3000 	str.w	r3, [r9]
 800abce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abd2:	4606      	mov	r6, r0
 800abd4:	460c      	mov	r4, r1
 800abd6:	b112      	cbz	r2, 800abde <_printf_common+0x2a>
 800abd8:	3301      	adds	r3, #1
 800abda:	f8c9 3000 	str.w	r3, [r9]
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	0699      	lsls	r1, r3, #26
 800abe2:	bf42      	ittt	mi
 800abe4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800abe8:	3302      	addmi	r3, #2
 800abea:	f8c9 3000 	strmi.w	r3, [r9]
 800abee:	6825      	ldr	r5, [r4, #0]
 800abf0:	f015 0506 	ands.w	r5, r5, #6
 800abf4:	d107      	bne.n	800ac06 <_printf_common+0x52>
 800abf6:	f104 0a19 	add.w	sl, r4, #25
 800abfa:	68e3      	ldr	r3, [r4, #12]
 800abfc:	f8d9 2000 	ldr.w	r2, [r9]
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	42ab      	cmp	r3, r5
 800ac04:	dc28      	bgt.n	800ac58 <_printf_common+0xa4>
 800ac06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	3300      	adds	r3, #0
 800ac0e:	bf18      	it	ne
 800ac10:	2301      	movne	r3, #1
 800ac12:	0692      	lsls	r2, r2, #26
 800ac14:	d42d      	bmi.n	800ac72 <_printf_common+0xbe>
 800ac16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	47c0      	blx	r8
 800ac20:	3001      	adds	r0, #1
 800ac22:	d020      	beq.n	800ac66 <_printf_common+0xb2>
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	68e5      	ldr	r5, [r4, #12]
 800ac28:	f8d9 2000 	ldr.w	r2, [r9]
 800ac2c:	f003 0306 	and.w	r3, r3, #6
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	bf08      	it	eq
 800ac34:	1aad      	subeq	r5, r5, r2
 800ac36:	68a3      	ldr	r3, [r4, #8]
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	bf0c      	ite	eq
 800ac3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac40:	2500      	movne	r5, #0
 800ac42:	4293      	cmp	r3, r2
 800ac44:	bfc4      	itt	gt
 800ac46:	1a9b      	subgt	r3, r3, r2
 800ac48:	18ed      	addgt	r5, r5, r3
 800ac4a:	f04f 0900 	mov.w	r9, #0
 800ac4e:	341a      	adds	r4, #26
 800ac50:	454d      	cmp	r5, r9
 800ac52:	d11a      	bne.n	800ac8a <_printf_common+0xd6>
 800ac54:	2000      	movs	r0, #0
 800ac56:	e008      	b.n	800ac6a <_printf_common+0xb6>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	4652      	mov	r2, sl
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	4630      	mov	r0, r6
 800ac60:	47c0      	blx	r8
 800ac62:	3001      	adds	r0, #1
 800ac64:	d103      	bne.n	800ac6e <_printf_common+0xba>
 800ac66:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6e:	3501      	adds	r5, #1
 800ac70:	e7c3      	b.n	800abfa <_printf_common+0x46>
 800ac72:	18e1      	adds	r1, r4, r3
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	2030      	movs	r0, #48	; 0x30
 800ac78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac7c:	4422      	add	r2, r4
 800ac7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac86:	3302      	adds	r3, #2
 800ac88:	e7c5      	b.n	800ac16 <_printf_common+0x62>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4639      	mov	r1, r7
 800ac90:	4630      	mov	r0, r6
 800ac92:	47c0      	blx	r8
 800ac94:	3001      	adds	r0, #1
 800ac96:	d0e6      	beq.n	800ac66 <_printf_common+0xb2>
 800ac98:	f109 0901 	add.w	r9, r9, #1
 800ac9c:	e7d8      	b.n	800ac50 <_printf_common+0x9c>
	...

0800aca0 <_printf_i>:
 800aca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aca4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800aca8:	460c      	mov	r4, r1
 800acaa:	7e09      	ldrb	r1, [r1, #24]
 800acac:	b085      	sub	sp, #20
 800acae:	296e      	cmp	r1, #110	; 0x6e
 800acb0:	4617      	mov	r7, r2
 800acb2:	4606      	mov	r6, r0
 800acb4:	4698      	mov	r8, r3
 800acb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acb8:	f000 80b3 	beq.w	800ae22 <_printf_i+0x182>
 800acbc:	d822      	bhi.n	800ad04 <_printf_i+0x64>
 800acbe:	2963      	cmp	r1, #99	; 0x63
 800acc0:	d036      	beq.n	800ad30 <_printf_i+0x90>
 800acc2:	d80a      	bhi.n	800acda <_printf_i+0x3a>
 800acc4:	2900      	cmp	r1, #0
 800acc6:	f000 80b9 	beq.w	800ae3c <_printf_i+0x19c>
 800acca:	2958      	cmp	r1, #88	; 0x58
 800accc:	f000 8083 	beq.w	800add6 <_printf_i+0x136>
 800acd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800acd8:	e032      	b.n	800ad40 <_printf_i+0xa0>
 800acda:	2964      	cmp	r1, #100	; 0x64
 800acdc:	d001      	beq.n	800ace2 <_printf_i+0x42>
 800acde:	2969      	cmp	r1, #105	; 0x69
 800ace0:	d1f6      	bne.n	800acd0 <_printf_i+0x30>
 800ace2:	6820      	ldr	r0, [r4, #0]
 800ace4:	6813      	ldr	r3, [r2, #0]
 800ace6:	0605      	lsls	r5, r0, #24
 800ace8:	f103 0104 	add.w	r1, r3, #4
 800acec:	d52a      	bpl.n	800ad44 <_printf_i+0xa4>
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6011      	str	r1, [r2, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	da03      	bge.n	800acfe <_printf_i+0x5e>
 800acf6:	222d      	movs	r2, #45	; 0x2d
 800acf8:	425b      	negs	r3, r3
 800acfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800acfe:	486f      	ldr	r0, [pc, #444]	; (800aebc <_printf_i+0x21c>)
 800ad00:	220a      	movs	r2, #10
 800ad02:	e039      	b.n	800ad78 <_printf_i+0xd8>
 800ad04:	2973      	cmp	r1, #115	; 0x73
 800ad06:	f000 809d 	beq.w	800ae44 <_printf_i+0x1a4>
 800ad0a:	d808      	bhi.n	800ad1e <_printf_i+0x7e>
 800ad0c:	296f      	cmp	r1, #111	; 0x6f
 800ad0e:	d020      	beq.n	800ad52 <_printf_i+0xb2>
 800ad10:	2970      	cmp	r1, #112	; 0x70
 800ad12:	d1dd      	bne.n	800acd0 <_printf_i+0x30>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	f043 0320 	orr.w	r3, r3, #32
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	e003      	b.n	800ad26 <_printf_i+0x86>
 800ad1e:	2975      	cmp	r1, #117	; 0x75
 800ad20:	d017      	beq.n	800ad52 <_printf_i+0xb2>
 800ad22:	2978      	cmp	r1, #120	; 0x78
 800ad24:	d1d4      	bne.n	800acd0 <_printf_i+0x30>
 800ad26:	2378      	movs	r3, #120	; 0x78
 800ad28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad2c:	4864      	ldr	r0, [pc, #400]	; (800aec0 <_printf_i+0x220>)
 800ad2e:	e055      	b.n	800addc <_printf_i+0x13c>
 800ad30:	6813      	ldr	r3, [r2, #0]
 800ad32:	1d19      	adds	r1, r3, #4
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6011      	str	r1, [r2, #0]
 800ad38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad40:	2301      	movs	r3, #1
 800ad42:	e08c      	b.n	800ae5e <_printf_i+0x1be>
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	6011      	str	r1, [r2, #0]
 800ad48:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad4c:	bf18      	it	ne
 800ad4e:	b21b      	sxthne	r3, r3
 800ad50:	e7cf      	b.n	800acf2 <_printf_i+0x52>
 800ad52:	6813      	ldr	r3, [r2, #0]
 800ad54:	6825      	ldr	r5, [r4, #0]
 800ad56:	1d18      	adds	r0, r3, #4
 800ad58:	6010      	str	r0, [r2, #0]
 800ad5a:	0628      	lsls	r0, r5, #24
 800ad5c:	d501      	bpl.n	800ad62 <_printf_i+0xc2>
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	e002      	b.n	800ad68 <_printf_i+0xc8>
 800ad62:	0668      	lsls	r0, r5, #25
 800ad64:	d5fb      	bpl.n	800ad5e <_printf_i+0xbe>
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	4854      	ldr	r0, [pc, #336]	; (800aebc <_printf_i+0x21c>)
 800ad6a:	296f      	cmp	r1, #111	; 0x6f
 800ad6c:	bf14      	ite	ne
 800ad6e:	220a      	movne	r2, #10
 800ad70:	2208      	moveq	r2, #8
 800ad72:	2100      	movs	r1, #0
 800ad74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad78:	6865      	ldr	r5, [r4, #4]
 800ad7a:	60a5      	str	r5, [r4, #8]
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	f2c0 8095 	blt.w	800aeac <_printf_i+0x20c>
 800ad82:	6821      	ldr	r1, [r4, #0]
 800ad84:	f021 0104 	bic.w	r1, r1, #4
 800ad88:	6021      	str	r1, [r4, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d13d      	bne.n	800ae0a <_printf_i+0x16a>
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	f040 808e 	bne.w	800aeb0 <_printf_i+0x210>
 800ad94:	4665      	mov	r5, ip
 800ad96:	2a08      	cmp	r2, #8
 800ad98:	d10b      	bne.n	800adb2 <_printf_i+0x112>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	07db      	lsls	r3, r3, #31
 800ad9e:	d508      	bpl.n	800adb2 <_printf_i+0x112>
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	6862      	ldr	r2, [r4, #4]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	bfde      	ittt	le
 800ada8:	2330      	movle	r3, #48	; 0x30
 800adaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adb2:	ebac 0305 	sub.w	r3, ip, r5
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	f8cd 8000 	str.w	r8, [sp]
 800adbc:	463b      	mov	r3, r7
 800adbe:	aa03      	add	r2, sp, #12
 800adc0:	4621      	mov	r1, r4
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff fef6 	bl	800abb4 <_printf_common>
 800adc8:	3001      	adds	r0, #1
 800adca:	d14d      	bne.n	800ae68 <_printf_i+0x1c8>
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295
 800add0:	b005      	add	sp, #20
 800add2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800add6:	4839      	ldr	r0, [pc, #228]	; (800aebc <_printf_i+0x21c>)
 800add8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800addc:	6813      	ldr	r3, [r2, #0]
 800adde:	6821      	ldr	r1, [r4, #0]
 800ade0:	1d1d      	adds	r5, r3, #4
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6015      	str	r5, [r2, #0]
 800ade6:	060a      	lsls	r2, r1, #24
 800ade8:	d50b      	bpl.n	800ae02 <_printf_i+0x162>
 800adea:	07ca      	lsls	r2, r1, #31
 800adec:	bf44      	itt	mi
 800adee:	f041 0120 	orrmi.w	r1, r1, #32
 800adf2:	6021      	strmi	r1, [r4, #0]
 800adf4:	b91b      	cbnz	r3, 800adfe <_printf_i+0x15e>
 800adf6:	6822      	ldr	r2, [r4, #0]
 800adf8:	f022 0220 	bic.w	r2, r2, #32
 800adfc:	6022      	str	r2, [r4, #0]
 800adfe:	2210      	movs	r2, #16
 800ae00:	e7b7      	b.n	800ad72 <_printf_i+0xd2>
 800ae02:	064d      	lsls	r5, r1, #25
 800ae04:	bf48      	it	mi
 800ae06:	b29b      	uxthmi	r3, r3
 800ae08:	e7ef      	b.n	800adea <_printf_i+0x14a>
 800ae0a:	4665      	mov	r5, ip
 800ae0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae10:	fb02 3311 	mls	r3, r2, r1, r3
 800ae14:	5cc3      	ldrb	r3, [r0, r3]
 800ae16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d1f5      	bne.n	800ae0c <_printf_i+0x16c>
 800ae20:	e7b9      	b.n	800ad96 <_printf_i+0xf6>
 800ae22:	6813      	ldr	r3, [r2, #0]
 800ae24:	6825      	ldr	r5, [r4, #0]
 800ae26:	6961      	ldr	r1, [r4, #20]
 800ae28:	1d18      	adds	r0, r3, #4
 800ae2a:	6010      	str	r0, [r2, #0]
 800ae2c:	0628      	lsls	r0, r5, #24
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	d501      	bpl.n	800ae36 <_printf_i+0x196>
 800ae32:	6019      	str	r1, [r3, #0]
 800ae34:	e002      	b.n	800ae3c <_printf_i+0x19c>
 800ae36:	066a      	lsls	r2, r5, #25
 800ae38:	d5fb      	bpl.n	800ae32 <_printf_i+0x192>
 800ae3a:	8019      	strh	r1, [r3, #0]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	4665      	mov	r5, ip
 800ae42:	e7b9      	b.n	800adb8 <_printf_i+0x118>
 800ae44:	6813      	ldr	r3, [r2, #0]
 800ae46:	1d19      	adds	r1, r3, #4
 800ae48:	6011      	str	r1, [r2, #0]
 800ae4a:	681d      	ldr	r5, [r3, #0]
 800ae4c:	6862      	ldr	r2, [r4, #4]
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4628      	mov	r0, r5
 800ae52:	f7f5 f9cd 	bl	80001f0 <memchr>
 800ae56:	b108      	cbz	r0, 800ae5c <_printf_i+0x1bc>
 800ae58:	1b40      	subs	r0, r0, r5
 800ae5a:	6060      	str	r0, [r4, #4]
 800ae5c:	6863      	ldr	r3, [r4, #4]
 800ae5e:	6123      	str	r3, [r4, #16]
 800ae60:	2300      	movs	r3, #0
 800ae62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae66:	e7a7      	b.n	800adb8 <_printf_i+0x118>
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	4630      	mov	r0, r6
 800ae70:	47c0      	blx	r8
 800ae72:	3001      	adds	r0, #1
 800ae74:	d0aa      	beq.n	800adcc <_printf_i+0x12c>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	079b      	lsls	r3, r3, #30
 800ae7a:	d413      	bmi.n	800aea4 <_printf_i+0x204>
 800ae7c:	68e0      	ldr	r0, [r4, #12]
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	4298      	cmp	r0, r3
 800ae82:	bfb8      	it	lt
 800ae84:	4618      	movlt	r0, r3
 800ae86:	e7a3      	b.n	800add0 <_printf_i+0x130>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	464a      	mov	r2, r9
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4630      	mov	r0, r6
 800ae90:	47c0      	blx	r8
 800ae92:	3001      	adds	r0, #1
 800ae94:	d09a      	beq.n	800adcc <_printf_i+0x12c>
 800ae96:	3501      	adds	r5, #1
 800ae98:	68e3      	ldr	r3, [r4, #12]
 800ae9a:	9a03      	ldr	r2, [sp, #12]
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	42ab      	cmp	r3, r5
 800aea0:	dcf2      	bgt.n	800ae88 <_printf_i+0x1e8>
 800aea2:	e7eb      	b.n	800ae7c <_printf_i+0x1dc>
 800aea4:	2500      	movs	r5, #0
 800aea6:	f104 0919 	add.w	r9, r4, #25
 800aeaa:	e7f5      	b.n	800ae98 <_printf_i+0x1f8>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1ac      	bne.n	800ae0a <_printf_i+0x16a>
 800aeb0:	7803      	ldrb	r3, [r0, #0]
 800aeb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeba:	e76c      	b.n	800ad96 <_printf_i+0xf6>
 800aebc:	0800c699 	.word	0x0800c699
 800aec0:	0800c6aa 	.word	0x0800c6aa

0800aec4 <_scanf_chars>:
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec8:	4615      	mov	r5, r2
 800aeca:	688a      	ldr	r2, [r1, #8]
 800aecc:	4680      	mov	r8, r0
 800aece:	460c      	mov	r4, r1
 800aed0:	b932      	cbnz	r2, 800aee0 <_scanf_chars+0x1c>
 800aed2:	698a      	ldr	r2, [r1, #24]
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	bf14      	ite	ne
 800aed8:	f04f 32ff 	movne.w	r2, #4294967295
 800aedc:	2201      	moveq	r2, #1
 800aede:	608a      	str	r2, [r1, #8]
 800aee0:	6822      	ldr	r2, [r4, #0]
 800aee2:	06d1      	lsls	r1, r2, #27
 800aee4:	bf5f      	itttt	pl
 800aee6:	681a      	ldrpl	r2, [r3, #0]
 800aee8:	1d11      	addpl	r1, r2, #4
 800aeea:	6019      	strpl	r1, [r3, #0]
 800aeec:	6817      	ldrpl	r7, [r2, #0]
 800aeee:	2600      	movs	r6, #0
 800aef0:	69a3      	ldr	r3, [r4, #24]
 800aef2:	b1db      	cbz	r3, 800af2c <_scanf_chars+0x68>
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d107      	bne.n	800af08 <_scanf_chars+0x44>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	6962      	ldr	r2, [r4, #20]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	5cd3      	ldrb	r3, [r2, r3]
 800af00:	b9a3      	cbnz	r3, 800af2c <_scanf_chars+0x68>
 800af02:	2e00      	cmp	r6, #0
 800af04:	d132      	bne.n	800af6c <_scanf_chars+0xa8>
 800af06:	e006      	b.n	800af16 <_scanf_chars+0x52>
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d007      	beq.n	800af1c <_scanf_chars+0x58>
 800af0c:	2e00      	cmp	r6, #0
 800af0e:	d12d      	bne.n	800af6c <_scanf_chars+0xa8>
 800af10:	69a3      	ldr	r3, [r4, #24]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d12a      	bne.n	800af6c <_scanf_chars+0xa8>
 800af16:	2001      	movs	r0, #1
 800af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1c:	f000 fab4 	bl	800b488 <__locale_ctype_ptr>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	4418      	add	r0, r3
 800af26:	7843      	ldrb	r3, [r0, #1]
 800af28:	071b      	lsls	r3, r3, #28
 800af2a:	d4ef      	bmi.n	800af0c <_scanf_chars+0x48>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	06da      	lsls	r2, r3, #27
 800af30:	bf5e      	ittt	pl
 800af32:	682b      	ldrpl	r3, [r5, #0]
 800af34:	781b      	ldrbpl	r3, [r3, #0]
 800af36:	703b      	strbpl	r3, [r7, #0]
 800af38:	682a      	ldr	r2, [r5, #0]
 800af3a:	686b      	ldr	r3, [r5, #4]
 800af3c:	f102 0201 	add.w	r2, r2, #1
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	68a2      	ldr	r2, [r4, #8]
 800af44:	f103 33ff 	add.w	r3, r3, #4294967295
 800af48:	f102 32ff 	add.w	r2, r2, #4294967295
 800af4c:	606b      	str	r3, [r5, #4]
 800af4e:	f106 0601 	add.w	r6, r6, #1
 800af52:	bf58      	it	pl
 800af54:	3701      	addpl	r7, #1
 800af56:	60a2      	str	r2, [r4, #8]
 800af58:	b142      	cbz	r2, 800af6c <_scanf_chars+0xa8>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dcc8      	bgt.n	800aef0 <_scanf_chars+0x2c>
 800af5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af62:	4629      	mov	r1, r5
 800af64:	4640      	mov	r0, r8
 800af66:	4798      	blx	r3
 800af68:	2800      	cmp	r0, #0
 800af6a:	d0c1      	beq.n	800aef0 <_scanf_chars+0x2c>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	f013 0310 	ands.w	r3, r3, #16
 800af72:	d105      	bne.n	800af80 <_scanf_chars+0xbc>
 800af74:	68e2      	ldr	r2, [r4, #12]
 800af76:	3201      	adds	r2, #1
 800af78:	60e2      	str	r2, [r4, #12]
 800af7a:	69a2      	ldr	r2, [r4, #24]
 800af7c:	b102      	cbz	r2, 800af80 <_scanf_chars+0xbc>
 800af7e:	703b      	strb	r3, [r7, #0]
 800af80:	6923      	ldr	r3, [r4, #16]
 800af82:	441e      	add	r6, r3
 800af84:	6126      	str	r6, [r4, #16]
 800af86:	2000      	movs	r0, #0
 800af88:	e7c6      	b.n	800af18 <_scanf_chars+0x54>
	...

0800af8c <_scanf_i>:
 800af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	469a      	mov	sl, r3
 800af92:	4b74      	ldr	r3, [pc, #464]	; (800b164 <_scanf_i+0x1d8>)
 800af94:	460c      	mov	r4, r1
 800af96:	4683      	mov	fp, r0
 800af98:	4616      	mov	r6, r2
 800af9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af9e:	b087      	sub	sp, #28
 800afa0:	ab03      	add	r3, sp, #12
 800afa2:	68a7      	ldr	r7, [r4, #8]
 800afa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800afa8:	4b6f      	ldr	r3, [pc, #444]	; (800b168 <_scanf_i+0x1dc>)
 800afaa:	69a1      	ldr	r1, [r4, #24]
 800afac:	4a6f      	ldr	r2, [pc, #444]	; (800b16c <_scanf_i+0x1e0>)
 800afae:	2903      	cmp	r1, #3
 800afb0:	bf08      	it	eq
 800afb2:	461a      	moveq	r2, r3
 800afb4:	1e7b      	subs	r3, r7, #1
 800afb6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800afba:	bf84      	itt	hi
 800afbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800afc0:	60a3      	strhi	r3, [r4, #8]
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	9200      	str	r2, [sp, #0]
 800afc6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800afca:	bf88      	it	hi
 800afcc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800afd0:	f104 091c 	add.w	r9, r4, #28
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	bf8c      	ite	hi
 800afd8:	197f      	addhi	r7, r7, r5
 800afda:	2700      	movls	r7, #0
 800afdc:	464b      	mov	r3, r9
 800afde:	f04f 0800 	mov.w	r8, #0
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	6831      	ldr	r1, [r6, #0]
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	2202      	movs	r2, #2
 800afea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800afee:	7809      	ldrb	r1, [r1, #0]
 800aff0:	f7f5 f8fe 	bl	80001f0 <memchr>
 800aff4:	9b01      	ldr	r3, [sp, #4]
 800aff6:	b330      	cbz	r0, 800b046 <_scanf_i+0xba>
 800aff8:	f1b8 0f01 	cmp.w	r8, #1
 800affc:	d15a      	bne.n	800b0b4 <_scanf_i+0x128>
 800affe:	6862      	ldr	r2, [r4, #4]
 800b000:	b92a      	cbnz	r2, 800b00e <_scanf_i+0x82>
 800b002:	6822      	ldr	r2, [r4, #0]
 800b004:	2108      	movs	r1, #8
 800b006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b00a:	6061      	str	r1, [r4, #4]
 800b00c:	6022      	str	r2, [r4, #0]
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b014:	6022      	str	r2, [r4, #0]
 800b016:	68a2      	ldr	r2, [r4, #8]
 800b018:	1e51      	subs	r1, r2, #1
 800b01a:	60a1      	str	r1, [r4, #8]
 800b01c:	b19a      	cbz	r2, 800b046 <_scanf_i+0xba>
 800b01e:	6832      	ldr	r2, [r6, #0]
 800b020:	1c51      	adds	r1, r2, #1
 800b022:	6031      	str	r1, [r6, #0]
 800b024:	7812      	ldrb	r2, [r2, #0]
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	1c5d      	adds	r5, r3, #1
 800b02a:	6873      	ldr	r3, [r6, #4]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	6073      	str	r3, [r6, #4]
 800b032:	dc07      	bgt.n	800b044 <_scanf_i+0xb8>
 800b034:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b038:	4631      	mov	r1, r6
 800b03a:	4658      	mov	r0, fp
 800b03c:	4798      	blx	r3
 800b03e:	2800      	cmp	r0, #0
 800b040:	f040 8086 	bne.w	800b150 <_scanf_i+0x1c4>
 800b044:	462b      	mov	r3, r5
 800b046:	f108 0801 	add.w	r8, r8, #1
 800b04a:	f1b8 0f03 	cmp.w	r8, #3
 800b04e:	d1c8      	bne.n	800afe2 <_scanf_i+0x56>
 800b050:	6862      	ldr	r2, [r4, #4]
 800b052:	b90a      	cbnz	r2, 800b058 <_scanf_i+0xcc>
 800b054:	220a      	movs	r2, #10
 800b056:	6062      	str	r2, [r4, #4]
 800b058:	6862      	ldr	r2, [r4, #4]
 800b05a:	4945      	ldr	r1, [pc, #276]	; (800b170 <_scanf_i+0x1e4>)
 800b05c:	6960      	ldr	r0, [r4, #20]
 800b05e:	9301      	str	r3, [sp, #4]
 800b060:	1a89      	subs	r1, r1, r2
 800b062:	f000 f887 	bl	800b174 <__sccl>
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	f04f 0800 	mov.w	r8, #0
 800b06c:	461d      	mov	r5, r3
 800b06e:	68a3      	ldr	r3, [r4, #8]
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d03a      	beq.n	800b0ec <_scanf_i+0x160>
 800b076:	6831      	ldr	r1, [r6, #0]
 800b078:	6960      	ldr	r0, [r4, #20]
 800b07a:	f891 c000 	ldrb.w	ip, [r1]
 800b07e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b082:	2800      	cmp	r0, #0
 800b084:	d032      	beq.n	800b0ec <_scanf_i+0x160>
 800b086:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b08a:	d121      	bne.n	800b0d0 <_scanf_i+0x144>
 800b08c:	0510      	lsls	r0, r2, #20
 800b08e:	d51f      	bpl.n	800b0d0 <_scanf_i+0x144>
 800b090:	f108 0801 	add.w	r8, r8, #1
 800b094:	b117      	cbz	r7, 800b09c <_scanf_i+0x110>
 800b096:	3301      	adds	r3, #1
 800b098:	3f01      	subs	r7, #1
 800b09a:	60a3      	str	r3, [r4, #8]
 800b09c:	6873      	ldr	r3, [r6, #4]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	6073      	str	r3, [r6, #4]
 800b0a4:	dd1b      	ble.n	800b0de <_scanf_i+0x152>
 800b0a6:	6833      	ldr	r3, [r6, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	6033      	str	r3, [r6, #0]
 800b0ac:	68a3      	ldr	r3, [r4, #8]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	60a3      	str	r3, [r4, #8]
 800b0b2:	e7dc      	b.n	800b06e <_scanf_i+0xe2>
 800b0b4:	f1b8 0f02 	cmp.w	r8, #2
 800b0b8:	d1ad      	bne.n	800b016 <_scanf_i+0x8a>
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b0c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b0c4:	d1bf      	bne.n	800b046 <_scanf_i+0xba>
 800b0c6:	2110      	movs	r1, #16
 800b0c8:	6061      	str	r1, [r4, #4]
 800b0ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0ce:	e7a1      	b.n	800b014 <_scanf_i+0x88>
 800b0d0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b0d4:	6022      	str	r2, [r4, #0]
 800b0d6:	780b      	ldrb	r3, [r1, #0]
 800b0d8:	702b      	strb	r3, [r5, #0]
 800b0da:	3501      	adds	r5, #1
 800b0dc:	e7de      	b.n	800b09c <_scanf_i+0x110>
 800b0de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4658      	mov	r0, fp
 800b0e6:	4798      	blx	r3
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d0df      	beq.n	800b0ac <_scanf_i+0x120>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	05d9      	lsls	r1, r3, #23
 800b0f0:	d50c      	bpl.n	800b10c <_scanf_i+0x180>
 800b0f2:	454d      	cmp	r5, r9
 800b0f4:	d908      	bls.n	800b108 <_scanf_i+0x17c>
 800b0f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b0fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0fe:	4632      	mov	r2, r6
 800b100:	4658      	mov	r0, fp
 800b102:	4798      	blx	r3
 800b104:	1e6f      	subs	r7, r5, #1
 800b106:	463d      	mov	r5, r7
 800b108:	454d      	cmp	r5, r9
 800b10a:	d029      	beq.n	800b160 <_scanf_i+0x1d4>
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	f012 0210 	ands.w	r2, r2, #16
 800b112:	d113      	bne.n	800b13c <_scanf_i+0x1b0>
 800b114:	702a      	strb	r2, [r5, #0]
 800b116:	6863      	ldr	r3, [r4, #4]
 800b118:	9e00      	ldr	r6, [sp, #0]
 800b11a:	4649      	mov	r1, r9
 800b11c:	4658      	mov	r0, fp
 800b11e:	47b0      	blx	r6
 800b120:	f8da 3000 	ldr.w	r3, [sl]
 800b124:	6821      	ldr	r1, [r4, #0]
 800b126:	1d1a      	adds	r2, r3, #4
 800b128:	f8ca 2000 	str.w	r2, [sl]
 800b12c:	f011 0f20 	tst.w	r1, #32
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	d010      	beq.n	800b156 <_scanf_i+0x1ca>
 800b134:	6018      	str	r0, [r3, #0]
 800b136:	68e3      	ldr	r3, [r4, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	60e3      	str	r3, [r4, #12]
 800b13c:	eba5 0509 	sub.w	r5, r5, r9
 800b140:	44a8      	add	r8, r5
 800b142:	6925      	ldr	r5, [r4, #16]
 800b144:	4445      	add	r5, r8
 800b146:	6125      	str	r5, [r4, #16]
 800b148:	2000      	movs	r0, #0
 800b14a:	b007      	add	sp, #28
 800b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b150:	f04f 0800 	mov.w	r8, #0
 800b154:	e7ca      	b.n	800b0ec <_scanf_i+0x160>
 800b156:	07ca      	lsls	r2, r1, #31
 800b158:	bf4c      	ite	mi
 800b15a:	8018      	strhmi	r0, [r3, #0]
 800b15c:	6018      	strpl	r0, [r3, #0]
 800b15e:	e7ea      	b.n	800b136 <_scanf_i+0x1aa>
 800b160:	2001      	movs	r0, #1
 800b162:	e7f2      	b.n	800b14a <_scanf_i+0x1be>
 800b164:	0800c64c 	.word	0x0800c64c
 800b168:	0800b2d1 	.word	0x0800b2d1
 800b16c:	0800b3e9 	.word	0x0800b3e9
 800b170:	0800c6cb 	.word	0x0800c6cb

0800b174 <__sccl>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	780b      	ldrb	r3, [r1, #0]
 800b178:	2b5e      	cmp	r3, #94	; 0x5e
 800b17a:	bf13      	iteet	ne
 800b17c:	1c4a      	addne	r2, r1, #1
 800b17e:	1c8a      	addeq	r2, r1, #2
 800b180:	784b      	ldrbeq	r3, [r1, #1]
 800b182:	2100      	movne	r1, #0
 800b184:	bf08      	it	eq
 800b186:	2101      	moveq	r1, #1
 800b188:	1e44      	subs	r4, r0, #1
 800b18a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800b18e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800b192:	42ac      	cmp	r4, r5
 800b194:	d1fb      	bne.n	800b18e <__sccl+0x1a>
 800b196:	b913      	cbnz	r3, 800b19e <__sccl+0x2a>
 800b198:	3a01      	subs	r2, #1
 800b19a:	4610      	mov	r0, r2
 800b19c:	bd70      	pop	{r4, r5, r6, pc}
 800b19e:	f081 0401 	eor.w	r4, r1, #1
 800b1a2:	54c4      	strb	r4, [r0, r3]
 800b1a4:	1c51      	adds	r1, r2, #1
 800b1a6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800b1aa:	2d2d      	cmp	r5, #45	; 0x2d
 800b1ac:	f101 36ff 	add.w	r6, r1, #4294967295
 800b1b0:	460a      	mov	r2, r1
 800b1b2:	d006      	beq.n	800b1c2 <__sccl+0x4e>
 800b1b4:	2d5d      	cmp	r5, #93	; 0x5d
 800b1b6:	d0f0      	beq.n	800b19a <__sccl+0x26>
 800b1b8:	b90d      	cbnz	r5, 800b1be <__sccl+0x4a>
 800b1ba:	4632      	mov	r2, r6
 800b1bc:	e7ed      	b.n	800b19a <__sccl+0x26>
 800b1be:	462b      	mov	r3, r5
 800b1c0:	e7ef      	b.n	800b1a2 <__sccl+0x2e>
 800b1c2:	780e      	ldrb	r6, [r1, #0]
 800b1c4:	2e5d      	cmp	r6, #93	; 0x5d
 800b1c6:	d0fa      	beq.n	800b1be <__sccl+0x4a>
 800b1c8:	42b3      	cmp	r3, r6
 800b1ca:	dcf8      	bgt.n	800b1be <__sccl+0x4a>
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	429e      	cmp	r6, r3
 800b1d0:	54c4      	strb	r4, [r0, r3]
 800b1d2:	dcfb      	bgt.n	800b1cc <__sccl+0x58>
 800b1d4:	3102      	adds	r1, #2
 800b1d6:	e7e6      	b.n	800b1a6 <__sccl+0x32>

0800b1d8 <_strtol_l.isra.0>:
 800b1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4689      	mov	r9, r1
 800b1e0:	4692      	mov	sl, r2
 800b1e2:	461e      	mov	r6, r3
 800b1e4:	460f      	mov	r7, r1
 800b1e6:	463d      	mov	r5, r7
 800b1e8:	9808      	ldr	r0, [sp, #32]
 800b1ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1ee:	f000 f947 	bl	800b480 <__locale_ctype_ptr_l>
 800b1f2:	4420      	add	r0, r4
 800b1f4:	7843      	ldrb	r3, [r0, #1]
 800b1f6:	f013 0308 	ands.w	r3, r3, #8
 800b1fa:	d132      	bne.n	800b262 <_strtol_l.isra.0+0x8a>
 800b1fc:	2c2d      	cmp	r4, #45	; 0x2d
 800b1fe:	d132      	bne.n	800b266 <_strtol_l.isra.0+0x8e>
 800b200:	787c      	ldrb	r4, [r7, #1]
 800b202:	1cbd      	adds	r5, r7, #2
 800b204:	2201      	movs	r2, #1
 800b206:	2e00      	cmp	r6, #0
 800b208:	d05d      	beq.n	800b2c6 <_strtol_l.isra.0+0xee>
 800b20a:	2e10      	cmp	r6, #16
 800b20c:	d109      	bne.n	800b222 <_strtol_l.isra.0+0x4a>
 800b20e:	2c30      	cmp	r4, #48	; 0x30
 800b210:	d107      	bne.n	800b222 <_strtol_l.isra.0+0x4a>
 800b212:	782b      	ldrb	r3, [r5, #0]
 800b214:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b218:	2b58      	cmp	r3, #88	; 0x58
 800b21a:	d14f      	bne.n	800b2bc <_strtol_l.isra.0+0xe4>
 800b21c:	786c      	ldrb	r4, [r5, #1]
 800b21e:	2610      	movs	r6, #16
 800b220:	3502      	adds	r5, #2
 800b222:	2a00      	cmp	r2, #0
 800b224:	bf14      	ite	ne
 800b226:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b22a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b22e:	2700      	movs	r7, #0
 800b230:	fbb1 fcf6 	udiv	ip, r1, r6
 800b234:	4638      	mov	r0, r7
 800b236:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b23a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b23e:	2b09      	cmp	r3, #9
 800b240:	d817      	bhi.n	800b272 <_strtol_l.isra.0+0x9a>
 800b242:	461c      	mov	r4, r3
 800b244:	42a6      	cmp	r6, r4
 800b246:	dd23      	ble.n	800b290 <_strtol_l.isra.0+0xb8>
 800b248:	1c7b      	adds	r3, r7, #1
 800b24a:	d007      	beq.n	800b25c <_strtol_l.isra.0+0x84>
 800b24c:	4584      	cmp	ip, r0
 800b24e:	d31c      	bcc.n	800b28a <_strtol_l.isra.0+0xb2>
 800b250:	d101      	bne.n	800b256 <_strtol_l.isra.0+0x7e>
 800b252:	45a6      	cmp	lr, r4
 800b254:	db19      	blt.n	800b28a <_strtol_l.isra.0+0xb2>
 800b256:	fb00 4006 	mla	r0, r0, r6, r4
 800b25a:	2701      	movs	r7, #1
 800b25c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b260:	e7eb      	b.n	800b23a <_strtol_l.isra.0+0x62>
 800b262:	462f      	mov	r7, r5
 800b264:	e7bf      	b.n	800b1e6 <_strtol_l.isra.0+0xe>
 800b266:	2c2b      	cmp	r4, #43	; 0x2b
 800b268:	bf04      	itt	eq
 800b26a:	1cbd      	addeq	r5, r7, #2
 800b26c:	787c      	ldrbeq	r4, [r7, #1]
 800b26e:	461a      	mov	r2, r3
 800b270:	e7c9      	b.n	800b206 <_strtol_l.isra.0+0x2e>
 800b272:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b276:	2b19      	cmp	r3, #25
 800b278:	d801      	bhi.n	800b27e <_strtol_l.isra.0+0xa6>
 800b27a:	3c37      	subs	r4, #55	; 0x37
 800b27c:	e7e2      	b.n	800b244 <_strtol_l.isra.0+0x6c>
 800b27e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b282:	2b19      	cmp	r3, #25
 800b284:	d804      	bhi.n	800b290 <_strtol_l.isra.0+0xb8>
 800b286:	3c57      	subs	r4, #87	; 0x57
 800b288:	e7dc      	b.n	800b244 <_strtol_l.isra.0+0x6c>
 800b28a:	f04f 37ff 	mov.w	r7, #4294967295
 800b28e:	e7e5      	b.n	800b25c <_strtol_l.isra.0+0x84>
 800b290:	1c7b      	adds	r3, r7, #1
 800b292:	d108      	bne.n	800b2a6 <_strtol_l.isra.0+0xce>
 800b294:	2322      	movs	r3, #34	; 0x22
 800b296:	f8c8 3000 	str.w	r3, [r8]
 800b29a:	4608      	mov	r0, r1
 800b29c:	f1ba 0f00 	cmp.w	sl, #0
 800b2a0:	d107      	bne.n	800b2b2 <_strtol_l.isra.0+0xda>
 800b2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a6:	b102      	cbz	r2, 800b2aa <_strtol_l.isra.0+0xd2>
 800b2a8:	4240      	negs	r0, r0
 800b2aa:	f1ba 0f00 	cmp.w	sl, #0
 800b2ae:	d0f8      	beq.n	800b2a2 <_strtol_l.isra.0+0xca>
 800b2b0:	b10f      	cbz	r7, 800b2b6 <_strtol_l.isra.0+0xde>
 800b2b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b2b6:	f8ca 9000 	str.w	r9, [sl]
 800b2ba:	e7f2      	b.n	800b2a2 <_strtol_l.isra.0+0xca>
 800b2bc:	2430      	movs	r4, #48	; 0x30
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	d1af      	bne.n	800b222 <_strtol_l.isra.0+0x4a>
 800b2c2:	2608      	movs	r6, #8
 800b2c4:	e7ad      	b.n	800b222 <_strtol_l.isra.0+0x4a>
 800b2c6:	2c30      	cmp	r4, #48	; 0x30
 800b2c8:	d0a3      	beq.n	800b212 <_strtol_l.isra.0+0x3a>
 800b2ca:	260a      	movs	r6, #10
 800b2cc:	e7a9      	b.n	800b222 <_strtol_l.isra.0+0x4a>
	...

0800b2d0 <_strtol_r>:
 800b2d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2d2:	4c06      	ldr	r4, [pc, #24]	; (800b2ec <_strtol_r+0x1c>)
 800b2d4:	4d06      	ldr	r5, [pc, #24]	; (800b2f0 <_strtol_r+0x20>)
 800b2d6:	6824      	ldr	r4, [r4, #0]
 800b2d8:	6a24      	ldr	r4, [r4, #32]
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	bf08      	it	eq
 800b2de:	462c      	moveq	r4, r5
 800b2e0:	9400      	str	r4, [sp, #0]
 800b2e2:	f7ff ff79 	bl	800b1d8 <_strtol_l.isra.0>
 800b2e6:	b003      	add	sp, #12
 800b2e8:	bd30      	pop	{r4, r5, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2000017c 	.word	0x2000017c
 800b2f0:	200001e0 	.word	0x200001e0

0800b2f4 <_strtoul_l.isra.0>:
 800b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	4689      	mov	r9, r1
 800b2fc:	4692      	mov	sl, r2
 800b2fe:	461e      	mov	r6, r3
 800b300:	460f      	mov	r7, r1
 800b302:	463d      	mov	r5, r7
 800b304:	9808      	ldr	r0, [sp, #32]
 800b306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b30a:	f000 f8b9 	bl	800b480 <__locale_ctype_ptr_l>
 800b30e:	4420      	add	r0, r4
 800b310:	7843      	ldrb	r3, [r0, #1]
 800b312:	f013 0308 	ands.w	r3, r3, #8
 800b316:	d130      	bne.n	800b37a <_strtoul_l.isra.0+0x86>
 800b318:	2c2d      	cmp	r4, #45	; 0x2d
 800b31a:	d130      	bne.n	800b37e <_strtoul_l.isra.0+0x8a>
 800b31c:	787c      	ldrb	r4, [r7, #1]
 800b31e:	1cbd      	adds	r5, r7, #2
 800b320:	2101      	movs	r1, #1
 800b322:	2e00      	cmp	r6, #0
 800b324:	d05c      	beq.n	800b3e0 <_strtoul_l.isra.0+0xec>
 800b326:	2e10      	cmp	r6, #16
 800b328:	d109      	bne.n	800b33e <_strtoul_l.isra.0+0x4a>
 800b32a:	2c30      	cmp	r4, #48	; 0x30
 800b32c:	d107      	bne.n	800b33e <_strtoul_l.isra.0+0x4a>
 800b32e:	782b      	ldrb	r3, [r5, #0]
 800b330:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b334:	2b58      	cmp	r3, #88	; 0x58
 800b336:	d14e      	bne.n	800b3d6 <_strtoul_l.isra.0+0xe2>
 800b338:	786c      	ldrb	r4, [r5, #1]
 800b33a:	2610      	movs	r6, #16
 800b33c:	3502      	adds	r5, #2
 800b33e:	f04f 32ff 	mov.w	r2, #4294967295
 800b342:	2300      	movs	r3, #0
 800b344:	fbb2 f2f6 	udiv	r2, r2, r6
 800b348:	fb06 fc02 	mul.w	ip, r6, r2
 800b34c:	ea6f 0c0c 	mvn.w	ip, ip
 800b350:	4618      	mov	r0, r3
 800b352:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b356:	2f09      	cmp	r7, #9
 800b358:	d817      	bhi.n	800b38a <_strtoul_l.isra.0+0x96>
 800b35a:	463c      	mov	r4, r7
 800b35c:	42a6      	cmp	r6, r4
 800b35e:	dd23      	ble.n	800b3a8 <_strtoul_l.isra.0+0xb4>
 800b360:	2b00      	cmp	r3, #0
 800b362:	db1e      	blt.n	800b3a2 <_strtoul_l.isra.0+0xae>
 800b364:	4282      	cmp	r2, r0
 800b366:	d31c      	bcc.n	800b3a2 <_strtoul_l.isra.0+0xae>
 800b368:	d101      	bne.n	800b36e <_strtoul_l.isra.0+0x7a>
 800b36a:	45a4      	cmp	ip, r4
 800b36c:	db19      	blt.n	800b3a2 <_strtoul_l.isra.0+0xae>
 800b36e:	fb00 4006 	mla	r0, r0, r6, r4
 800b372:	2301      	movs	r3, #1
 800b374:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b378:	e7eb      	b.n	800b352 <_strtoul_l.isra.0+0x5e>
 800b37a:	462f      	mov	r7, r5
 800b37c:	e7c1      	b.n	800b302 <_strtoul_l.isra.0+0xe>
 800b37e:	2c2b      	cmp	r4, #43	; 0x2b
 800b380:	bf04      	itt	eq
 800b382:	1cbd      	addeq	r5, r7, #2
 800b384:	787c      	ldrbeq	r4, [r7, #1]
 800b386:	4619      	mov	r1, r3
 800b388:	e7cb      	b.n	800b322 <_strtoul_l.isra.0+0x2e>
 800b38a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b38e:	2f19      	cmp	r7, #25
 800b390:	d801      	bhi.n	800b396 <_strtoul_l.isra.0+0xa2>
 800b392:	3c37      	subs	r4, #55	; 0x37
 800b394:	e7e2      	b.n	800b35c <_strtoul_l.isra.0+0x68>
 800b396:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b39a:	2f19      	cmp	r7, #25
 800b39c:	d804      	bhi.n	800b3a8 <_strtoul_l.isra.0+0xb4>
 800b39e:	3c57      	subs	r4, #87	; 0x57
 800b3a0:	e7dc      	b.n	800b35c <_strtoul_l.isra.0+0x68>
 800b3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a6:	e7e5      	b.n	800b374 <_strtoul_l.isra.0+0x80>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da09      	bge.n	800b3c0 <_strtoul_l.isra.0+0xcc>
 800b3ac:	2322      	movs	r3, #34	; 0x22
 800b3ae:	f8c8 3000 	str.w	r3, [r8]
 800b3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ba:	d107      	bne.n	800b3cc <_strtoul_l.isra.0+0xd8>
 800b3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c0:	b101      	cbz	r1, 800b3c4 <_strtoul_l.isra.0+0xd0>
 800b3c2:	4240      	negs	r0, r0
 800b3c4:	f1ba 0f00 	cmp.w	sl, #0
 800b3c8:	d0f8      	beq.n	800b3bc <_strtoul_l.isra.0+0xc8>
 800b3ca:	b10b      	cbz	r3, 800b3d0 <_strtoul_l.isra.0+0xdc>
 800b3cc:	f105 39ff 	add.w	r9, r5, #4294967295
 800b3d0:	f8ca 9000 	str.w	r9, [sl]
 800b3d4:	e7f2      	b.n	800b3bc <_strtoul_l.isra.0+0xc8>
 800b3d6:	2430      	movs	r4, #48	; 0x30
 800b3d8:	2e00      	cmp	r6, #0
 800b3da:	d1b0      	bne.n	800b33e <_strtoul_l.isra.0+0x4a>
 800b3dc:	2608      	movs	r6, #8
 800b3de:	e7ae      	b.n	800b33e <_strtoul_l.isra.0+0x4a>
 800b3e0:	2c30      	cmp	r4, #48	; 0x30
 800b3e2:	d0a4      	beq.n	800b32e <_strtoul_l.isra.0+0x3a>
 800b3e4:	260a      	movs	r6, #10
 800b3e6:	e7aa      	b.n	800b33e <_strtoul_l.isra.0+0x4a>

0800b3e8 <_strtoul_r>:
 800b3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ea:	4c06      	ldr	r4, [pc, #24]	; (800b404 <_strtoul_r+0x1c>)
 800b3ec:	4d06      	ldr	r5, [pc, #24]	; (800b408 <_strtoul_r+0x20>)
 800b3ee:	6824      	ldr	r4, [r4, #0]
 800b3f0:	6a24      	ldr	r4, [r4, #32]
 800b3f2:	2c00      	cmp	r4, #0
 800b3f4:	bf08      	it	eq
 800b3f6:	462c      	moveq	r4, r5
 800b3f8:	9400      	str	r4, [sp, #0]
 800b3fa:	f7ff ff7b 	bl	800b2f4 <_strtoul_l.isra.0>
 800b3fe:	b003      	add	sp, #12
 800b400:	bd30      	pop	{r4, r5, pc}
 800b402:	bf00      	nop
 800b404:	2000017c 	.word	0x2000017c
 800b408:	200001e0 	.word	0x200001e0

0800b40c <__submore>:
 800b40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b410:	460c      	mov	r4, r1
 800b412:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b418:	4299      	cmp	r1, r3
 800b41a:	d11d      	bne.n	800b458 <__submore+0x4c>
 800b41c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b420:	f7fe fffa 	bl	800a418 <_malloc_r>
 800b424:	b918      	cbnz	r0, 800b42e <__submore+0x22>
 800b426:	f04f 30ff 	mov.w	r0, #4294967295
 800b42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b432:	63a3      	str	r3, [r4, #56]	; 0x38
 800b434:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b438:	6360      	str	r0, [r4, #52]	; 0x34
 800b43a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b43e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b442:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b446:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b44a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b44e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b452:	6020      	str	r0, [r4, #0]
 800b454:	2000      	movs	r0, #0
 800b456:	e7e8      	b.n	800b42a <__submore+0x1e>
 800b458:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b45a:	0077      	lsls	r7, r6, #1
 800b45c:	463a      	mov	r2, r7
 800b45e:	f000 f84c 	bl	800b4fa <_realloc_r>
 800b462:	4605      	mov	r5, r0
 800b464:	2800      	cmp	r0, #0
 800b466:	d0de      	beq.n	800b426 <__submore+0x1a>
 800b468:	eb00 0806 	add.w	r8, r0, r6
 800b46c:	4601      	mov	r1, r0
 800b46e:	4632      	mov	r2, r6
 800b470:	4640      	mov	r0, r8
 800b472:	f7fe ff70 	bl	800a356 <memcpy>
 800b476:	f8c4 8000 	str.w	r8, [r4]
 800b47a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b47e:	e7e9      	b.n	800b454 <__submore+0x48>

0800b480 <__locale_ctype_ptr_l>:
 800b480:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b484:	4770      	bx	lr
	...

0800b488 <__locale_ctype_ptr>:
 800b488:	4b04      	ldr	r3, [pc, #16]	; (800b49c <__locale_ctype_ptr+0x14>)
 800b48a:	4a05      	ldr	r2, [pc, #20]	; (800b4a0 <__locale_ctype_ptr+0x18>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6a1b      	ldr	r3, [r3, #32]
 800b490:	2b00      	cmp	r3, #0
 800b492:	bf08      	it	eq
 800b494:	4613      	moveq	r3, r2
 800b496:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b49a:	4770      	bx	lr
 800b49c:	2000017c 	.word	0x2000017c
 800b4a0:	200001e0 	.word	0x200001e0

0800b4a4 <__ascii_mbtowc>:
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	b901      	cbnz	r1, 800b4aa <__ascii_mbtowc+0x6>
 800b4a8:	a901      	add	r1, sp, #4
 800b4aa:	b142      	cbz	r2, 800b4be <__ascii_mbtowc+0x1a>
 800b4ac:	b14b      	cbz	r3, 800b4c2 <__ascii_mbtowc+0x1e>
 800b4ae:	7813      	ldrb	r3, [r2, #0]
 800b4b0:	600b      	str	r3, [r1, #0]
 800b4b2:	7812      	ldrb	r2, [r2, #0]
 800b4b4:	1c10      	adds	r0, r2, #0
 800b4b6:	bf18      	it	ne
 800b4b8:	2001      	movne	r0, #1
 800b4ba:	b002      	add	sp, #8
 800b4bc:	4770      	bx	lr
 800b4be:	4610      	mov	r0, r2
 800b4c0:	e7fb      	b.n	800b4ba <__ascii_mbtowc+0x16>
 800b4c2:	f06f 0001 	mvn.w	r0, #1
 800b4c6:	e7f8      	b.n	800b4ba <__ascii_mbtowc+0x16>

0800b4c8 <memmove>:
 800b4c8:	4288      	cmp	r0, r1
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	eb01 0302 	add.w	r3, r1, r2
 800b4d0:	d807      	bhi.n	800b4e2 <memmove+0x1a>
 800b4d2:	1e42      	subs	r2, r0, #1
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	d00a      	beq.n	800b4ee <memmove+0x26>
 800b4d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b4e0:	e7f8      	b.n	800b4d4 <memmove+0xc>
 800b4e2:	4283      	cmp	r3, r0
 800b4e4:	d9f5      	bls.n	800b4d2 <memmove+0xa>
 800b4e6:	1881      	adds	r1, r0, r2
 800b4e8:	1ad2      	subs	r2, r2, r3
 800b4ea:	42d3      	cmn	r3, r2
 800b4ec:	d100      	bne.n	800b4f0 <memmove+0x28>
 800b4ee:	bd10      	pop	{r4, pc}
 800b4f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b4f8:	e7f7      	b.n	800b4ea <memmove+0x22>

0800b4fa <_realloc_r>:
 800b4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	4614      	mov	r4, r2
 800b500:	460e      	mov	r6, r1
 800b502:	b921      	cbnz	r1, 800b50e <_realloc_r+0x14>
 800b504:	4611      	mov	r1, r2
 800b506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b50a:	f7fe bf85 	b.w	800a418 <_malloc_r>
 800b50e:	b922      	cbnz	r2, 800b51a <_realloc_r+0x20>
 800b510:	f7fe ff34 	bl	800a37c <_free_r>
 800b514:	4625      	mov	r5, r4
 800b516:	4628      	mov	r0, r5
 800b518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51a:	f000 f821 	bl	800b560 <_malloc_usable_size_r>
 800b51e:	42a0      	cmp	r0, r4
 800b520:	d20f      	bcs.n	800b542 <_realloc_r+0x48>
 800b522:	4621      	mov	r1, r4
 800b524:	4638      	mov	r0, r7
 800b526:	f7fe ff77 	bl	800a418 <_malloc_r>
 800b52a:	4605      	mov	r5, r0
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d0f2      	beq.n	800b516 <_realloc_r+0x1c>
 800b530:	4631      	mov	r1, r6
 800b532:	4622      	mov	r2, r4
 800b534:	f7fe ff0f 	bl	800a356 <memcpy>
 800b538:	4631      	mov	r1, r6
 800b53a:	4638      	mov	r0, r7
 800b53c:	f7fe ff1e 	bl	800a37c <_free_r>
 800b540:	e7e9      	b.n	800b516 <_realloc_r+0x1c>
 800b542:	4635      	mov	r5, r6
 800b544:	e7e7      	b.n	800b516 <_realloc_r+0x1c>

0800b546 <__ascii_wctomb>:
 800b546:	b149      	cbz	r1, 800b55c <__ascii_wctomb+0x16>
 800b548:	2aff      	cmp	r2, #255	; 0xff
 800b54a:	bf85      	ittet	hi
 800b54c:	238a      	movhi	r3, #138	; 0x8a
 800b54e:	6003      	strhi	r3, [r0, #0]
 800b550:	700a      	strbls	r2, [r1, #0]
 800b552:	f04f 30ff 	movhi.w	r0, #4294967295
 800b556:	bf98      	it	ls
 800b558:	2001      	movls	r0, #1
 800b55a:	4770      	bx	lr
 800b55c:	4608      	mov	r0, r1
 800b55e:	4770      	bx	lr

0800b560 <_malloc_usable_size_r>:
 800b560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b564:	1f18      	subs	r0, r3, #4
 800b566:	2b00      	cmp	r3, #0
 800b568:	bfbc      	itt	lt
 800b56a:	580b      	ldrlt	r3, [r1, r0]
 800b56c:	18c0      	addlt	r0, r0, r3
 800b56e:	4770      	bx	lr

0800b570 <_init>:
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	bf00      	nop
 800b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b576:	bc08      	pop	{r3}
 800b578:	469e      	mov	lr, r3
 800b57a:	4770      	bx	lr

0800b57c <_fini>:
 800b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57e:	bf00      	nop
 800b580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b582:	bc08      	pop	{r3}
 800b584:	469e      	mov	lr, r3
 800b586:	4770      	bx	lr
