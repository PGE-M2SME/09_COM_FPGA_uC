
spi_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e38  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f90  08001f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f98  08001f98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f9c  08001f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08001fac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001fac  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005476  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010a9  00000000  00000000  000254ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  00026558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  00026b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000143e1  00000000  00000000  00027060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fe8  00000000  00000000  0003b441  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f376  00000000  00000000  00040429  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf79f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001694  00000000  00000000  000bf81c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001f5c 	.word	0x08001f5c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001f5c 	.word	0x08001f5c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  HAL_Init();
 8000486:	f000 fa04 	bl	8000892 <HAL_Init>
  SystemClock_Config();
 800048a:	f000 f84d 	bl	8000528 <SystemClock_Config>
  MX_GPIO_Init();
 800048e:	f000 f8cf 	bl	8000630 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000492:	f000 f897 	bl	80005c4 <MX_SPI1_Init>
  uint8_t data[2]; // buffer to store data to be sent to the FPGA
  data[0]= 0x00;
 8000496:	2300      	movs	r3, #0
 8000498:	713b      	strb	r3, [r7, #4]
  data[1] = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	717b      	strb	r3, [r7, #5]
  while (1)
  {
    /********************FPGA1*******************************************************/
	  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	481e      	ldr	r0, [pc, #120]	; (800051c <main+0x9c>)
 80004a4:	f000 fcf8 	bl	8000e98 <HAL_GPIO_WritePin>
    * pull the cs pin LOW.
    * @param[in] GPIOx: where x can be (A..K) to select the GPIO peripheral.
    • GPIO_Pin_x: specifies the port bit to be written. where x can be (0..15).
    • PinState: specifies the value to be written to the selected bit. GPIO_PIN_RESET: to clear the port pin
    */ 
 		for(data[1]=0;data[1]<128;data[1]++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	717b      	strb	r3, [r7, #5]
 80004ac:	e00d      	b.n	80004ca <main+0x4a>
 		  {
 	    	HAL_SPI_Transmit (&hspi1, data, 2, 100);  // write data to register
 80004ae:	1d39      	adds	r1, r7, #4
 80004b0:	2364      	movs	r3, #100	; 0x64
 80004b2:	2202      	movs	r2, #2
 80004b4:	481a      	ldr	r0, [pc, #104]	; (8000520 <main+0xa0>)
 80004b6:	f001 fb1e 	bl	8001af6 <HAL_SPI_Transmit>
    * @param[in] hspi: pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
    • @param[in] pData: pointer to data buffer
    • @param[in] Size: amount of data to be sent
    • @param[in] Timeout: Timeout duration
    */ 
 	  	  HAL_Delay(1000);
 80004ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004be:	f000 fa57 	bl	8000970 <HAL_Delay>
 		for(data[1]=0;data[1]<128;data[1]++)
 80004c2:	797b      	ldrb	r3, [r7, #5]
 80004c4:	3301      	adds	r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	717b      	strb	r3, [r7, #5]
 80004ca:	797b      	ldrb	r3, [r7, #5]
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	daed      	bge.n	80004ae <main+0x2e>
 		  }
 		 HAL_GPIO_WritePin (GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	4811      	ldr	r0, [pc, #68]	; (800051c <main+0x9c>)
 80004d8:	f000 fcde 	bl	8000e98 <HAL_GPIO_WritePin>
    * @param[in] GPIOx: where x can be (A..K) to select the GPIO peripheral.
    • GPIO_Pin_x: specifies the port bit to be written. where x can be (0..15).
    • PinState: specifies the value to be written to the selected bit. GPIO_PIN_SET: to set the port pin
    */ 
    /********************FPGA2*******************************************************/
 	  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	4810      	ldr	r0, [pc, #64]	; (8000524 <main+0xa4>)
 80004e2:	f000 fcd9 	bl	8000e98 <HAL_GPIO_WritePin>
 	  for(data[1]=0;data[1]<128;data[1]++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	717b      	strb	r3, [r7, #5]
 80004ea:	e00d      	b.n	8000508 <main+0x88>
 	  {
 		  	 HAL_SPI_Transmit (&hspi1, data, 2, 100);
 80004ec:	1d39      	adds	r1, r7, #4
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	2202      	movs	r2, #2
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <main+0xa0>)
 80004f4:	f001 faff 	bl	8001af6 <HAL_SPI_Transmit>
 		  	 HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 fa38 	bl	8000970 <HAL_Delay>
 	  for(data[1]=0;data[1]<128;data[1]++)
 8000500:	797b      	ldrb	r3, [r7, #5]
 8000502:	3301      	adds	r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	717b      	strb	r3, [r7, #5]
 8000508:	797b      	ldrb	r3, [r7, #5]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	daed      	bge.n	80004ec <main+0x6c>
 	  }
 	  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <main+0xa4>)
 8000516:	f000 fcbf 	bl	8000e98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800051a:	e7c0      	b.n	800049e <main+0x1e>
 800051c:	40020800 	.word	0x40020800
 8000520:	20000028 	.word	0x20000028
 8000524:	40020400 	.word	0x40020400

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b092      	sub	sp, #72	; 0x48
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2234      	movs	r2, #52	; 0x34
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fd08 	bl	8001f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <SystemClock_Config+0x98>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000552:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <SystemClock_Config+0x98>)
 8000554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000558:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2300      	movs	r3, #0
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800056e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000574:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fca2 	bl	8000ec8 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800058a:	f000 f8b1 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 ffbe 	bl	8001528 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b2:	f000 f89d 	bl	80006f0 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3748      	adds	r7, #72	; 0x48
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_SPI1_Init+0x64>)
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_SPI1_Init+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_SPI1_Init+0x64>)
 80005d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_SPI1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_SPI1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_SPI1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_SPI1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_SPI1_Init+0x64>)
 80005f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_SPI1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_SPI1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_SPI1_Init+0x64>)
 8000610:	220a      	movs	r2, #10
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_SPI1_Init+0x64>)
 8000616:	f001 f9e5 	bl	80019e4 <HAL_SPI_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000620:	f000 f866 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000028 	.word	0x20000028
 800062c:	40013000 	.word	0x40013000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	4815      	ldr	r0, [pc, #84]	; (80006e8 <MX_GPIO_Init+0xb8>)
 8000694:	f000 fc00 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	4813      	ldr	r0, [pc, #76]	; (80006ec <MX_GPIO_Init+0xbc>)
 800069e:	f000 fbfb 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0xb8>)
 80006ba:	f000 fa5f 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0xbc>)
 80006d6:	f000 fa51 	bl	8000b7c <HAL_GPIO_Init>

}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020400 	.word	0x40020400

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <Error_Handler+0x6>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000708:	6253      	str	r3, [r2, #36]	; 0x24
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6213      	str	r3, [r2, #32]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x5c>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x5c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6253      	str	r3, [r2, #36]	; 0x24
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x5c>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000746:	2007      	movs	r0, #7
 8000748:	f000 f9e4 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_SPI_MspInit+0x7c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d127      	bne.n	80007ca <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_SPI_MspInit+0x80>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <HAL_SPI_MspInit+0x80>)
 8000780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000784:	6213      	str	r3, [r2, #32]
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_SPI_MspInit+0x80>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_SPI_MspInit+0x80>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_SPI_MspInit+0x80>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_SPI_MspInit+0x80>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007aa:	23e0      	movs	r3, #224	; 0xe0
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ba:	2305      	movs	r3, #5
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_SPI_MspInit+0x84>)
 80007c6:	f000 f9d9 	bl	8000b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40013000 	.word	0x40013000
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f887 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <SystemInit+0x14>)
 8000836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800083a:	609a      	str	r2, [r3, #8]
#endif
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000848:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800084a:	e003      	b.n	8000854 <LoopCopyDataInit>

0800084c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800084e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000850:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000852:	3104      	adds	r1, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000854:	480a      	ldr	r0, [pc, #40]	; (8000880 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000858:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800085a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800085c:	d3f6      	bcc.n	800084c <CopyDataInit>
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000860:	e002      	b.n	8000868 <LoopFillZerobss>

08000862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000864:	f842 3b04 	str.w	r3, [r2], #4

08000868 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800086a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800086c:	d3f9      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086e:	f7ff ffdf 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000872:	f001 fb47 	bl	8001f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fe03 	bl	8000480 <main>
  bx lr
 800087a:	4770      	bx	lr
  ldr r3, =_sidata
 800087c:	08001fa0 	.word	0x08001fa0
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000884:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800088c:	20000084 	.word	0x20000084

08000890 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_IRQHandler>

08000892 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f939 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f80e 	bl	80008c4 <HAL_InitTick>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e001      	b.n	80008b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b4:	f7ff ff20 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <HAL_InitTick+0x68>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d022      	beq.n	800091e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_InitTick+0x6c>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_InitTick+0x68>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f938 	bl	8000b62 <HAL_SYSTICK_Config>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10f      	bne.n	8000918 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b0f      	cmp	r3, #15
 80008fc:	d809      	bhi.n	8000912 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fe:	2200      	movs	r2, #0
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	f04f 30ff 	mov.w	r0, #4294967295
 8000906:	f000 f910 	bl	8000b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_InitTick+0x70>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	e007      	b.n	8000922 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	e004      	b.n	8000922 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e001      	b.n	8000922 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000922:	7bfb      	ldrb	r3, [r7, #15]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000008 	.word	0x20000008
 8000930:	20000000 	.word	0x20000000
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4413      	add	r3, r2
 8000946:	4a03      	ldr	r2, [pc, #12]	; (8000954 <HAL_IncTick+0x1c>)
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000080 	.word	0x20000080
 8000958:	20000008 	.word	0x20000008

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000080 	.word	0x20000080

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff fff0 	bl	800095c <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d004      	beq.n	8000994 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_Delay+0x40>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4413      	add	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000994:	bf00      	nop
 8000996:	f7ff ffe1 	bl	800095c <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d8f7      	bhi.n	8000996 <HAL_Delay+0x26>
  {
  }
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff49 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff5e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffb0 	bl	8000ad0 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b92:	e160      	b.n	8000e56 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8152 	beq.w	8000e50 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d00b      	beq.n	8000bcc <HAL_GPIO_Init+0x50>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d007      	beq.n	8000bcc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc0:	2b11      	cmp	r3, #17
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b12      	cmp	r3, #18
 8000bca:	d130      	bne.n	8000c2e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c02:	2201      	movs	r2, #1
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	f003 0201 	and.w	r2, r3, #1
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0xf2>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d123      	bne.n	8000cb6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 80ac 	beq.w	8000e50 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	4b5d      	ldr	r3, [pc, #372]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	4a5c      	ldr	r2, [pc, #368]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6213      	str	r3, [r2, #32]
 8000d04:	4b5a      	ldr	r3, [pc, #360]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d10:	4a58      	ldr	r2, [pc, #352]	; (8000e74 <HAL_GPIO_Init+0x2f8>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3302      	adds	r3, #2
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a50      	ldr	r2, [pc, #320]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d025      	beq.n	8000d88 <HAL_GPIO_Init+0x20c>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a4f      	ldr	r2, [pc, #316]	; (8000e7c <HAL_GPIO_Init+0x300>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d01f      	beq.n	8000d84 <HAL_GPIO_Init+0x208>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a4e      	ldr	r2, [pc, #312]	; (8000e80 <HAL_GPIO_Init+0x304>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d019      	beq.n	8000d80 <HAL_GPIO_Init+0x204>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a4d      	ldr	r2, [pc, #308]	; (8000e84 <HAL_GPIO_Init+0x308>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x200>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4c      	ldr	r2, [pc, #304]	; (8000e88 <HAL_GPIO_Init+0x30c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1fc>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1f8>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <HAL_GPIO_Init+0x314>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1f4>
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	e00c      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d70:	2307      	movs	r3, #7
 8000d72:	e00a      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d74:	2305      	movs	r3, #5
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	4093      	lsls	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d9a:	4936      	ldr	r1, [pc, #216]	; (8000e74 <HAL_GPIO_Init+0x2f8>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dcc:	4a31      	ldr	r2, [pc, #196]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df6:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e20:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <HAL_GPIO_Init+0x318>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f47f ae97 	bne.w	8000b94 <HAL_GPIO_Init+0x18>
  }
}
 8000e66:	bf00      	nop
 8000e68:	371c      	adds	r7, #28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40021400 	.word	0x40021400
 8000e90:	40021800 	.word	0x40021800
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e31d      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eda:	4b94      	ldr	r3, [pc, #592]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee4:	4b91      	ldr	r3, [pc, #580]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d07b      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d006      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b0c      	cmp	r3, #12
 8000f04:	d10f      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b87      	ldr	r3, [pc, #540]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06a      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x128>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d166      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e2f7      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d106      	bne.n	8000f3c <HAL_RCC_OscConfig+0x74>
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a7e      	ldr	r2, [pc, #504]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e02d      	b.n	8000f98 <HAL_RCC_OscConfig+0xd0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x96>
 8000f44:	4b79      	ldr	r3, [pc, #484]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a78      	ldr	r2, [pc, #480]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a75      	ldr	r2, [pc, #468]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e01c      	b.n	8000f98 <HAL_RCC_OscConfig+0xd0>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0xb8>
 8000f66:	4b71      	ldr	r3, [pc, #452]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a70      	ldr	r2, [pc, #448]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b6e      	ldr	r3, [pc, #440]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6d      	ldr	r2, [pc, #436]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e00b      	b.n	8000f98 <HAL_RCC_OscConfig+0xd0>
 8000f80:	4b6a      	ldr	r3, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a69      	ldr	r2, [pc, #420]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b67      	ldr	r3, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a66      	ldr	r2, [pc, #408]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fcdc 	bl	800095c <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fcd8 	bl	800095c <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e2ad      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xe0>
 8000fc6:	e014      	b.n	8000ff2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fcc8 	bl	800095c <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fcc4 	bl	800095c <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e299      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x108>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d05a      	beq.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d005      	beq.n	8001010 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d119      	bne.n	800103e <HAL_RCC_OscConfig+0x176>
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d116      	bne.n	800103e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001010:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x160>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d001      	beq.n	8001028 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e276      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <HAL_RCC_OscConfig+0x264>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	493d      	ldr	r1, [pc, #244]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103c:	e03a      	b.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d020      	beq.n	8001088 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001046:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <HAL_RCC_OscConfig+0x268>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fc86 	bl	800095c <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fc82 	bl	800095c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e257      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	492a      	ldr	r1, [pc, #168]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001082:	4313      	orrs	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
 8001086:	e015      	b.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_RCC_OscConfig+0x268>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fc65 	bl	800095c <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fc61 	bl	800095c <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e236      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_RCC_OscConfig+0x264>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f0      	bne.n	8001096 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80b8 	beq.w	8001232 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d170      	bne.n	80011aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_RCC_OscConfig+0x264>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_OscConfig+0x218>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e21a      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_RCC_OscConfig+0x264>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d921      	bls.n	8001134 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fc15 	bl	8001924 <RCC_SetFlashLatencyFromMSIRange>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e208      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4906      	ldr	r1, [pc, #24]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001112:	4313      	orrs	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	061b      	lsls	r3, r3, #24
 8001124:	4901      	ldr	r1, [pc, #4]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
 800112a:	e020      	b.n	800116e <HAL_RCC_OscConfig+0x2a6>
 800112c:	40023800 	.word	0x40023800
 8001130:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001134:	4ba4      	ldr	r3, [pc, #656]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	49a1      	ldr	r1, [pc, #644]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001142:	4313      	orrs	r3, r2
 8001144:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	061b      	lsls	r3, r3, #24
 8001154:	499c      	ldr	r1, [pc, #624]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fbe0 	bl	8001924 <RCC_SetFlashLatencyFromMSIRange>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e1d3      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	0b5b      	lsrs	r3, r3, #13
 8001174:	3301      	adds	r3, #1
 8001176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800117e:	4a92      	ldr	r2, [pc, #584]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001180:	6892      	ldr	r2, [r2, #8]
 8001182:	0912      	lsrs	r2, r2, #4
 8001184:	f002 020f 	and.w	r2, r2, #15
 8001188:	4990      	ldr	r1, [pc, #576]	; (80013cc <HAL_RCC_OscConfig+0x504>)
 800118a:	5c8a      	ldrb	r2, [r1, r2]
 800118c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800118e:	4a90      	ldr	r2, [pc, #576]	; (80013d0 <HAL_RCC_OscConfig+0x508>)
 8001190:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001192:	4b90      	ldr	r3, [pc, #576]	; (80013d4 <HAL_RCC_OscConfig+0x50c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fb94 	bl	80008c4 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d045      	beq.n	8001232 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	e1b5      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d029      	beq.n	8001206 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011b2:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <HAL_RCC_OscConfig+0x510>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fbd0 	bl	800095c <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c0:	f7ff fbcc 	bl	800095c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e1a1      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011de:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4977      	ldr	r1, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f0:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	4972      	ldr	r1, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001206:	4b74      	ldr	r3, [pc, #464]	; (80013d8 <HAL_RCC_OscConfig+0x510>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fba6 	bl	800095c <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001214:	f7ff fba2 	bl	800095c <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e177      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d030      	beq.n	80012a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d016      	beq.n	8001274 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_RCC_OscConfig+0x514>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fb86 	bl	800095c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fb82 	bl	800095c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e157      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x38c>
 8001272:	e015      	b.n	80012a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_OscConfig+0x514>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb6f 	bl	800095c <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fb6b 	bl	800095c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e140      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001294:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80b5 	beq.w	8001418 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	4a41      	ldr	r2, [pc, #260]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6253      	str	r3, [r2, #36]	; 0x24
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d6:	2301      	movs	r3, #1
 80012d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3d      	ldr	r2, [pc, #244]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fb33 	bl	800095c <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fa:	f7ff fb2f 	bl	800095c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b64      	cmp	r3, #100	; 0x64
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e104      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x466>
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6353      	str	r3, [r2, #52]	; 0x34
 800132c:	e02d      	b.n	800138a <HAL_RCC_OscConfig+0x4c2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x488>
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800133c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001340:	6353      	str	r3, [r2, #52]	; 0x34
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800134c:	6353      	str	r3, [r2, #52]	; 0x34
 800134e:	e01c      	b.n	800138a <HAL_RCC_OscConfig+0x4c2>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b05      	cmp	r3, #5
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x4aa>
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6353      	str	r3, [r2, #52]	; 0x34
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6353      	str	r3, [r2, #52]	; 0x34
 8001370:	e00b      	b.n	800138a <HAL_RCC_OscConfig+0x4c2>
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800137c:	6353      	str	r3, [r2, #52]	; 0x34
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001388:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fae3 	bl	800095c <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fadf 	bl	800095c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0b2      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ee      	beq.n	800139a <HAL_RCC_OscConfig+0x4d2>
 80013bc:	e023      	b.n	8001406 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff facd 	bl	800095c <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013c4:	e019      	b.n	80013fa <HAL_RCC_OscConfig+0x532>
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	08001f80 	.word	0x08001f80
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004
 80013d8:	42470020 	.word	0x42470020
 80013dc:	42470680 	.word	0x42470680
 80013e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff faba 	bl	800095c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e08d      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013fa:	4b49      	ldr	r3, [pc, #292]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ee      	bne.n	80013e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001406:	7ffb      	ldrb	r3, [r7, #31]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140c:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	4a43      	ldr	r2, [pc, #268]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 8001412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001416:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2b00      	cmp	r3, #0
 800141e:	d079      	beq.n	8001514 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d056      	beq.n	80014d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	2b02      	cmp	r3, #2
 800142c:	d13b      	bne.n	80014a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <HAL_RCC_OscConfig+0x65c>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fa92 	bl	800095c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fa8e 	bl	800095c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e063      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	4319      	orrs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	430b      	orrs	r3, r1
 8001472:	492b      	ldr	r1, [pc, #172]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_RCC_OscConfig+0x65c>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fa6d 	bl	800095c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fa69 	bl	800095c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e03e      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x5be>
 80014a4:	e036      	b.n	8001514 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_RCC_OscConfig+0x65c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fa56 	bl	800095c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fa52 	bl	800095c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e027      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x5ec>
 80014d2:	e01f      	b.n	8001514 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e01a      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d10d      	bne.n	8001510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	42470060 	.word	0x42470060

08001528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e11a      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b8f      	ldr	r3, [pc, #572]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d919      	bls.n	800157e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_ClockConfig+0x34>
 8001550:	4b8a      	ldr	r3, [pc, #552]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a89      	ldr	r2, [pc, #548]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b87      	ldr	r3, [pc, #540]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0201 	bic.w	r2, r3, #1
 8001564:	4985      	ldr	r1, [pc, #532]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156c:	4b83      	ldr	r3, [pc, #524]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d001      	beq.n	800157e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0f9      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158a:	4b7d      	ldr	r3, [pc, #500]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	497a      	ldr	r1, [pc, #488]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001598:	4313      	orrs	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 808e 	beq.w	80016c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b2:	4b73      	ldr	r3, [pc, #460]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d121      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0d7      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015ca:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d115      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0cb      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e2:	4b67      	ldr	r3, [pc, #412]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0bf      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0b7      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001602:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f023 0203 	bic.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	495c      	ldr	r1, [pc, #368]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001614:	f7ff f9a2 	bl	800095c <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d112      	bne.n	8001648 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff f99a 	bl	800095c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e09b      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_ClockConfig+0xfc>
 8001646:	e03e      	b.n	80016c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d112      	bne.n	8001676 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001652:	f7ff f983 	bl	800095c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e084      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001668:	4b45      	ldr	r3, [pc, #276]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b0c      	cmp	r3, #12
 8001672:	d1ee      	bne.n	8001652 <HAL_RCC_ClockConfig+0x12a>
 8001674:	e027      	b.n	80016c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d11d      	bne.n	80016ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff f96c 	bl	800095c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e06d      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001696:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d1ee      	bne.n	8001680 <HAL_RCC_ClockConfig+0x158>
 80016a2:	e010      	b.n	80016c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff f95a 	bl	800095c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e05b      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ee      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d219      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x1be>
 80016da:	4b28      	ldr	r3, [pc, #160]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0201 	bic.w	r2, r3, #1
 80016ee:	4923      	ldr	r1, [pc, #140]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e034      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4917      	ldr	r1, [pc, #92]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490f      	ldr	r1, [pc, #60]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f823 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 800174a:	4601      	mov	r1, r0
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x25c>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	fa21 f303 	lsr.w	r3, r1, r3
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x260>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_ClockConfig+0x264>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f8ac 	bl	80008c4 <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
 800176e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001770:	7afb      	ldrb	r3, [r7, #11]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00
 8001780:	40023800 	.word	0x40023800
 8001784:	08001f80 	.word	0x08001f80
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001796:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <HAL_RCC_GetSysClockFreq+0x184>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d007      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x26>
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d008      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x2c>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	f040 809f 	bne.w	80018ee <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b2:	613b      	str	r3, [r7, #16]
      break;
 80017b4:	e0a9      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_GetSysClockFreq+0x18c>)
 80017b8:	613b      	str	r3, [r7, #16]
      break;
 80017ba:	e0a6      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_RCC_GetSysClockFreq+0x190>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0d9b      	lsrs	r3, r3, #22
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d6:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <HAL_RCC_GetSysClockFreq+0x184>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d041      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	461d      	mov	r5, r3
 80017e6:	f04f 0600 	mov.w	r6, #0
 80017ea:	4629      	mov	r1, r5
 80017ec:	4632      	mov	r2, r6
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	0154      	lsls	r4, r2, #5
 80017f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017fc:	014b      	lsls	r3, r1, #5
 80017fe:	4619      	mov	r1, r3
 8001800:	4622      	mov	r2, r4
 8001802:	1b49      	subs	r1, r1, r5
 8001804:	eb62 0206 	sbc.w	r2, r2, r6
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	0194      	lsls	r4, r2, #6
 8001812:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001816:	018b      	lsls	r3, r1, #6
 8001818:	1a5b      	subs	r3, r3, r1
 800181a:	eb64 0402 	sbc.w	r4, r4, r2
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	00e2      	lsls	r2, r4, #3
 8001828:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800182c:	00d9      	lsls	r1, r3, #3
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	195b      	adds	r3, r3, r5
 8001834:	eb44 0406 	adc.w	r4, r4, r6
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	0262      	lsls	r2, r4, #9
 8001842:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001846:	0259      	lsls	r1, r3, #9
 8001848:	460b      	mov	r3, r1
 800184a:	4614      	mov	r4, r2
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f04f 0400 	mov.w	r4, #0
 8001856:	461a      	mov	r2, r3
 8001858:	4623      	mov	r3, r4
 800185a:	f7fe fc8f 	bl	800017c <__aeabi_uldivmod>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e040      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	461d      	mov	r5, r3
 800186a:	f04f 0600 	mov.w	r6, #0
 800186e:	4629      	mov	r1, r5
 8001870:	4632      	mov	r2, r6
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	f04f 0400 	mov.w	r4, #0
 800187a:	0154      	lsls	r4, r2, #5
 800187c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001880:	014b      	lsls	r3, r1, #5
 8001882:	4619      	mov	r1, r3
 8001884:	4622      	mov	r2, r4
 8001886:	1b49      	subs	r1, r1, r5
 8001888:	eb62 0206 	sbc.w	r2, r2, r6
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	f04f 0400 	mov.w	r4, #0
 8001894:	0194      	lsls	r4, r2, #6
 8001896:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800189a:	018b      	lsls	r3, r1, #6
 800189c:	1a5b      	subs	r3, r3, r1
 800189e:	eb64 0402 	sbc.w	r4, r4, r2
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	00e2      	lsls	r2, r4, #3
 80018ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018b0:	00d9      	lsls	r1, r3, #3
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	195b      	adds	r3, r3, r5
 80018b8:	eb44 0406 	adc.w	r4, r4, r6
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	02a2      	lsls	r2, r4, #10
 80018c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018ca:	0299      	lsls	r1, r3, #10
 80018cc:	460b      	mov	r3, r1
 80018ce:	4614      	mov	r4, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	4621      	mov	r1, r4
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f04f 0400 	mov.w	r4, #0
 80018da:	461a      	mov	r2, r3
 80018dc:	4623      	mov	r3, r4
 80018de:	f7fe fc4d 	bl	800017c <__aeabi_uldivmod>
 80018e2:	4603      	mov	r3, r0
 80018e4:	460c      	mov	r4, r1
 80018e6:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
      break;
 80018ec:	e00d      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_GetSysClockFreq+0x184>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0b5b      	lsrs	r3, r3, #13
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	613b      	str	r3, [r7, #16]
      break;
 8001908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190a:	693b      	ldr	r3, [r7, #16]
}
 800190c:	4618      	mov	r0, r3
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	00f42400 	.word	0x00f42400
 800191c:	007a1200 	.word	0x007a1200
 8001920:	08001f74 	.word	0x08001f74

08001924 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d12c      	bne.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e016      	b.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	6253      	str	r3, [r2, #36]	; 0x24
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001974:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800197c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001980:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001988:	d105      	bne.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001990:	d101      	bne.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001992:	2301      	movs	r3, #1
 8001994:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 0201 	bic.w	r2, r3, #1
 80019b0:	490b      	ldr	r1, [pc, #44]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000
 80019e0:	40023c00 	.word	0x40023c00

080019e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e07b      	b.n	8001aee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a06:	d009      	beq.n	8001a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
 8001a0e:	e005      	b.n	8001a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fe8e 	bl	8000758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa0:	ea42 0103 	orr.w	r1, r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0104 	and.w	r1, r3, #4
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f003 0210 	and.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69da      	ldr	r2, [r3, #28]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b088      	sub	sp, #32
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_SPI_Transmit+0x22>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e126      	b.n	8001d66 <HAL_SPI_Transmit+0x270>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b20:	f7fe ff1c 	bl	800095c <HAL_GetTick>
 8001b24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d002      	beq.n	8001b3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
 8001b38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b3a:	e10b      	b.n	8001d54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_SPI_Transmit+0x52>
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b4c:	e102      	b.n	8001d54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2203      	movs	r2, #3
 8001b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b94:	d10f      	bne.n	8001bb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d007      	beq.n	8001bd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bdc:	d14b      	bne.n	8001c76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_SPI_Transmit+0xf6>
 8001be6:	8afb      	ldrh	r3, [r7, #22]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d13e      	bne.n	8001c6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	881a      	ldrh	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	1c9a      	adds	r2, r3, #2
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c10:	e02b      	b.n	8001c6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d112      	bne.n	8001c46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	1c9a      	adds	r2, r3, #2
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c44:	e011      	b.n	8001c6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c46:	f7fe fe89 	bl	800095c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d803      	bhi.n	8001c5e <HAL_SPI_Transmit+0x168>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d102      	bne.n	8001c64 <HAL_SPI_Transmit+0x16e>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c68:	e074      	b.n	8001d54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ce      	bne.n	8001c12 <HAL_SPI_Transmit+0x11c>
 8001c74:	e04c      	b.n	8001d10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_SPI_Transmit+0x18e>
 8001c7e:	8afb      	ldrh	r3, [r7, #22]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d140      	bne.n	8001d06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	7812      	ldrb	r2, [r2, #0]
 8001c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001caa:	e02c      	b.n	8001d06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d113      	bne.n	8001ce2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ce0:	e011      	b.n	8001d06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ce2:	f7fe fe3b 	bl	800095c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d803      	bhi.n	8001cfa <HAL_SPI_Transmit+0x204>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d102      	bne.n	8001d00 <HAL_SPI_Transmit+0x20a>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d04:	e026      	b.n	8001d54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1cd      	bne.n	8001cac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f8b3 	bl	8001e80 <SPI_EndRxTxTransaction>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	77fb      	strb	r3, [r7, #31]
 8001d50:	e000      	b.n	8001d54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001d52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d80:	f7fe fdec 	bl	800095c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d90:	f7fe fde4 	bl	800095c <HAL_GetTick>
 8001d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	015b      	lsls	r3, r3, #5
 8001d9c:	0d1b      	lsrs	r3, r3, #20
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001da6:	e054      	b.n	8001e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dae:	d050      	beq.n	8001e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001db0:	f7fe fdd4 	bl	800095c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d902      	bls.n	8001dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13d      	bne.n	8001e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dde:	d111      	bne.n	8001e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de8:	d004      	beq.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df2:	d107      	bne.n	8001e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0c:	d10f      	bne.n	8001e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e017      	b.n	8001e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d19b      	bne.n	8001da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000

08001e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <SPI_EndRxTxTransaction+0x7c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <SPI_EndRxTxTransaction+0x80>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eaa:	d112      	bne.n	8001ed2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff ff5a 	bl	8001d70 <SPI_WaitFlagStateUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0220 	orr.w	r2, r3, #32
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e00f      	b.n	8001ef2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d0f2      	beq.n	8001ed2 <SPI_EndRxTxTransaction+0x52>
 8001eec:	e000      	b.n	8001ef0 <SPI_EndRxTxTransaction+0x70>
        break;
 8001eee:	bf00      	nop
  }

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000
 8001f00:	165e9f81 	.word	0x165e9f81

08001f04 <__libc_init_array>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	2500      	movs	r5, #0
 8001f08:	4e0c      	ldr	r6, [pc, #48]	; (8001f3c <__libc_init_array+0x38>)
 8001f0a:	4c0d      	ldr	r4, [pc, #52]	; (8001f40 <__libc_init_array+0x3c>)
 8001f0c:	1ba4      	subs	r4, r4, r6
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	42a5      	cmp	r5, r4
 8001f12:	d109      	bne.n	8001f28 <__libc_init_array+0x24>
 8001f14:	f000 f822 	bl	8001f5c <_init>
 8001f18:	2500      	movs	r5, #0
 8001f1a:	4e0a      	ldr	r6, [pc, #40]	; (8001f44 <__libc_init_array+0x40>)
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <__libc_init_array+0x44>)
 8001f1e:	1ba4      	subs	r4, r4, r6
 8001f20:	10a4      	asrs	r4, r4, #2
 8001f22:	42a5      	cmp	r5, r4
 8001f24:	d105      	bne.n	8001f32 <__libc_init_array+0x2e>
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f2c:	4798      	blx	r3
 8001f2e:	3501      	adds	r5, #1
 8001f30:	e7ee      	b.n	8001f10 <__libc_init_array+0xc>
 8001f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f36:	4798      	blx	r3
 8001f38:	3501      	adds	r5, #1
 8001f3a:	e7f2      	b.n	8001f22 <__libc_init_array+0x1e>
 8001f3c:	08001f98 	.word	0x08001f98
 8001f40:	08001f98 	.word	0x08001f98
 8001f44:	08001f98 	.word	0x08001f98
 8001f48:	08001f9c 	.word	0x08001f9c

08001f4c <memset>:
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4402      	add	r2, r0
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d100      	bne.n	8001f56 <memset+0xa>
 8001f54:	4770      	bx	lr
 8001f56:	f803 1b01 	strb.w	r1, [r3], #1
 8001f5a:	e7f9      	b.n	8001f50 <memset+0x4>

08001f5c <_init>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	bf00      	nop
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr

08001f68 <_fini>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	bf00      	nop
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr
